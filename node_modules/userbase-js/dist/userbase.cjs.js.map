{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"base64-arraybuffer\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"uuid/v4\"","webpack:///external \"diffie-hellman\"","webpack:///external \"scrypt-js\"","webpack:///external \"sorted-array\"","webpack:///./src/statusCodes.js","webpack:///./src/errors/auth.js","webpack:///./src/errors/db.js","webpack:///./src/errors/config.js","webpack:///./src/errors/payments.js","webpack:///./src/errors/index.js","webpack:///./src/config.js","webpack:///./src/api/utils.js","webpack:///./src/api/auth.js","webpack:///./src/localData.js","webpack:///./src/Crypto/utils.js","webpack:///./src/Crypto/sha-256.js","webpack:///./src/Crypto/hkdf.js","webpack:///./src/Crypto/aes-gcm.js","webpack:///./src/Crypto/diffie-hellman.js","webpack:///./src/Crypto/ecdsa.js","webpack:///./src/Crypto/ecdh.js","webpack:///./src/Crypto/hmac.js","webpack:///./src/Crypto/scrypt.js","webpack:///./src/Crypto/index.js","webpack:///./src/utils.js","webpack:///./src/worker.js","webpack:///./src/api/db.js","webpack:///./src/ws.js","webpack:///./src/auth.js","webpack:///./src/db.js","webpack:///./src/payments.js","webpack:///./src/index.js"],"names":["UsernameAlreadyExists","Error","constructor","params","name","message","status","statusCodes","UsernameMissing","UsernameCannotBeBlank","UsernameTooLong","maxLen","UsernameMustBeString","PasswordMissing","PasswordCannotBeBlank","PasswordTooShort","minLen","PasswordTooLong","PasswordMustBeString","PasswordAttemptLimitExceeded","delay","UsernameOrPasswordMismatch","SessionLengthMustBeNumber","SessionLengthTooShort","SessionLengthTooLong","AllowServerSideEncryptionMustBeBoolean","UserAlreadySignedIn","username","UserPendingDeletion","AppIdNotValid","DomainNotWhitelisted","domain","UserNotSignedIn","UserNotFound","UserEmailNotFound","UserMustChangePassword","EmailNotValid","ProfileMustBeObject","ProfileCannotBeEmpty","ProfileHasTooManyKeys","maxKeys","ProfileKeyTooLong","key","ProfileValueMustBeString","value","ProfileValueCannotBeBlank","ProfileValueTooLong","RememberMeValueNotValid","options","JSON","stringify","Object","keys","ParamsMissing","TrialExceededLimit","CurrentPasswordMissing","CurrentPasswordIncorrect","KeyNotFound","DeleteEndToEndEncryptedDataMustBeBoolean","DatabaseNameMissing","DatabaseNameCannotBeBlank","DatabaseNameMustBeString","DatabaseNameTooLong","maxLength","DatabaseNameRestricted","databaseName","DatabaseAlreadyOpening","ChangeHandlerMissing","ChangeHandlerMustBeFunction","EncryptionModeNotValid","ServerSideEncryptionNotEnabledInClient","DatabaseNotOpen","DatabaseNotFound","DatabaseIsReadOnly","DatabaseIdMustBeString","DatabaseIdCannotBeBlank","DatabaseIdNotAllowed","DatabaseIdNotAllowedForOwnDatabase","DatabaseIdInvalidLength","length","ShareTokenInvalid","ShareTokenNotFound","ShareTokenNotAllowed","reason","ShareTokenNotAllowedForOwnDatabase","ReadOnlyMustBeBoolean","ReadOnlyParamNotAllowed","ResharingAllowedParamNotAllowed","ResharingAllowedMustBeBoolean","ResharingNotAllowed","ResharingWithWriteAccessNotAllowed","SharingWithSelfNotAllowed","ModifyingOwnPermissionsNotAllowed","ModifyingOwnerPermissionsNotAllowed","ModifyingPermissionsNotAllowed","GrantingWriteAccessNotAllowed","RequireVerifiedMustBeBoolean","RequireVerifiedParamNotNecessary","RevokeMustBeBoolean","ItemMissing","ItemInvalid","ItemTooLarge","maxKb","ItemIdMustBeString","ItemIdTooLong","ItemIdMissing","ItemIdCannotBeBlank","ItemAlreadyExists","ItemDoesNotExist","ItemUpdateConflict","FileMissing","FileMustBeFile","FileCannotBeEmpty","FileUploadConflict","FileNotFound","FileIdMissing","FileIdMustBeString","FileIdCannotBeBlank","FileIdTooLong","RangeMustBeObject","RangeMissingStart","RangeMissingEnd","RangeStartMustBeNumber","RangeEndMustBeNumber","RangeStartMustBeGreaterThanZero","RangeEndMustBeGreaterThanRangeStart","RangeEndMustBeLessThanFileSize","OperationsMissing","OperationsMustBeArray","CommandNotRecognized","command","OperationsConflict","OperationsExceedLimit","limit","UserNotVerified","UserMustBeReverified","UserUnableToReceiveDatabase","VerificationMessageMissing","VerificationMessageCannotBeBlank","VerificationMessageMustBeString","VerificationMessageInvalid","VerifyingSelfNotAllowed","ProgressHandlerMustBeFunction","TransactionUnauthorized","WriteAccessParamNotAllowed","AppIdAlreadySet","appId","AppIdMustBeString","AppIdMissing","AppIdCannotBeBlank","WebCryptoUnavailable","UpdateUserHandlerMustBeFunction","SuccessUrlMissing","SuccessUrlMustBeString","SuccessUrlInvalid","invalidProtocol","CancelUrlMissing","CancelUrlMustBeString","CancelUrlInvalid","StripeJsLibraryMissing","PaymentsDisabled","PriceIdOrPlanIdAllowed","PriceIdOrPlanIdMissing","SubscriptionPlanAlreadyPurchased","StripeAccountNotConnected","SubscriptionNotFound","SubscriptionInactive","subscriptionStatus","SubscriptionNotPurchased","SubscriptionAlreadyCanceled","TrialExpired","StripeError","error","type","AppIdNotSet","ServiceUnavailable","InternalServerError","Timeout","Reconnecting","UnknownServiceUnavailable","e","console","ParamsMustBeObject","TooManyRequests","retryDelay","retryDelaySeconds","Math","floor","auth","db","config","payments","USERBASE_JS_VERSION","VERSION","DEFAULT_ENDPOINT","STRIPE_PRODUCTION_PUBLISHABLE_KEY","STRIPE_TEST_PUBLISHABLE_KEY","userbaseAppId","userbaseUpdateUserHandler","userbaseAllowServerSideEncryptionMode","getAppId","errors","getUpdateUserHandler","getEndpoint","window","_userbaseEndpoint","configure","updateUserHandler","allowServerSideEncryption","getStripePublishableKey","isProduction","_USERBASE_STRIPE_PRODUCTION_PUBLISHABLE_KEY","_USERBASE_STRIPE_TEST_PUBLISHABLE_KEY","isServerSideEncryptionModeAllowed","TEN_SECONDS_MS","RequestError","data","statusText","response","TimeoutError","timeout","handleResponse","xhr","resolve","reject","parse","processXhr","onload","onerror","ontimeout","signUp","passwordToken","ecKeyData","passwordSalts","keySalts","email","profile","passwordBasedBackup","sessionLength","Promise","XMLHttpRequest","method","url","open","setRequestHeader","send","getPasswordSalts","encodeURIComponent","signIn","signInWithSession","sessionId","getServerPublicKey","responseType","getPublicKey","uploadBundleChunk","chunk","token","tryCatchWrapper","func","args","warn","_getSeedName","setCurrentSession","rememberMe","signedIn","creationDate","expirationDate","session","sessionString","localStorage","setItem","sessionStorage","getCurrentSession","sessionStorageCurrentSessionString","getItem","currentSession","localCurrentSessionString","localCurrentSession","localSessionString","saveSeedString","seedString","removeSeedString","seedName","removeItem","getSeedString","signInSession","signOutSession","removeCurrentSession","ONE_KB","TEN_KB","arrayBufferToString","buf","minified","bufView","Uint8Array","Uint16Array","result","chunkSize","i","subarray","String","fromCharCode","apply","stringToArrayBuffer","str","ArrayBuffer","strLen","charCodeAt","appendBuffer","buffer1","buffer2","tmp","byteLength","set","buffer","appendBuffers","buffers","bufferByteLengths","map","totalByteLength","reduce","byteLengthSum","bufferByteLength","currentByteLength","byteLengths","hexStringToArrayBuffer","hexString","halfHexStringLen","array","byteStartIndex","byte","substring","byteAsInt","parseInt","push","BYTE_SIZE","HASH_ALGORITHM_NAME","hash","crypto","subtle","digest","hashBase64String","dataString","base64","decode","encode","hashString","HKDF_ALGORITHM_NAME","RAW_KEY_TYPE","KEY_IS_NOT_EXTRACTABLE","KEY_WILL_BE_USED_TO","importHkdfKeyFromString","seed","hkdfKey","importHkdfKey","importKey","SALT_BYTE_SIZE","sha256","generateSalt","getRandomValues","getParams","keyName","salt","info","PASSWORD_TOKEN_NAME","PASSWORD_TOKEN_NUM_BITS","getPasswordToken","passwordTokenBits","deriveBits","ENCRYPTION_ALGORITHM_NAME","BIT_SIZE","KEY_IS_EXTRACTABLE","ENCRYPTION_KEY_NAME","PASSWORD_BASED_ENCRYPTION_KEY","RECOMMENDED_IV_BYTE_SIZE","RECOMMENDED_AUTHENTICATION_TAG_LENGTH","windowOrSelfObject","self","getEncryptionKeyParams","getCiphertextParams","iv","tagLength","generateIv","sliceEncryptedArrayBuffer","encryptedArrayBuffer","ivStartIndex","ciphertextArrayBuffer","slice","importKeyFromMaster","masterKey","encryptionKeyName","encryptionKey","deriveKey","hkdf","generateKey","getKeyStringFromKey","rawKey","exportKey","keyString","getKeyFromKeyString","getKeyFromRawKey","getRawKeyFromKey","encrypt","plaintext","encryptJson","plaintextJson","plaintextString","encrypted","encryptString","plaintextArrayBuffer","decrypt","decryptJson","encryptedJsonString","decryptString","encryptedString","getPasswordBasedEncryptionKey","generateAndEncryptKeyEncryptionKey","keyEncryptionKey","keyEncryptionKeyRaw","encryptedKeyEncryptionKey","DIFFIE_HELLMAN_KEY_NAME","PRIME","GENERATOR","serverPublicKey","authApi","setPrivateKeyAndGenerateKeys","diffieHellman","privateKey","setPrivateKey","generateKeys","createDiffieHellman","DH","getSharedKey","otherPublicKey","sharedSecret","computeSecret","sharedRawKey","sharedKey","aesGcm","getSharedKeyWithServer","rawPrivateKey","ECDSA_ALGORITHM_NAME","KEY_PAIR_WILL_BE_USED_TO","PRIVATE_KEY_WILL_BE_USED_TO","PRIVATE_KEY_TYPE","PUBLIC_KEY_WILL_BE_USED_TO","PUBLIC_KEY_TYPE","ECDSA_KEY_ENCRYPTION_KEY","NAMED_CURVE","ECDSA_PARAMS","namedCurve","ECDSA_SIGNING_PARAMS","generateKeyPair","keyPair","getRawPrivateKeyFromPrivateKey","jwkPrivateKey","getPrivateKeyFromRawPrivateKey","getPublicKeyFromRawPublicKey","rawPublicKey","publicKey","getRawPublicKeyFromPublicKey","getPublicKeyStringFromPublicKey","publicKeyString","getPublicKeyFromPrivateKey","d","key_ops","importEcdsaKeyEncryptionKeyFromMaster","generateEcdsaKeyData","ecdsaKeyPair","ecdsaKeyEncryptionKeySalt","ecdsaKeyEncryptionKey","ecdsaRawPrivateKey","encryptedEcdsaPrivateKey","ecdsaPrivateKey","ecdsaPublicKey","sign","signature","signString","signatureString","verify","isVerified","verifyString","ECDH_ALGORITHM_NAME","ECDH_KEY_ENCRYPTION_KEY","ECDH_PARAMS","importEcdhKeyEncryptionKeyFromMaster","generateEcdhKeyData","ecdhKeyPair","ecdhKeyEncryptionKeySalt","ecdhKeyEncryptionKey","ecdhRawPrivateKey","encryptedEcdhPrivateKey","ecdhPublicKey","signedEcdhPublicKey","ecdsa","ecdhPrivateKey","computeSharedKeyEncryptionKey","otherEcdhPublicKey","sharedKeyEncryptionKey","public","HMAC_KEY_NAME","ALGORITHM_NAME","KEY_WILL_BE_USED_TO_SIGN","KEY_WILL_BE_USED_TO_SIGN_AND_VERIFY","hmacKey","importKeyFromRawBits","rawBits","N","r","p","dkLen","SALT_LENGTH","passwordString","passwordHashAlgo","scryptJs","scrypt","passwordArrayBuffer","passwordHash","SEED_BYTE_SIZE","generateSeed","ecdh","hmac","readArrayBufferAsString","arrayBuffer","reader","FileReader","readAsText","Blob","removeProtocolFromEndpoint","endpoint","http","https","getProtocolFromEndpoint","split","getWsUrl","host","protocol","byteSizeOfString","string","objectHasOwnProperty","object","property","prototype","hasOwnProperty","call","Queue","queue","offset","getLength","isEmpty","enqueue","item","dequeue","peek","newWorker","workerFunction","onmessage","compress","decompress","LZString","o","t","n","charAt","compressToBase64","_compress","decompressFromBase64","_decompress","compressToUTF16","decompressFromUTF16","compressToUint8Array","s","decompressFromUint8Array","Array","forEach","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","u","c","a","l","f","h","m","v","pow","w","A","val","position","index","postMessage","blobURL","URL","createObjectURL","toString","worker","Worker","revokeObjectURL","terminate","TIMEOUT","userId","databaseId","seqNo","bundleId","chunkNo","wsAlreadyConnected","BACKOFF_RETRY_DELAY","MAX_RETRY_DELAY","BUNDLE_CHUNK_SIZE","BUNDLE_CHUNKS_PER_BATCH","WS_REQUEST_TIMEOUT","clientId","uuidv4","RequestFailed","action","WebSocketError","Connection","init","resolveConnection","rejectConnection","changePassword","state","encryptionMode","pingTimeout","clearTimeout","ws","connected","connectionResolved","authToken","salts","userData","stripeData","requests","dbNameToHash","databases","databasesByDbId","shareTokenIdToDbId","connect","reconnectDelay","timeoutToOpenWebSocket","setTimeout","reconnecting","WebSocket","onopen","route","heartbeat","validationMessage","encryptedValidationMessage","setKeys","validateKey","DOMException","dbId","dbNameHash","database","isOwner","applyTransactionsQueue","startApplyingThisBatchOfTransactions","openingDatabase","dbKey","plaintextDbKey","shareTokenEncryptedDbKey","dbKeyString","decryptShareTokenEncryptedDbKey","shareTokenEncryptionKeySalt","writers","attributionEnabled","usernamesByUserId","waitForFullBundle","finishedWaitingForBundle","bundle","rebuildBundle","bundleSeqNo","encryptedBundleEncryptionKey","applyBundle","alert","newTransactions","transactionLog","applyTransactions","ownerId","buildBundle","startApplyingNextBatchInQueue","isFirstChunk","isLastChunk","bundleChunks","handleUpdateUser","updatedUser","requestId","request","promiseResolve","promiseReject","successfulResponse","log","close","onclose","serviceRestart","code","clientDisconnected","attemptToReconnect","wasClean","reconnect","reconnected","currentState","min","dbsToReopen","dbsToReopenById","reopenDatabases","openDatabasePromises","reopenAtSeqNo","lastSeqNo","shareTokenHkdfKey","shareTokenAuthData","authenticateShareToken","shareTokenId","all","LATENCY_BUFFER","signOut","localData","encryptionKeySalt","hmacKeySalt","rawEcdsaPrivateKey","rawEcdhPrivateKey","dhKeySalt","dhPrivateKey","ecdsaKeyWrapperSalt","ecdsaKeyData","ecdhKeyData","newEcKeyData","responseWatcher","watch","chunkArrayBuffer","bundleArrayBuffer","plaintextMetadata","bundleEncryptionKeyRaw","bundleEncryptionKey","decrypted","decryptedString","decompressedEncrypted","decompressedPlaintextMetdata","uploadBundle","chunkNumber","batch","initBundleUpload","initResponse","orderedItems","items","itemsIndex","orderedItemsArray","itemId","prepareBundle","itemsPlaintextMetadata","bundledAtSeqNo","undefined","compressedBeforeEncryption","compressedPlaintextMetadataString","compressedArrayBufferBeforeEncryption","encryptedItems","numChunks","buildUserResult","protectedProfile","usedTempPassword","passwordChanged","paymentsMode","cancelSubscriptionAt","subscriptionPlanId","trialExpirationDate","user","rotateKeys","newSeedString","newKeyData","shareTokenAuthKeyData","shareTokenEcdsaPrivateKey","shareTokenEcdsaKeyEncryptionKeySalt","shareTokenEcdsaKeyEncryptionKey","shareTokenEncryptedEcdsaPrivateKey","shareTokenEcdsaPrivateKeyRaw","signedValidationMessage","MAX_PASSWORD_CHAR_LENGTH","MIN_PASSWORD_CHAR_LENGTH","REMEMBER_ME_OPTIONS","local","none","KEY_NOT_FOUND_ON_SIGN_IN","KEY_NOT_FOUND_ON_FORGOT_PASSWORD","_checkSignedInState","_parseGenericErrors","location","origin","indexOf","_connectWebSocket","_parseGenericUsernamePasswordError","_parseSessionLengthError","_parseUserResponseError","_calculateSessionLengthMs","_validateUsername","_validatePassword","password","_validateSignUpOrSignInInput","_generatePasswordToken","passwordSalt","passwordHkdfKey","passwordTokenSalt","passwordBasedEncryptionKeySalt","passwordBasedEncryptionKey","passwordEncryptedSeed","_generateKeys","_generateKeysAndSignUp","_validateProfile","keyExists","_validateSignUpInput","toLowerCase","_getSeedStringFromPasswordBasedBackup","seedFromBackup","seedStringFromBackup","_signInWrapper","apiSignInResult","_getPasswordSaltsOverRestEndpoint","_getPasswordSaltsOverWebSocket","passwordSaltsResponse","_rebuildPasswordToken","savedSeedString","lastUsedUsername","Date","apiSignInWithSessionResult","_validateUpdatedUserInput","currentPassword","newPassword","_buildUpdateUserParams","newSeed","currentPasswordSalts","newPasswordPromise","currentPasswordToken","updateUser","startingUserId","finalParams","deleteUser","_getMasterKeyAndKeyNotFoundMessage","forgotPassword","deleteEndToEndEncryptedData","forgotPasswordWs","encryptedForgotPasswordToken","forgotPasswordToken","signedForgotPasswordToken","success","MAX_DB_NAME_CHAR_LENGTH","MAX_ITEM_ID_CHAR_LENGTH","MAX_ITEM_KB","MAX_ITEM_BYTES","UUID_CHAR_LENGTH","FILE_CHUNK_SIZE","FILE_CHUNKS_PER_BATCH","VERIFIED_USERS_DATABASE_NAME","ENCRYPTION_MODE_OPTIONS","TX_TIMEOUT","UnverifiedTransaction","startSeqNo","txSeqNo","transactions","getStartSeqNo","getIndex","setIndex","getResult","promise","verifyPromise","addTransaction","transaction","Database","changeHandler","receivedMessage","onChange","_setChangeHandler","fileIds","compareItems","b","operationIndex","SortedArray","unverifiedTransactions","Map","transactionCode","applyTransaction","j","getItems","itemIndex","file","fileEncryptionKeyString","fileEncryptionKey","fileId","insert","record","id","createdBy","attributionFromTransaction","writeAccess","validateInsert","applyInsert","updatedBy","__v","validateUpdate","applyUpdate","deletedBy","validateUpdateOrDelete","applyDelete","operations","attribution","recordPromises","operation","records","validateBatchTransaction","applyBatchTransaction","fileEncryptionKeyRaw","fileMetadata","fileVersion","fileName","fileSize","fileType","fileUploadedBy","validateUploadFile","applyUploadFile","timestamp","createdByUserId","updatedByUserId","currentVersion","getItemVersionNumber","validateAccessPermissions","getFileVersionNumber","modifiedByUserId","userIsAuthorized","onlyCreator","users","itemExists","existingFile","remove","uniqueItemIds","registerUnverifiedTransaction","unverifiedTransaction","unregisterUnverifiedTransaction","pendingTransaction","prop","get","userDeleted","shareTokenEncryptionKey","_idempotentOpenDatabase","currentReceivedMessage","_getShareTokenIdFromShareToken","shareTokenArrayBuffer","shareTokenIdArrayBuffer","_getShareTokenIdAndShareTokenSeed","shareTokenResult","shareTokenSeed","_openDatabaseByShareToken","shareToken","shareTokenIdAndShareTokenSeed","_openDatabaseByDatabaseId","_openDatabaseByNameHash","newDatabaseParams","_openDatabase","firstMessageFromWebSocket","_createDatabase","dbName","encryptedDbKey","encryptedDbName","fingerprint","_getMyFingerprint","_validateEncryptionMode","_validateDbName","_validateDbId","_validateDbInput","allowVerifiedUsersDatabase","openDatabase","openByDbNameHashParams","openByDbIdParams","openByShareToken","getOpenDb","insertItem","insertParams","_buildInsertParams","postTransaction","itemString","itemKey","itemRecord","encryptedItem","updateItem","updateParams","_buildUpdateParams","deleteItem","deleteParams","_buildDeleteParams","putTransaction","isArray","operationParamsPromises","operationParamsPromiseResults","operationParams","pendingTx","paramsWithDbData","sequenceNo","_completeFileUpload","encryptedFileMetadata","encryptedFileEncryptionKey","_readBlob","blob","target","readAsArrayBuffer","_uploadChunkRequest","bytesTransferredObject","progressHandler","bytesTransferred","_uploadChunk","plaintextChunk","chunkEncryptionKey","encryptedChunkEncryptionKey","encryptedChunk","uploadChunkParams","uploadChunkRequest","size","_buildFileMetadata","File","_validateUploadFile","uploadFile","_getChunk","chunkRawBuffer","chunkEncryptionKeyRawBuffer","chunkEncryptionKeyRaw","_getByteRange","range","start","end","chunks","startChunkNumber","endChunkNumber","_getFile","finalChunkNumber","_validateGetFileParams","getFile","_verifyUsersParent","verifiedUsers","databaseUser","senderUsername","verificationValues","sentSignature","receivedSignature","senderEcdsaPublicKey","verifiedFingerprint","parentRawEcdsaPublicKey","parentFingerprint","_getFingerprint","parentEcdsaPublicKey","expectedSentSignature","_signFingerprintWithDbKey","verifiedParentSent","recipientEcdsaPublicKey","expectedReceivedSignature","verifiedReceivedFromParent","_verifyReceivedDatabaseFromUser","myFingerprint","myEcdsaPublicKey","mySentSignature","myReceivedSignature","verifiedReceived","mySenderEcdsaPublicKey","verifiedSent","_verifySentDatabaseToUser","_buildDatabaseUserResult","databaseUsers","myUsername","mySenderUsername","sentDatabaseToUser","isChild","receivedDatabaseFromUser","verified","verifiedReceivedDatabaseFromUser","verifiedGrandparent","verifiedUsersParent","receivedFromUsername","_databaseHasOwner","_getDatabaseUsers","databaseNameHash","databaseUsersResponse","nextPageTokenLessThanUserId","nextPageTokenMoreThanUserId","_buildDatabaseResult","readOnly","resharingAllowed","wrappedDbKey","senderRawEcdsaPublicKey","ephemeralPublicKey","signedEphemeralPublicKey","sharedEncryptedDbKey","senderSignedEphemeralPublicKey","senderEphemeralEcdhPublicKey","senderFingerprint","_signDbKeyAndFingerprint","getDatabases","requestParams","databasesResponse","_openVerifiedUsersDatabase","databaseResults","nextPageToken","filter","_getDatabase","databaseResponse","rawDbKey","dbKeyHash","signedFingerprint","signedDbKeyAndFingerprint","_verifyDatabaseRecipientFingerprint","recipientFingerprint","verifiedRecipientFingerprint","foundOldFingerprint","verifiedUsersArray","verifiedUsername","_getDatabaseEncryptionKey","_getShareToken","shareTokenEncryptedDbKeyString","keyData","shareTokenPublicKey","shareTokenResponse","_shareDatabaseWithUsername","requireVerified","recipientPublicKey","recipientRawEcdsaPublicKey","recipientEcdhPublicKey","ephemeralEcdhKeyPair","rawEphemeralEcdhPublicKey","signedEphemeralEcdhPublicKey","sharedEncryptedDbKeyString","_validateDbSharingInput","shareDatabase","modifyDatabasePermissions","revoke","_packVerificationMessage","btoa","_unpackVerificationMessage","verificationMessage","atob","ecdsaRawPublicKey","ecdsaPublicKeyHash","getVerificationMessage","verifyUser","_validatePurchaseOrUpdate","stripeAccountId","successUrl","successUrlProtocol","cancelUrl","cancelUrlProtocol","purchaseSubscription","sessionIdResponse","stripeSessionId","stripePk","Stripe","stripeAccount","redirectToCheckout","_validateModifySubscriptionConditions","cancelSubscription","cancelResponse","resumeSubscription","updatePaymentMethod"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,+C;;;;;;ACAA,kE;;;;;;ACAA,oC;;;;;;ACAA,2C;;;;;;ACAA,sC;;;;;;ACAA,yC;;;;;;;;;;;;;;;;;;;ACAe;AACb,aAAW,GADE;AAGb,iBAAe,GAHF;AAIb,kBAAgB,GAJH;AAKb,sBAAoB,GALP;AAMb,eAAa,GANA;AAOb,eAAa,GAPA;AAQb,cAAY,GARC;AASb,uBAAqB,GATR;AAWb,2BAAyB,GAXZ;AAYb,yBAAuB,GAZV;AAab,qBAAmB,GAbN;AAeb;AACA,qBAAmB,IAhBN;AAkBb;AACA,sBAAoB,IAnBP;AAoBb,8BAA4B;AApBf,CAAf,E;;ACAA;;AAEA,MAAMA,0BAAN,SAAoCC,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMC,oBAAN,SAA8BP,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,mBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAME,0BAAN,SAAoCR,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMG,oBAAN,SAA8BT,KAA9B,CAAoC;AAClCC,aAAW,CAACS,MAAD,EAAS,GAAGR,MAAZ,EAAoB;AAC7B,UAAMQ,MAAN,EAAc,GAAGR,MAAjB;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,iDAAsDM,MAAtD;AACA,SAAKL,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMK,yBAAN,SAAmCX,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,4BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMM,oBAAN,SAA8BZ,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,mBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMO,0BAAN,SAAoCb,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMQ,qBAAN,SAA+Bd,KAA/B,CAAqC;AACnCC,aAAW,CAACc,MAAD,EAAS,GAAGb,MAAZ,EAAoB;AAC7B,UAAMa,MAAN,EAAc,GAAGb,MAAjB;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,sDAA2DW,MAA3D;AACA,SAAKV,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPkC;;AAUrC,MAAMU,oBAAN,SAA8BhB,KAA9B,CAAoC;AAClCC,aAAW,CAACS,MAAD,EAAS,GAAGR,MAAZ,EAAoB;AAC7B,UAAMQ,MAAN,EAAc,GAAGR,MAAjB;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,iDAAsDM,MAAtD;AACA,SAAKL,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMW,yBAAN,SAAmCjB,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,4BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMY,iCAAN,SAA2ClB,KAA3C,CAAiD;AAC/CC,aAAW,CAACkB,KAAD,EAAQ,GAAGjB,MAAX,EAAmB;AAC5B,UAAMiB,KAAN,EAAa,GAAGjB,MAAhB;AAEA,SAAKC,IAAL,GAAY,8BAAZ;AACA,SAAKC,OAAL,wDAA6De,KAA7D;AACA,SAAKd,MAAL,GAAcC,WAAW,CAAC,cAAD,CAAzB;AACD;;AAP8C;;AAUjD,MAAMc,+BAAN,SAAyCpB,KAAzC,CAA+C;AAC7CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,4BAAZ;AACA,SAAKC,OAAL,GAAe,gCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,cAAD,CAAzB;AACD;;AAP4C;;AAU/C,MAAMe,8BAAN,SAAwCrB,KAAxC,CAA8C;AAC5CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,2BAAZ;AACA,SAAKC,OAAL,GAAe,kCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP2C;;AAU9C,MAAMgB,0BAAN,SAAoCtB,KAApC,CAA0C;AACxCC,aAAW,CAACc,MAAD,EAAS,GAAGb,MAAZ,EAAoB;AAC7B,UAAMa,MAAN,EAAc,GAAGb,MAAjB;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,mDAAwDW,MAAxD;AACA,SAAKV,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMiB,yBAAN,SAAmCvB,KAAnC,CAAyC;AACvCC,aAAW,CAACS,MAAD,EAAS,GAAGR,MAAZ,EAAoB;AAC7B,UAAMQ,MAAN,EAAc,GAAGR,MAAjB;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,kDAAuDM,MAAvD;AACA,SAAKL,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMkB,2CAAN,SAAqDxB,KAArD,CAA2D;AACzDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wCAAZ;AACA,SAAKC,OAAL,GAAe,uDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwD;;AAU3D,MAAMmB,wBAAN,SAAkCzB,KAAlC,CAAwC;AACtCC,aAAW,CAACyB,QAAD,EAAW,GAAGxB,MAAd,EAAsB;AAC/B,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,oBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACA,SAAKoB,QAAL,GAAgBA,QAAhB;AACD;;AARqC;;AAWxC,MAAMC,wBAAN,SAAkC3B,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAMsB,kBAAN,SAA4B5B,KAA5B,CAAkC;AAChCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAe,mBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,cAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAMuB,yBAAN,SAAmC7B,KAAnC,CAAyC;AACvCC,aAAW,CAAC6B,MAAD,EAAS,GAAG5B,MAAZ,EAAoB;AAC7B,UAAM4B,MAAN,EAAc,GAAG5B,MAAjB;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,0DAA+D0B,MAAM,cAAOA,MAAP,UAAoB,EAAzF;AACA,SAAKzB,MAAL,GAAcC,WAAW,CAAC,cAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMyB,oBAAN,SAA8B/B,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,gBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAM0B,iBAAN,SAA2BhC,KAA3B,CAAiC;AAC/BC,aAAW,CAACyB,QAAD,EAAW,GAAGxB,MAAd,EAAsB;AAC/B,UAAMwB,QAAN,EAAgB,GAAGxB,MAAnB;AAEA,QAAIwB,QAAJ,EAAc,KAAKA,QAAL,GAAgBA,QAAhB;AAEd,SAAKvB,IAAL,GAAY,cAAZ;AACA,SAAKC,OAAL,GAAe,iBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAT8B;;AAYjC,MAAM2B,sBAAN,SAAgCjC,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,oCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAM4B,2BAAN,SAAqClC,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,6BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM6B,kBAAN,SAA4BnC,KAA5B,CAAkC;AAChCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAe,kBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAM8B,wBAAN,SAAkCpC,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,qCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAM+B,yBAAN,SAAmCrC,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMgC,0BAAN,SAAoCtC,KAApC,CAA0C;AACxCC,aAAW,CAACsC,OAAD,EAAU,GAAGrC,MAAb,EAAqB;AAC9B,UAAMqC,OAAN,EAAe,GAAGrC,MAAlB;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,2DAAgEmC,OAAhE;AACA,SAAKlC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMkC,sBAAN,SAAgCxC,KAAhC,CAAsC;AACpCC,aAAW,CAACS,MAAD,EAAS+B,GAAT,EAAc,GAAGvC,MAAjB,EAAyB;AAClC,UAAMQ,MAAN,EAAc+B,GAAd,EAAmB,GAAGvC,MAAtB;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,oDAAyDM,MAAzD;AACA,SAAKL,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACA,SAAKmC,GAAL,GAAWA,GAAX;AACD;;AARmC;;AAWtC,MAAMC,6BAAN,SAAuC1C,KAAvC,CAA6C;AAC3CC,aAAW,CAACwC,GAAD,EAAME,KAAN,EAAa,GAAGzC,MAAhB,EAAwB;AACjC,UAAMuC,GAAN,EAAWE,KAAX,EAAkB,GAAGzC,MAArB;AAEA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKC,OAAL,GAAe,iCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACA,SAAKmC,GAAL,GAAWA,GAAX;AACA,SAAKE,KAAL,GAAaA,KAAb;AACD;;AAT0C;;AAY7C,MAAMC,8BAAN,SAAwC5C,KAAxC,CAA8C;AAC5CC,aAAW,CAACwC,GAAD,EAAM,GAAGvC,MAAT,EAAiB;AAC1B,UAAMuC,GAAN,EAAW,GAAGvC,MAAd;AAEA,SAAKC,IAAL,GAAY,2BAAZ;AACA,SAAKC,OAAL,GAAe,gCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACA,SAAKmC,GAAL,GAAWA,GAAX;AACD;;AAR2C;;AAW9C,MAAMI,wBAAN,SAAkC7C,KAAlC,CAAwC;AACtCC,aAAW,CAACS,MAAD,EAAS+B,GAAT,EAAcE,KAAd,EAAqB,GAAGzC,MAAxB,EAAgC;AACzC,UAAMQ,MAAN,EAAc+B,GAAd,EAAmBE,KAAnB,EAA0B,GAAGzC,MAA7B;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,sDAA2DM,MAA3D;AACA,SAAKL,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACA,SAAKmC,GAAL,GAAWA,GAAX;AACA,SAAKE,KAAL,GAAaA,KAAb;AACD;;AATqC;;AAYxC,MAAMG,4BAAN,SAAsC9C,KAAtC,CAA4C;AAC1CC,aAAW,CAAC8C,OAAD,EAAU,GAAG7C,MAAb,EAAqB;AAC9B,UAAM6C,OAAN,EAAe,GAAG7C,MAAlB;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,8CAAmD4C,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAf,CAAnD;AACA,SAAK1C,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAM8C,kBAAN,SAA4BpD,KAA5B,CAAkC;AAChCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAe,kCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAM+C,uBAAN,SAAiCrD,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,gCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,kBAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMgD,2BAAN,SAAqCtD,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAMiD,6BAAN,SAAuCvD,KAAvC,CAA6C;AAC3CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKC,OAAL,GAAe,gCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,cAAD,CAAzB;AACD;;AAP0C;;AAU7C,MAAMkD,gBAAN,SAA0BxD,KAA1B,CAAgC;AAC9BC,aAAW,CAACG,OAAD,EAAU,GAAGF,MAAb,EAAqB;AAC9B,UAAME,OAAN,EAAe,GAAGF,MAAlB;AAEA,SAAKC,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP6B;;AAUhC,MAAMmD,6CAAN,SAAuDzD,KAAvD,CAA6D;AAC3DC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,0CAAZ;AACA,SAAKC,OAAL,GAAe,2DAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP0D;;AAU9C;AACbP,uBADa;AAEbQ,iBAFa;AAGbC,uBAHa;AAIbC,iBAJa;AAKbE,sBALa;AAMbC,iBANa;AAObC,uBAPa;AAQbC,kBARa;AASbE,iBATa;AAUbC,sBAVa;AAWbC,8BAXa;AAYbE,4BAZa;AAabC,2BAba;AAcbC,uBAda;AAebC,sBAfa;AAgBbC,wCAhBa;AAiBbC,qBAjBa;AAkBbE,qBAlBa;AAmBbC,eAnBa;AAoBbC,sBApBa;AAqBbE,iBArBa;AAsBbC,cAtBa;AAuBbC,mBAvBa;AAwBbC,wBAxBa;AAyBbC,eAzBa;AA0BbC,qBA1Ba;AA2BbC,sBA3Ba;AA4BbC,uBA5Ba;AA6BbE,mBA7Ba;AA8BbE,0BA9Ba;AA+BbE,2BA/Ba;AAgCbC,qBAhCa;AAiCbC,yBAjCa;AAkCbM,eAlCa;AAmCbC,oBAnCa;AAoCbC,wBApCa;AAqCbC,0BArCa;AAsCbC,aAtCa;AAuCbC,0CAAwCA;AAvC3B,CAAf,E;;ACjZA;;AAEA,MAAMC,sBAAN,SAAkC1D,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,wBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAMqD,4BAAN,SAAwC3D,KAAxC,CAA8C;AAC5CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,2BAAZ;AACA,SAAKC,OAAL,GAAe,gCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP2C;;AAU9C,MAAMsD,2BAAN,SAAuC5D,KAAvC,CAA6C;AAC3CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKC,OAAL,GAAe,iCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP0C;;AAU7C,MAAMuD,sBAAN,SAAkC7D,KAAlC,CAAwC;AACtCC,aAAW,CAAC6D,SAAD,EAAY,GAAG5D,MAAf,EAAuB;AAChC,UAAM4D,SAAN,EAAiB,GAAG5D,MAApB;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,+CAAoD0D,SAApD;AACA,SAAKzD,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAMyD,yBAAN,SAAqC/D,KAArC,CAA2C;AACzCC,aAAW,CAAC+D,YAAD,EAAe,GAAG9D,MAAlB,EAA0B;AACnC,UAAM8D,YAAN,EAAoB,GAAG9D,MAAvB;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,4BAAiC4D,YAAjC;AACA,SAAK3D,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM2D,yBAAN,SAAqCjE,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM4D,uBAAN,SAAmClE,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,yBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAM6D,8BAAN,SAA0CnE,KAA1C,CAAgD;AAC9CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,6BAAZ;AACA,SAAKC,OAAL,GAAe,oCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6C;;AAUhD,MAAM8D,yBAAN,SAAqCpE,KAArC,CAA2C;AACzCC,aAAW,CAAC8C,OAAD,EAAU,GAAG7C,MAAb,EAAqB;AAC9B,UAAM6C,OAAN,EAAe,GAAG7C,MAAlB;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,4CAAiD4C,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,CAAf,CAAjD;AACA,SAAK1C,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM+D,yCAAN,SAAqDrE,KAArD,CAA2D;AACzDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wCAAZ;AACA,SAAKC,OAAL,GAAe,gIAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPwD;;AAU3D,MAAMgE,kBAAN,SAA8BtE,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,uBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMiE,mBAAN,SAA+BvE,KAA/B,CAAqC;AACnCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,GAAe,oEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPkC;;AAUrC,MAAMkE,qBAAN,SAAiCxE,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,mEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMmE,yBAAN,SAAqCzE,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,+BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAMoE,0BAAN,SAAsC1E,KAAtC,CAA4C;AAC1CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,GAAe,8BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAMqE,uBAAN,SAAmC3E,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,iGAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMsE,qCAAN,SAAiD5E,KAAjD,CAAuD;AACrDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oCAAZ;AACA,SAAKC,OAAL,GAAe,wKAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPoD;;AAUvD,MAAMuE,0BAAN,SAAsC7E,KAAtC,CAA4C;AAC1CC,aAAW,CAAC6E,MAAD,EAAS,GAAG5E,MAAZ,EAAoB;AAC7B,UAAM4E,MAAN,EAAc,GAAG5E,MAAjB;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,iDAAsD0E,MAAtD;AACA,SAAKzE,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAMyE,oBAAN,SAAgC/E,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,sBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAM0E,qBAAN,SAAiChF,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,oFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAM2E,uBAAN,SAAmCjF,KAAnC,CAAyC;AACvCC,aAAW,CAACiF,MAAD,EAAS,GAAGhF,MAAZ,EAAoB;AAC7B,UAAMgF,MAAN,EAAc,GAAGhF,MAAjB;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAM6E,qCAAN,SAAiDnF,KAAjD,CAAuD;AACrDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oCAAZ;AACA,SAAKC,OAAL,GAAe,wKAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPoD;;AAUvD,MAAM8E,wBAAN,SAAoCpF,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,oCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAM+E,0BAAN,SAAsCrF,KAAtC,CAA4C;AAC1CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,GAAe,qEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAMgF,kCAAN,SAA8CtF,KAA9C,CAAoD;AAClDC,aAAW,CAACiF,MAAD,EAAS,GAAGhF,MAAZ,EAAoB;AAC7B,UAAMgF,MAAN,EAAc,GAAGhF,MAAjB;AAEA,SAAKC,IAAL,GAAY,iCAAZ;AACA,SAAKC,OAAL,qDAA0D8E,MAA1D;AACA,SAAK7E,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiD;;AAUpD,MAAMiF,gCAAN,SAA4CvF,KAA5C,CAAkD;AAChDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,+BAAZ;AACA,SAAKC,OAAL,GAAe,4CAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+C;;AAUlD,MAAMkF,sBAAN,SAAkCxF,KAAlC,CAAwC;AACtCC,aAAW,CAACiF,MAAD,EAAS,GAAGhF,MAAZ,EAAoB;AAC7B,UAAMgF,MAAN,EAAc,GAAGhF,MAAjB;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,oCAAyC8E,MAAzC;AACA,SAAK7E,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAMmF,qCAAN,SAAiDzF,KAAjD,CAAuD;AACrDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oCAAZ;AACA,SAAKC,OAAL,GAAe,gJAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPoD;;AAUvD,MAAMoF,4BAAN,SAAwC1F,KAAxC,CAA8C;AAC5CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,2BAAZ;AACA,SAAKC,OAAL,GAAe,mFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP2C;;AAU9C,MAAMqF,oCAAN,SAAgD3F,KAAhD,CAAsD;AACpDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mCAAZ;AACA,SAAKC,OAAL,GAAe,yFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmD;;AAUtD,MAAMsF,sCAAN,SAAkD5F,KAAlD,CAAwD;AACtDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qCAAZ;AACA,SAAKC,OAAL,GAAe,iEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPqD;;AAUxD,MAAMuF,iCAAN,SAA6C7F,KAA7C,CAAmD;AACjDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,gCAAZ;AACA,SAAKC,OAAL,GAAe,sHAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPgD;;AAUnD,MAAMwF,gCAAN,SAA4C9F,KAA5C,CAAkD;AAChDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,+BAAZ;AACA,SAAKC,OAAL,GAAe,yHAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP+C;;AAUlD,MAAMyF,+BAAN,SAA2C/F,KAA3C,CAAiD;AAC/CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,8BAAZ;AACA,SAAKC,OAAL,GAAe,2CAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP8C;;AAUjD,MAAM0F,mCAAN,SAA+ChG,KAA/C,CAAqD;AACnDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kCAAZ;AACA,SAAKC,OAAL,GAAe,oFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPkD;;AAUrD,MAAM2F,sBAAN,SAAkCjG,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,iCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAM4F,cAAN,SAA0BlG,KAA1B,CAAgC;AAC9BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAe,eAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6B;;AAUhC,MAAM6F,cAAN,SAA0BnG,KAA1B,CAAgC;AAC9BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAe,oCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6B;;AAUhC,MAAM8F,eAAN,SAA2BpG,KAA3B,CAAiC;AAC/BC,aAAW,CAACoG,KAAD,EAAQ,GAAGnG,MAAX,EAAmB;AAC5B,UAAMmG,KAAN,EAAa,GAAGnG,MAAhB;AAEA,SAAKC,IAAL,GAAY,cAAZ;AACA,SAAKC,OAAL,oCAAyCiG,KAAzC;AACA,SAAKhG,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP8B;;AAUjC,MAAMgG,qBAAN,SAAiCtG,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMiG,gBAAN,SAA4BvG,KAA5B,CAAkC;AAChCC,aAAW,CAAC6D,SAAD,EAAY,GAAG5D,MAAf,EAAuB;AAChC,UAAM4D,SAAN,EAAiB,GAAG5D,MAApB;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,yCAA8C0D,SAA9C;AACA,SAAKzD,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAMkG,gBAAN,SAA4BxG,KAA5B,CAAkC;AAChCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAe,kBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAMmG,sBAAN,SAAkCzG,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAMoG,oBAAN,SAAgC1G,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,uCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAMqG,mBAAN,SAA+B3G,KAA/B,CAAqC;AACnCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,GAAe,2CAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPkC;;AAUrC,MAAMsG,qBAAN,SAAiC5G,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,uBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMuG,cAAN,SAA0B7G,KAA1B,CAAgC;AAC9BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAe,eAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6B;;AAUhC,MAAMwG,iBAAN,SAA6B9G,KAA7B,CAAmC;AACjCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,gBAAZ;AACA,SAAKC,OAAL,GAAe,sBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPgC;;AAUnC,MAAMyG,oBAAN,SAAgC/G,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,uBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAM0G,qBAAN,SAAiChH,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,uBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAM2G,eAAN,SAA2BjH,KAA3B,CAAiC;AAC/BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,cAAZ;AACA,SAAKC,OAAL,GAAe,iBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP8B;;AAUjC,MAAM4G,gBAAN,SAA4BlH,KAA5B,CAAkC;AAChCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,GAAe,kBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAM6G,qBAAN,SAAiCnH,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAM8G,sBAAN,SAAkCpH,KAAlC,CAAwC;AACtCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqC;;AAUxC,MAAM+G,gBAAN,SAA4BrH,KAA5B,CAAkC;AAChCC,aAAW,CAAC6D,SAAD,EAAY,GAAG5D,MAAf,EAAuB;AAChC,UAAM4D,SAAN,EAAiB,GAAG5D,MAApB;AAEA,SAAKC,IAAL,GAAY,eAAZ;AACA,SAAKC,OAAL,yCAA8C0D,SAA9C;AACA,SAAKzD,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+B;;AAUlC,MAAMgH,oBAAN,SAAgCtH,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAMiH,oBAAN,SAAgCvH,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,4BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAMkH,kBAAN,SAA8BxH,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMmH,yBAAN,SAAqCzH,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,wCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAMoH,uBAAN,SAAmC1H,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMqH,kCAAN,SAA8C3H,KAA9C,CAAoD;AAClDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iCAAZ;AACA,SAAKC,OAAL,GAAe,8CAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiD;;AAUpD,MAAMsH,sCAAN,SAAkD5H,KAAlD,CAAwD;AACtDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,qCAAZ;AACA,SAAKC,OAAL,GAAe,sDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPqD;;AAUxD,MAAMuH,iCAAN,SAA6C7H,KAA7C,CAAmD;AACjDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,gCAAZ;AACA,SAAKC,OAAL,GAAe,iDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPgD;;AAUnD,MAAMwH,oBAAN,SAAgC9H,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,qBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAMyH,wBAAN,SAAoC/H,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,uCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAM0H,uBAAN,SAAmChI,KAAnC,CAAyC;AACvCC,aAAW,CAACgI,OAAD,EAAU,GAAG/H,MAAb,EAAqB;AAC9B,UAAM+H,OAAN,EAAe,GAAG/H,MAAlB;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,sBAA2B6H,OAA3B;AACA,SAAK5H,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAM4H,qBAAN,SAAiClI,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,yDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAM6H,wBAAN,SAAoCnI,KAApC,CAA0C;AACxCC,aAAW,CAACmI,KAAD,EAAQ,GAAGlI,MAAX,EAAmB;AAC5B,UAAMkI,KAAN,EAAa,GAAGlI,MAAhB;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,mDAAwDgI,KAAxD;AACA,SAAK/H,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAM+H,kBAAN,SAA8BrI,KAA9B,CAAoC;AAClCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,iGAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPiC;;AAUpC,MAAMgI,uBAAN,SAAmCtI,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,0BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMiI,8BAAN,SAA0CvI,KAA1C,CAAgD;AAC9CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,6BAAZ;AACA,SAAKC,OAAL,GAAe,uHAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP6C;;AAUhD,MAAMkI,6BAAN,SAAyCxI,KAAzC,CAA+C;AAC7CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,4BAAZ;AACA,SAAKC,OAAL,GAAe,+BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP4C;;AAU/C,MAAMmI,mCAAN,SAA+CzI,KAA/C,CAAqD;AACnDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kCAAZ;AACA,SAAKC,OAAL,GAAe,uCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPkD;;AAUrD,MAAMoI,kCAAN,SAA8C1I,KAA9C,CAAoD;AAClDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iCAAZ;AACA,SAAKC,OAAL,GAAe,wCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiD;;AAUpD,MAAMqI,6BAAN,SAAyC3I,KAAzC,CAA+C;AAC7CC,aAAW,CAAC6D,SAAD,EAAY,GAAG5D,MAAf,EAAuB;AAChC,UAAM4D,SAAN,EAAiB,GAAG5D,MAApB;AAEA,SAAKC,IAAL,GAAY,4BAAZ;AACA,SAAKC,OAAL,GAAe,+BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP4C;;AAU/C,MAAMsI,0BAAN,SAAsC5I,KAAtC,CAA4C;AAC1CC,aAAW,CAAC6D,SAAD,EAAY,GAAG5D,MAAf,EAAuB;AAChC,UAAM4D,SAAN,EAAiB,GAAG5D,MAApB;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,GAAe,0DAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAMuI,gCAAN,SAA4C7I,KAA5C,CAAkD;AAChDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,+BAAZ;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP+C;;AAUlD,MAAMwI,0BAAN,SAAsC9I,KAAtC,CAA4C;AAC1CC,aAAW,CAACgI,OAAD,EAAU,GAAG/H,MAAb,EAAqB;AAC9B,UAAM+H,OAAN,EAAe,GAAG/H,MAAlB;AAEA,SAAKC,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,sBAA2B6H,OAA3B;AACA,SAAK5H,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPyC;;AAU5C,MAAMyI,6BAAN,SAAyC/I,KAAzC,CAA+C;AAC7CC,aAAW,CAACgI,OAAD,EAAU,GAAG/H,MAAb,EAAqB;AAC9B,UAAM+H,OAAN,EAAe,GAAG/H,MAAlB;AAEA,SAAKC,IAAL,GAAY,4BAAZ;AACA,SAAKC,OAAL;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP4C;;AAUhC;AACboD,qBADa;AAEbC,2BAFa;AAGbC,0BAHa;AAIbC,qBAJa;AAKbE,wBALa;AAMbQ,kBANa;AAObC,oBAPa;AAQbP,wBARa;AASbQ,wBATa;AAUbC,yBAVa;AAWbC,sBAXa;AAYbC,oCAZa;AAabC,yBAba;AAcbE,mBAda;AAebC,oBAfa;AAgBbC,sBAhBa;AAiBbE,oCAjBa;AAkBbC,uBAlBa;AAmBbC,yBAnBa;AAoBbE,+BApBa;AAqBbC,qBArBa;AAsBbC,oCAtBa;AAuBbH,iCAvBa;AAwBbI,2BAxBa;AAyBbC,mCAzBa;AA0BbC,qCA1Ba;AA2BbC,gCA3Ba;AA4BbC,+BA5Ba;AA6BbC,8BA7Ba;AA8BbC,kCA9Ba;AA+BbC,qBA/Ba;AAgCb/B,sBAhCa;AAiCbC,6BAjCa;AAkCbC,wBAlCa;AAmCbC,wCAnCa;AAoCbC,iBApCa;AAqCb4B,aArCa;AAsCbC,aAtCa;AAuCbC,cAvCa;AAwCbE,oBAxCa;AAyCbC,eAzCa;AA0CbC,eA1Ca;AA2CbC,qBA3Ca;AA4CbC,mBA5Ca;AA6CbC,kBA7Ca;AA8CbC,oBA9Ca;AA+CbC,aA/Ca;AAgDbC,gBAhDa;AAiDbC,mBAjDa;AAkDbC,oBAlDa;AAmDbC,cAnDa;AAoDbC,eApDa;AAqDbC,oBArDa;AAsDbC,qBAtDa;AAuDbC,eAvDa;AAwDbC,mBAxDa;AAyDbC,mBAzDa;AA0DbC,iBA1Da;AA2DbC,wBA3Da;AA4DbC,sBA5Da;AA6DbC,iCA7Da;AA8DbC,qCA9Da;AA+DbC,gCA/Da;AAgEbC,mBAhEa;AAiEbC,uBAjEa;AAkEbG,oBAlEa;AAmEbC,uBAnEa;AAoEbH,sBApEa;AAqEbK,iBArEa;AAsEbC,sBAtEa;AAuEbC,6BAvEa;AAwEbC,4BAxEa;AAyEbE,iCAzEa;AA0EbD,kCA1Ea;AA2EbE,4BA3Ea;AA4EbC,yBA5Ea;AA6EbC,+BA7Ea;AA8EbC,yBA9Ea;AA+EbC,4BAA0BA;AA/Eb,CAAf,E;;ACxxBA;;AAEA,MAAMC,sBAAN,SAA8BhJ,KAA9B,CAAoC;AAClCC,aAAW,CAACgJ,KAAD,EAAQ,GAAG/I,MAAX,EAAmB;AAC5B,UAAM+I,KAAN,EAAa,GAAG/I,MAAhB;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAe,6BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACA,SAAK2I,KAAL,GAAaA,KAAb;AACD;;AARiC;;AAWpC,MAAMC,wBAAN,SAAgClJ,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,kCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAUtC,MAAM6I,mBAAN,SAA2BnJ,KAA3B,CAAiC;AAC/BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,cAAZ;AACA,SAAKC,OAAL,GAAe,yBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP8B;;AASjC,MAAM8I,yBAAN,SAAiCpJ,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,iCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAM+I,2BAAN,SAAmCrJ,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,6EAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAMgJ,sCAAN,SAA8CtJ,KAA9C,CAAoD;AAClDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iCAAZ;AACA,SAAKC,OAAL,GAAe,yCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPiD;;AASrC;AACb0I,iBADa;AAEbE,mBAFa;AAGbC,cAHa;AAIbC,oBAJa;AAKbC,sBALa;AAMbC,iCAA+BA;AANlB,CAAf,E;;AC7DA;;AAEA,MAAMC,0BAAN,SAAgCvJ,KAAhC,CAAsC;AACpCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAe,uFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAStC,MAAMkJ,+BAAN,SAAqCxJ,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,+BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAS3C,MAAMmJ,0BAAN,SAAgCzJ,KAAhC,CAAsC;AACpCC,aAAW,CAACyJ,eAAD,EAAkB,GAAGxJ,MAArB,EAA6B;AACtC,UAAMwJ,eAAN,EAAuB,GAAGxJ,MAA1B;AAEA,SAAKC,IAAL,GAAY,mBAAZ;AACA,SAAKC,OAAL,GAAesJ,eAAe,GAAG,4CAAH,GAAkD,sBAAhF;AACA,SAAKrJ,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPmC;;AAStC,MAAMqJ,yBAAN,SAA+B3J,KAA/B,CAAqC;AACnCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,GAAe,oFAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPkC;;AAUrC,MAAMsJ,8BAAN,SAAoC5J,KAApC,CAA0C;AACxCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,uBAAZ;AACA,SAAKC,OAAL,GAAe,8BAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPuC;;AAU1C,MAAMuJ,yBAAN,SAA+B7J,KAA/B,CAAqC;AACnCC,aAAW,CAACyJ,eAAD,EAAkB,GAAGxJ,MAArB,EAA6B;AACtC,UAAMwJ,eAAN,EAAuB,GAAGxJ,MAA1B;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,GAAesJ,eAAe,GAAG,2CAAH,GAAiD,qBAA/E;AACA,SAAKrJ,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPkC;;AASrC,MAAMwJ,+BAAN,SAAqC9J,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,uHAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAMyJ,yBAAN,SAA+B/J,KAA/B,CAAqC;AACnCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,OAAL,GAAe,wEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAPkC;;AAUrC,MAAM0J,+BAAN,SAAqChK,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,wCAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM2J,+BAAN,SAAqCjK,KAArC,CAA2C;AACzCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,wBAAZ;AACA,SAAKC,OAAL,GAAe,kHAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPwC;;AAU3C,MAAM4J,yCAAN,SAA+ClK,KAA/C,CAAqD;AACnDC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,kCAAZ;AACA,SAAKC,OAAL,GAAe,+EAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,UAAD,CAAzB;AACD;;AAPkD;;AASrD,MAAM6J,kCAAN,SAAwCnK,KAAxC,CAA8C;AAC5CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,2BAAZ;AACA,SAAKC,OAAL,GAAe,4EAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,WAAD,CAAzB;AACD;;AAP2C;;AAU9C,MAAM8J,6BAAN,SAAmCpK,KAAnC,CAAyC;AACvCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,4DAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,kBAAD,CAAzB;AACD;;AAPsC;;AAUzC,MAAM+J,6BAAN,SAAmCrK,KAAnC,CAAyC;AACvCC,aAAW,CAACqK,kBAAD,EAAqB,GAAGpK,MAAxB,EAAgC;AACzC,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKkK,kBAAL,GAA0BA,kBAA1B;AACA,SAAKjK,MAAL,GAAcC,WAAW,CAAC,kBAAD,CAAzB;AACD;;AARsC;;AAWzC,MAAMiK,iCAAN,SAAuCvK,KAAvC,CAA6C;AAC3CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKC,OAAL,GAAe,gEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,kBAAD,CAAzB;AACD;;AAP0C;;AAU7C,MAAMkK,oCAAN,SAA0CxK,KAA1C,CAAgD;AAC9CC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,6BAAZ;AACA,SAAKC,OAAL,GAAe,uEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6C;;AAUhD,MAAMmK,qBAAN,SAA2BzK,KAA3B,CAAiC;AAC/BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,cAAZ;AACA,SAAKC,OAAL,GAAe,mDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,kBAAD,CAAzB;AACD;;AAP8B;;AAUjC,MAAMoK,WAAN,SAA0B1K,KAA1B,CAAgC;AAC9BC,aAAW,CAAC0K,KAAD,EAAQ,GAAGzK,MAAX,EAAmB;AAC5B,UAAMyK,KAAN,EAAa,GAAGzK,MAAhB;AAEA,UAAM;AAAEG,YAAF;AAAUuK,UAAV;AAAgBxK;AAAhB,QAA4BuK,KAAlC;AAEA,SAAKxK,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKwK,IAAL,GAAYA,IAAZ;AACA,SAAKvK,MAAL,GAAcA,MAAd;AACD;;AAV6B;;AAajB;AACbkJ,mBADa;AAEbC,wBAFa;AAGbC,mBAHa;AAIbE,kBAJa;AAKbC,uBALa;AAMbC,kBANa;AAObC,wBAPa;AAQbC,kBARa;AASbC,wBATa;AAUbC,wBAVa;AAWbC,kCAXa;AAYbC,2BAZa;AAabC,sBAba;AAcbC,sBAda;AAebE,0BAfa;AAgBbC,6BAhBa;AAiBbC,cAjBa;AAkBbC;AAlBa,CAAf,E;;;;;;;;ACrLA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,kBAAN,SAA0B7K,KAA1B,CAAgC;AAC9BC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,aAAZ;AACA,SAAKC,OAAL,GAAe,oDAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAP6B;;AAUhC,MAAMwK,yBAAN,SAAiC9K,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,sBAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,qBAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMyK,0BAAN,SAAkCD,yBAAlC,CAAqD;AACnD7K,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKG,MAAL,GAAcC,WAAW,CAAC,uBAAD,CAAzB;AACD;;AALkD;;AAQrD,MAAM0K,cAAN,SAAsBF,yBAAtB,CAAyC;AACvC7K,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKG,MAAL,GAAcC,WAAW,CAAC,iBAAD,CAAzB;AACD;;AALsC;;AAQzC,MAAM2K,YAAN,SAA2BH,yBAA3B,CAA8C;AAC5C7K,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKE,OAAL,GAAe,eAAf;AACD;;AAL2C;;AAQ9C,MAAM8K,yBAAN,SAAwCJ,yBAAxC,CAA2D;AACzD7K,aAAW,CAACkL,CAAD,EAAI,GAAGjL,MAAP,EAAe;AACxB,UAAMiL,CAAN,EAAS,GAAGjL,MAAZ;AAEAkL,WAAO,CAACT,KAAR,CAAc,iEAAd,EAAiFQ,CAAjF;AACD;;AALwD;;AAQ3D,MAAME,yBAAN,SAAiCrL,KAAjC,CAAuC;AACrCC,aAAW,CAAC,GAAGC,MAAJ,EAAY;AACrB,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AACA,SAAKC,OAAL,GAAe,gEAAf;AACA,SAAKC,MAAL,GAAcC,WAAW,CAAC,aAAD,CAAzB;AACD;;AAPoC;;AAUvC,MAAMgL,sBAAN,SAA8BtL,KAA9B,CAAoC;AAClCC,aAAW,CAACsL,UAAD,EAAa,GAAGrL,MAAhB,EAAwB;AACjC,UAAMqL,UAAN,EAAkB,GAAGrL,MAArB;AAEA,UAAMsL,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,IAAxB,CAA1B;AAEA,SAAKpL,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,6DAAkEoL,iBAAlE,oBAA6FA,iBAAiB,KAAK,CAAtB,GAA0B,GAA1B,GAAgC,EAA7H;AACA,SAAKnL,MAAL,GAAcC,WAAW,CAAC,mBAAD,CAAzB;AACD;;AATiC;;AAYrB,qHACVqL,IADL,GAEKC,SAFL,GAGKC,MAHL,GAIKC,QAJL;AAKEjB,aALF;AAMEE,qBANF;AAOED,oBAPF;AAQEE,SARF;AASEC,cATF;AAUEC,2BAVF;AAWEG,oBAXF;AAYEC,iBAAeA;AAZjB,I;;AChFA;AAEA,MAAMS,mBAAmB,GAAG,OAA5B;AAEA,MAAMC,OAAO,GAAG,KAAhB;AACA,MAAMC,gBAAgB,GAAG,4BAA4BD,OAArD;AAEA,MAAME,iCAAiC,GAAG,kCAA1C;AACA,MAAMC,2BAA2B,GAAG,kCAApC;AAEA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,yBAAyB,GAAG,IAAhC;AACA,IAAIC,qCAAqC,GAAG,KAA5C;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAI,CAACH,aAAL,EAAoB,MAAM,IAAII,MAAM,CAAC3B,WAAX,EAAN;AACpB,SAAOuB,aAAP;AACD,CAHD;;AAKA,MAAMK,oBAAoB,GAAG,MAAMJ,yBAAnC;;AAEA,MAAMK,WAAW,GAAG,MAAM;AACxB,SAAOC,MAAM,CAACC,iBAAP,IAA4BX,gBAAnC;AACD,CAFD;;AAIA,MAAMY,SAAS,GAAG,CAAC;AAAE5D,OAAF;AAAS6D,mBAAT;AAA4BC;AAA5B,CAAD,KAA6D;AAC7E,MAAIX,aAAa,IAAIA,aAAa,KAAKnD,KAAvC,EAA8C,MAAM,IAAIuD,MAAM,CAACxD,eAAX,CAA2BoD,aAA3B,CAAN;AAC9CA,eAAa,GAAGnD,KAAhB;AACAoD,2BAAyB,GAAGS,iBAA5B;AACAR,uCAAqC,GAAGS,yBAAxC;AACD,CALD;;AAOA,MAAMC,uBAAuB,GAAIC,YAAD,IAAkB;AAChD,SAAOA,YAAY,GACdN,MAAM,CAACO,2CAAP,IAAsDhB,iCADxC,GAEdS,MAAM,CAACQ,qCAAP,IAAgDhB,2BAFrD;AAGD,CAJD;;AAMA,MAAMiB,iCAAiC,GAAG,MAAMd,qCAAhD;;AAEe;AACbP,qBADa;AAEbQ,UAFa;AAGbE,sBAHa;AAIbC,aAJa;AAKbG,WALa;AAMbG,yBANa;AAObI;AAPa,CAAf,E;;ACxCA;AAEA,MAAMC,cAAc,GAAG,KAAK,IAA5B;;AAEA,MAAMC,YAAN,SAA2BtN,KAA3B,CAAiC;AAC/BC,aAAW,CAACsN,IAAD,EAAOlN,MAAP,EAAemN,UAAf,EAA2B,GAAGtN,MAA9B,EAAsC;AAC/C,UAAMqN,IAAN,EAAYlN,MAAZ,EAAoBmN,UAApB,EAAgC,GAAGtN,MAAnC;AAEA,SAAKuN,QAAL,GAAgB;AACdF,UADc;AAEdlN,YAFc;AAGdmN;AAHc,KAAhB;AAMA,SAAKpN,OAAL,GAAe,qCAAqCC,MAApD;AACD;;AAX8B;;AAcjC,MAAMqN,YAAN,SAA2B1N,KAA3B,CAAiC;AAC/BC,aAAW,CAAC0N,OAAD,EAAU,GAAGzN,MAAb,EAAqB;AAC9B,UAAMyN,OAAN,EAAe,GAAGzN,MAAlB;AAEA,SAAKE,OAAL,wBAA6BuN,OAA7B;AACD;;AAL8B;;AAQjC,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,MAAf,KAA0B;AAC/C,MAAIN,QAAJ;;AACA,MAAI;AACFA,YAAQ,GAAGzK,IAAI,CAACgL,KAAL,CAAWH,GAAG,CAACJ,QAAf,CAAX;AACD,GAFD,CAEE,gBAAM;AACNA,YAAQ,GAAGI,GAAG,CAACJ,QAAf;AACD;;AAED,MAAII,GAAG,CAACxN,MAAJ,IAAc,GAAd,IAAqBwN,GAAG,CAACxN,MAAJ,GAAa,GAAtC,EAA2C;AACzCyN,WAAO,CAACL,QAAD,CAAP;AACD,GAFD,MAEO;AACLM,UAAM,CAAC,IAAIT,YAAJ,CAAiBG,QAAjB,EAA2BI,GAAG,CAACxN,MAA/B,EAAuCwN,GAAG,CAACL,UAA3C,CAAD,CAAN;AACD;AACF,CAbD;;AAeO,MAAMS,UAAU,GAAG,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,EAAuBJ,OAAO,GAAGN,cAAjC,KAAoD;AAC5EQ,KAAG,CAACF,OAAJ,GAAcA,OAAd;;AACAE,KAAG,CAACK,MAAJ,GAAa,MAAMN,cAAc,CAACC,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAjC;;AACAF,KAAG,CAACM,OAAJ,GAAc,MAAMJ,MAAM,CAAC,IAAIvB,MAAM,CAAC1B,kBAAX,EAAD,CAA1B;;AACA+C,KAAG,CAACO,SAAJ,GAAgB,MAAML,MAAM,CAAC,IAAIL,YAAJ,CAAiBC,OAAjB,CAAD,CAA5B;AACD,CALM,C;;ACzCP;AACA;;AAEA,MAAMU,MAAM,GAAG,CAAC3M,QAAD,EAAW4M,aAAX,EAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,QAApD,EAA8DC,KAA9D,EAAqEC,OAArE,EAA8EC,mBAA9E,EAAmGC,aAAnG,KAAqH;AAClI,SAAO,IAAIC,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,MAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,qCAAqDb,UAAM,CAACU,QAAP,EAArD,gCAA4FV,UAAM,CAACE,mBAAnG,CAAT;AACA,UAAMwB,IAAI,GAAGvK,IAAI,CAACC,SAAL,CAAe;AAC1BvB,cAD0B;AAE1B4M,mBAF0B;AAG1BC,eAH0B;AAI1BC,mBAJ0B;AAK1BC,cAL0B;AAM1BC,WAN0B;AAO1BC,aAP0B;AAQ1BC,yBAR0B;AAS1BC;AAT0B,KAAf,CAAb;AAYAhB,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACsB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAtB,OAAG,CAACuB,IAAJ,CAAS7B,IAAT;AAEAU,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAtBM,CAAP;AAuBD,CAxBD;;AA0BA,MAAMsB,gBAAgB,GAAI3N,QAAD,IAAc;AACrC,SAAO,IAAIoN,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,gDAAgEb,UAAM,CAACU,QAAP,EAAhE,uBAA8F+C,kBAAkB,CAAC5N,QAAD,CAAhH,gCAAgJmK,UAAM,CAACE,mBAAvJ,CAAT;AAEA8B,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACuB,IAAJ;AAEAnB,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAVM,CAAP;AAWD,CAZD;;AAcA,MAAMwB,MAAM,GAAG,OAAO7N,QAAP,EAAiB4M,aAAjB,EAAgCO,aAAhC,KAAkD;AAC/D,SAAO,IAAIC,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,MAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,qCAAqDb,UAAM,CAACU,QAAP,EAArD,gCAA4FV,UAAM,CAACE,mBAAnG,CAAT;AACA,UAAMwB,IAAI,GAAGvK,IAAI,CAACC,SAAL,CAAe;AAC1BvB,cAD0B;AAE1B4M,mBAF0B;AAG1BO;AAH0B,KAAf,CAAb;AAMAhB,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACsB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAtB,OAAG,CAACuB,IAAJ,CAAS7B,IAAT;AAEAU,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAhBM,CAAP;AAiBD,CAlBD;;AAoBA,MAAMyB,iBAAiB,GAAG,CAACC,SAAD,EAAYZ,aAAZ,KAA8B;AACtD,SAAO,IAAIC,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,MAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,kDAAkEb,UAAM,CAACU,QAAP,EAAlE,wBAAiGkD,SAAjG,gCAAgI5D,UAAM,CAACE,mBAAvI,CAAT;AACA,UAAMwB,IAAI,GAAGvK,IAAI,CAACC,SAAL,CAAe;AAC1B4L;AAD0B,KAAf,CAAb;AAIAhB,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACsB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAtB,OAAG,CAACuB,IAAJ,CAAS7B,IAAT;AAEAU,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAdM,CAAP;AAeD,CAhBD;;AAkBA,MAAM2B,kBAAkB,GAAG,YAAY;AACrC,SAAO,IAAIZ,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,4DAA4Eb,UAAM,CAACE,mBAAnF,CAAT;AACA,UAAM4D,YAAY,GAAG,aAArB;AAEA9B,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAAC8B,YAAJ,GAAmBA,YAAnB;AACA9B,OAAG,CAACuB,IAAJ;AAEAnB,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAZM,CAAP;AAaD,CAdD;;AAgBA,MAAM6B,YAAY,GAAIlO,QAAD,IAAc;AACjC,SAAO,IAAIoN,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,mCAAmDb,UAAM,CAACU,QAAP,EAAnD,uBAAiF+C,kBAAkB,CAAC5N,QAAD,CAAnG,gCAAmImK,UAAM,CAACE,mBAA1I,CAAT;AAEA8B,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACuB,IAAJ;AAEAnB,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAVM,CAAP;AAWD,CAZD;;AAcA,MAAM8B,iBAAiB,GAAG,OAAOC,KAAP,EAAcC,KAAd,KAAwB;AAChD,SAAO,IAAIjB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,MAAf;AACA,UAAMC,GAAG,aAAMpD,UAAM,CAACa,WAAP,EAAN,iDAAiEb,UAAM,CAACE,mBAAxE,CAAT;AAEA8B,OAAG,CAACsB,gBAAJ,CAAqB,eAArB,EAAsC,YAAYY,KAAlD;AAEAlC,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACuB,IAAJ,CAASU,KAAT;AAEA7B,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,CAAV;AACD,GAZM,CAAP;AAaD,CAdD;;AAgBe;AACbM,QADa;AAEbgB,kBAFa;AAGbE,QAHa;AAIbC,mBAJa;AAKbE,oBALa;AAMbE,cANa;AAObC;AAPa,CAAf,E;;;;;;;;;;;;AC/HA,MAAMG,eAAe,GAAIC,IAAD,IAAU,CAAC,GAAGC,IAAJ,KAAa;AAC7C,MAAI;AACF,WAAOD,IAAI,CAAC,GAAGC,IAAJ,CAAX;AACD,GAFD,CAEE,OAAO/E,CAAP,EAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACAC,WAAO,CAAC+E,IAAR,CAAa,4DAAb,EAA2EhF,CAA3E;AACD;AACF,CAZD;;AAcA,MAAMiF,YAAY,GAAG,CAACnH,KAAD,EAAQvH,QAAR,4BAAqCuH,KAArC,cAA8CvH,QAA9C,CAArB;;AAEA,MAAM2O,iBAAiB,GAAGL,eAAe,CAAC,CAACM,UAAD,EAAa5O,QAAb,EAAuB6O,QAAvB,EAAiCd,SAAjC,EAA4Ce,YAA5C,EAA0DC,cAA1D,KAA6E;AACrH,QAAMC,OAAO,GAAG;AAAEhP,YAAF;AAAY6O,YAAZ;AAAsBd,aAAtB;AAAiCe,gBAAjC;AAA+CC;AAA/C,GAAhB;AACA,QAAME,aAAa,GAAG3N,IAAI,CAACC,SAAL,CAAeyN,OAAf,CAAtB;;AAEA,MAAIJ,UAAU,KAAK,OAAnB,EAA4B;AAC1BM,gBAAY,CAACC,OAAb,CAAqB,wBAArB,EAA+CF,aAA/C;AACD,GAFD,MAEO,IAAIL,UAAU,KAAK,SAAnB,EAA8B;AACnCQ,kBAAc,CAACD,OAAf,CAAuB,wBAAvB,EAAiDF,aAAjD;AACD;AACF,CATwC,CAAzC;AAWA,MAAMI,iBAAiB,GAAGf,eAAe,CAAC,MAAM;AAC9C,QAAMgB,kCAAkC,GAAGF,cAAc,CAACG,OAAf,CAAuB,wBAAvB,CAA3C;;AAEA,MAAID,kCAAJ,EAAwC;AACtC,UAAME,cAAc,GAAGlO,IAAI,CAACgL,KAAL,CAAWgD,kCAAX,CAAvB;;AAEA,QAAI,CAACE,cAAc,CAACX,QAApB,EAA8B;AAC5B,YAAMY,yBAAyB,GAAGP,YAAY,CAACK,OAAb,CAAqB,wBAArB,CAAlC;;AAEA,UAAIE,yBAAJ,EAA+B;AAC7B,cAAMC,mBAAmB,GAAGpO,IAAI,CAACgL,KAAL,CAAWmD,yBAAX,CAA5B,CAD6B,CAG7B;AACA;;AACA,YAAIC,mBAAmB,CAACb,QAAxB,EAAkC;AAChC,mEACKa,mBADL;AAEEd,sBAAU,EAAE;AAFd;AAID;AACF;AACF;;AAED,6DACKtN,IAAI,CAACgL,KAAL,CAAWgD,kCAAX,CADL;AAEEV,gBAAU,EAAE;AAFd;AAID;;AAED,QAAMe,kBAAkB,GAAGT,YAAY,CAACK,OAAb,CAAqB,wBAArB,CAA3B;AACA,SAAOI,kBAAkB,IAAI,kDACxBrO,IAAI,CAACgL,KAAL,CAAWqD,kBAAX,CADoB;AAEvBf,cAAU,EAAE;AAFW,IAAzB;AAID,CAlCwC,CAAzC;AAoCA,MAAMgB,cAAc,GAAGtB,eAAe,CAAC,CAACM,UAAD,EAAarH,KAAb,EAAoBvH,QAApB,EAA8B6P,UAA9B,KAA6C;AAClF,MAAIjB,UAAU,KAAK,OAAnB,EAA4B;AAC1BM,gBAAY,CAACC,OAAb,CAAqBT,YAAY,CAACnH,KAAD,EAAQvH,QAAR,CAAjC,EAAoD6P,UAApD;AACD,GAFD,MAEO,IAAIjB,UAAU,KAAK,SAAnB,EAA8B;AACnCQ,kBAAc,CAACD,OAAf,CAAuBT,YAAY,CAACnH,KAAD,EAAQvH,QAAR,CAAnC,EAAsD6P,UAAtD;AACD;AACF,CANqC,CAAtC;AAQA,MAAMC,gBAAgB,GAAGxB,eAAe,CAAC,CAAC/G,KAAD,EAAQvH,QAAR,KAAqB;AAC5D,QAAM+P,QAAQ,GAAGrB,YAAY,CAACnH,KAAD,EAAQvH,QAAR,CAA7B;;AACAoP,gBAAc,CAACY,UAAf,CAA0BD,QAA1B;AACAb,cAAY,CAACc,UAAb,CAAwBD,QAAxB;AACD,CAJuC,CAAxC;AAMA,MAAME,aAAa,GAAG3B,eAAe,CAAC,CAAC/G,KAAD,EAAQvH,QAAR,KAAqB;AACzD,QAAM+P,QAAQ,GAAGrB,YAAY,CAACnH,KAAD,EAAQvH,QAAR,CAA7B;;AACA,SAAOoP,cAAc,CAACG,OAAf,CAAuBQ,QAAvB,KAAoCb,YAAY,CAACK,OAAb,CAAqBQ,QAArB,CAA3C;AACD,CAHoC,CAArC;;AAKA,MAAMG,aAAa,GAAG,CAACtB,UAAD,EAAa5O,QAAb,EAAuB+N,SAAvB,EAAkCe,YAAlC,EAAgDC,cAAhD,KAAmE;AACvF,QAAMF,QAAQ,GAAG,IAAjB;AACAF,mBAAiB,CAACC,UAAD,EAAa5O,QAAb,EAAuB6O,QAAvB,EAAiCd,SAAjC,EAA4Ce,YAA5C,EAA0DC,cAA1D,CAAjB;AACD,CAHD;;AAKA,MAAMoB,cAAc,GAAG,CAACvB,UAAD,EAAa5O,QAAb,KAA0B;AAC/C,QAAM6O,QAAQ,GAAG,KAAjB;AACAF,mBAAiB,CAACC,UAAD,EAAa5O,QAAb,EAAuB6O,QAAvB,CAAjB;AACD,CAHD;;AAKA,MAAMuB,oBAAoB,GAAG9B,eAAe,CAAC,MAAM;AACjDc,gBAAc,CAACY,UAAf,CAA0B,wBAA1B;AACAd,cAAY,CAACc,UAAb,CAAwB,wBAAxB;AACD,CAH2C,CAA5C;AAKe;AACbE,eADa;AAEbC,gBAFa;AAGbd,mBAHa;AAIbO,gBAJa;AAKbE,kBALa;AAMbG,eANa;AAObG;AAPa,CAAf,E;;ACjGA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,MAAM,GAAG,KAAKD,MAApB,C,CAEA;;AACO,MAAME,mBAAmB,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACpD,QAAMC,OAAO,GAAGD,QAAQ,GAAG,IAAIE,UAAJ,CAAeH,GAAf,CAAH,GAAyB,IAAII,WAAJ,CAAgBJ,GAAhB,CAAjD;AACA,QAAMpN,MAAM,GAAGsN,OAAO,CAACtN,MAAvB;AACA,MAAIyN,MAAM,GAAG,EAAb;AACA,MAAIC,SAAS,GAAGR,MAAhB,CAJoD,CAI7B;;AAEvB,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3N,MAApB,EAA4B2N,CAAC,IAAID,SAAjC,EAA4C;AAC1C,QAAIC,CAAC,GAAGD,SAAJ,GAAgB1N,MAApB,EAA4B;AAC1B0N,eAAS,GAAG1N,MAAM,GAAG2N,CAArB;AACD;;AACD,UAAM3C,KAAK,GAAGsC,OAAO,CAACM,QAAR,CAAiBD,CAAjB,EAAoBA,CAAC,GAAGD,SAAxB,CAAd;AACAD,UAAM,IAAII,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC/C,KAAhC,CAAV;AACD;;AAED,SAAOyC,MAAP;AACD,CAfM,C,CAiBP;;AACO,MAAMO,mBAAmB,GAAG,CAACC,GAAD,EAAMZ,QAAQ,GAAG,KAAjB,KAA2B;AAC5D,MAAID,GAAG,GAAG,IAAIc,WAAJ,CAAgBD,GAAG,CAACjO,MAAJ,IAAcqN,QAAQ,GAAG,CAAH,GAAO,CAA7B,CAAhB,CAAV,CAD4D,CACD;;AAC3D,MAAIC,OAAO,GAAGD,QAAQ,GAAG,IAAIE,UAAJ,CAAeH,GAAf,CAAH,GAAyB,IAAII,WAAJ,CAAgBJ,GAAhB,CAA/C;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAR,EAAWQ,MAAM,GAAGF,GAAG,CAACjO,MAA7B,EAAqC2N,CAAC,GAAGQ,MAAzC,EAAiDR,CAAC,EAAlD,EAAsD;AACpDL,WAAO,CAACK,CAAD,CAAP,GAAaM,GAAG,CAACG,UAAJ,CAAeT,CAAf,CAAb;AACD;;AACD,SAAOP,GAAP;AACD,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMiB,YAAY,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAChD,QAAMC,GAAG,GAAG,IAAIjB,UAAJ,CAAee,OAAO,CAACG,UAAR,GAAqBF,OAAO,CAACE,UAA5C,CAAZ;AACAD,KAAG,CAACE,GAAJ,CAAQ,IAAInB,UAAJ,CAAee,OAAf,CAAR,EAAiC,CAAjC;AACAE,KAAG,CAACE,GAAJ,CAAQ,IAAInB,UAAJ,CAAegB,OAAf,CAAR,EAAiCD,OAAO,CAACG,UAAzC;AACA,SAAOD,GAAG,CAACG,MAAX;AACD,CALM;AAOA,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxC,QAAMC,iBAAiB,GAAGD,OAAO,CAACE,GAAR,CAAYJ,MAAM,IAAIA,MAAM,CAACF,UAA7B,CAA1B;AACA,QAAMO,eAAe,GAAGF,iBAAiB,CAACG,MAAlB,CAAyB,CAACC,aAAD,EAAgBC,gBAAhB,KAAqCD,aAAa,GAAGC,gBAA9E,CAAxB;AAEA,QAAMX,GAAG,GAAG,IAAIjB,UAAJ,CAAeyB,eAAf,CAAZ;AACA,MAAII,iBAAiB,GAAG,CAAxB;;AACA,OAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,OAAO,CAAC7O,MAA5B,EAAoC2N,CAAC,EAArC,EAAyC;AACvCa,OAAG,CAACE,GAAJ,CAAQ,IAAInB,UAAJ,CAAesB,OAAO,CAAClB,CAAD,CAAtB,CAAR,EAAoCyB,iBAApC;AACAA,qBAAiB,IAAIN,iBAAiB,CAACnB,CAAD,CAAtC;AACD;;AAED,SAAO;AACLgB,UAAM,EAAEH,GAAG,CAACG,MADP;AAELU,eAAW,EAAEP;AAFR,GAAP;AAID,CAfM;AAiBA,MAAMQ,sBAAsB,GAAIC,SAAD,IAAe;AACnD,MAAIA,SAAS,CAACvP,MAAV,GAAmB,CAAnB,KAAyB,CAA7B,EAAgC,MAAM,IAAI9E,KAAJ,CAAU,gCAAV,CAAN;AAChC,QAAMsU,gBAAgB,GAAGD,SAAS,CAACvP,MAAV,GAAmB,CAA5C;AACA,QAAMyP,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,gBAApB,EAAsC7B,CAAC,EAAvC,EAA2C;AACzC,UAAM+B,cAAc,GAAG/B,CAAC,GAAG,CAA3B;AACA,UAAMgC,IAAI,GAAGJ,SAAS,CAACK,SAAV,CAAoBF,cAApB,EAAoCA,cAAc,GAAG,CAArD,CAAb;AACA,UAAMG,SAAS,GAAGC,QAAQ,CAACH,IAAD,EAAO,EAAP,CAA1B;AACAF,SAAK,CAACM,IAAN,CAAWF,SAAX;AACD;;AACD,SAAO,IAAItC,UAAJ,CAAekC,KAAf,CAAP;AACD,CAXM,C;;ACjEP;AACA;AAEA,MAAMO,SAAS,GAAG,EAAlB,C,CAAqB;;AACrB,MAAMC,mBAAmB,GAAG,SAA5B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAG,MAAOzH,IAAP,IAAgB;AAC3B,QAAMgF,MAAM,GAAG,MAAM5F,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBC,MAArB,CACnB;AACEhV,QAAI,EAAE4U;AADR,GADmB,EAInBxH,IAJmB,CAArB;AAMA,SAAOgF,MAAP;AACD,CARD;;AAUA,MAAM6C,gBAAgB,GAAG,MAAOC,UAAP,IAAsB;AAC7C,QAAM9H,IAAI,GAAG+H,qCAAM,CAACC,MAAP,CAAcF,UAAd,CAAb;AACA,QAAM9C,MAAM,GAAG,MAAMyC,IAAI,CAACzH,IAAD,CAAzB;AACA,SAAO+H,qCAAM,CAACE,MAAP,CAAcjD,MAAd,CAAP;AACD,CAJD;;AAMA,MAAMkD,UAAU,GAAG,MAAOJ,UAAP,IAAsB;AACvC,QAAM9H,IAAI,GAAGuF,mBAAmB,CAACuC,UAAD,CAAhC;AACA,QAAM9C,MAAM,GAAG,MAAMyC,IAAI,CAACzH,IAAD,CAAzB;AACA,SAAO+H,qCAAM,CAACE,MAAP,CAAcjD,MAAd,CAAP;AACD,CAJD;;AAMe;AACbuC,WADa;AAEbC,qBAFa;AAGbC,MAHa;AAIbI,kBAJa;AAKbK;AALa,CAAf,E;;AChCA;AACA;AACA;AAEA,MAAMC,mBAAmB,GAAG,MAA5B;AACA,MAAMC,YAAY,GAAG,KAArB;AACA,MAAMC,sBAAsB,GAAG,KAA/B;AACA,MAAMC,mBAAmB,GAAG,CAAC,WAAD,EAAc,YAAd,CAA5B;;AAEA,MAAMC,uBAAuB,GAAG,MAAOvE,UAAP,IAAsB;AACpD,QAAMwE,IAAI,GAAGjD,mBAAmB,CAACvB,UAAD,CAAhC;AACA,QAAMyE,OAAO,GAAG,MAAMC,aAAa,CAACF,IAAD,CAAnC;AACA,SAAOC,OAAP;AACD,CAJD;;AAMA,MAAMC,aAAa,GAAG,MAAOF,IAAP,IAAgB;AACpC,QAAMC,OAAO,GAAG,MAAMrJ,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACpBP,YADoB,EAEpBI,IAFoB,EAGpB;AACE5V,QAAI,EAAEuV;AADR,GAHoB,EAMpBE,sBANoB,EAOpBC,mBAPoB,CAAtB;AASA,SAAOG,OAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,cAAc,GAAGC,OAAM,CAACtB,SAA9B;;AACA,MAAMuB,YAAY,GAAG,MAAM1J,MAAM,CAACsI,MAAP,CAAcqB,eAAd,CAA8B,IAAIjE,UAAJ,CAAe8D,cAAf,CAA9B,CAA3B;;AAEA,MAAMI,SAAS,GAAG,CAACC,OAAD,EAAUC,IAAV,MAAoB;AACpCtW,MAAI,EAAEuV,mBAD8B;AAEpCgB,MAAI,EAAE5D,mBAAmB,CAAC0D,OAAD,CAFW;AAGpCxB,MAAI,EAAEoB,OAAM,CAACrB,mBAHuB;AAIpC0B;AAJoC,CAApB,CAAlB;;AAOA,MAAME,mBAAmB,GAAG,gBAA5B;AACA,MAAMC,uBAAuB,GAAG,GAAhC;;AAEA,MAAMC,gBAAgB,GAAG,OAAOb,OAAP,EAAgBS,IAAhB,KAAyB;AAChD,QAAMK,iBAAiB,GAAG,MAAMnK,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB6B,UAArB,CAC9BR,SAAS,CAACI,mBAAD,EAAsBF,IAAtB,CADqB,EAE9BT,OAF8B,EAG9BY,uBAH8B,CAAhC;AAMA,SAAOtB,qCAAM,CAACE,MAAP,CAAcsB,iBAAd,CAAP;AACD,CARD;;AAUe;AACbhB,yBADa;AAEbG,eAFa;AAGbI,cAHa;AAIbE,WAJa;AAKbM;AALa,CAAf,E;;AC7DA;AACA;AACA;AAEA,MAAMG,yBAAyB,GAAG,SAAlC;AACA,MAAMC,QAAQ,GAAG,GAAjB;AACA,MAAMC,kBAAkB,GAAG,IAA3B;AACA,MAAMrB,2BAAmB,GAAG,CAAC,SAAD,EAAY,SAAZ,CAA5B;AACA,MAAMF,oBAAY,GAAG,KAArB;AAEA,MAAMwB,mBAAmB,GAAG,YAA5B;AAEA,MAAMC,6BAA6B,GAAG,2BAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG,EAAjC,C,CAAoC;;AAEpC;AACA;AACA;AACA;;AACA,MAAMC,qCAAqC,GAAG,GAA9C;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,SAAO,OAAO5K,MAAP,KAAkB,WAAlB,GACHA,MADG,GAEH6K,IAFJ;AAGD,CAJD;;AAMA,MAAMC,sBAAsB,GAAG,OAAO;AACpCtX,MAAI,EAAE6W,yBAD8B;AAEpClS,QAAM,EAAEmS;AAF4B,CAAP,CAA/B;;AAKA,MAAMS,mBAAmB,GAAIC,EAAD,KAAS;AACnCxX,MAAI,EAAE6W,yBAD6B;AAEnCY,WAAS,EAAEN,qCAFwB;AAGnCK;AAHmC,CAAT,CAA5B;;AAMA,MAAME,UAAU,GAAG,MAAMlL,MAAM,CAACsI,MAAP,CAAcqB,eAAd,CAA8B,IAAIjE,UAAJ,CAAegF,wBAAf,CAA9B,CAAzB;;AAEA,MAAMS,yBAAyB,GAAIC,oBAAD,IAA0B;AAC1D,QAAMC,YAAY,GAAGD,oBAAoB,CAACxE,UAArB,GAAkC8D,wBAAvD;AACA,QAAMY,qBAAqB,GAAGF,oBAAoB,CAACG,KAArB,CAA2B,CAA3B,EAA8BF,YAA9B,CAA9B;AACA,QAAML,EAAE,GAAGI,oBAAoB,CAACG,KAArB,CAA2BF,YAA3B,CAAX;AAEA,SAAO;AAAEC,yBAAF;AAAyBN;AAAzB,GAAP;AACD,CAND;;AAQA,MAAMQ,mBAAmB,GAAG,OAAOC,SAAP,EAAkB3B,IAAlB,EAAwB4B,iBAAiB,GAAGlB,mBAA5C,KAAoE;AAC9F,QAAMmB,aAAa,GAAG,MAAM3L,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBqD,SAArB,CAC1BC,IAAI,CAACjC,SAAL,CAAe8B,iBAAf,EAAkC5B,IAAlC,CAD0B,EAE1B2B,SAF0B,EAG1BX,sBAAsB,EAHI,EAI1BP,kBAJ0B,EAK1BrB,2BAL0B,CAA5B;AAOA,SAAOyC,aAAP;AACD,CATD;;AAWA,MAAMG,WAAW,GAAG,YAAY;AAC9B,QAAMhW,GAAG,GAAG,MAAMkK,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBuD,WAArB,CAChBhB,sBAAsB,EADN,EAEhBP,kBAFgB,EAGhBrB,2BAHgB,CAAlB;AAKA,SAAOpT,GAAP;AACD,CAPD;;AASA,MAAMiW,mBAAmB,GAAG,MAAOjW,GAAP,IAAe;AACzC,QAAMkW,MAAM,GAAG,MAAMhM,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+BjD,oBAA/B,EAA6ClT,GAA7C,CAArB;AACA,QAAMoW,SAAS,GAAGvD,qCAAM,CAACE,MAAP,CAAcmD,MAAd,CAAlB;AACA,SAAOE,SAAP;AACD,CAJD;;AAMA,MAAMC,mBAAmB,GAAG,MAAOD,SAAP,IAAqB;AAC/C,QAAMF,MAAM,GAAGrD,qCAAM,CAACC,MAAP,CAAcsD,SAAd,CAAf;AACA,QAAMpW,GAAG,GAAG,MAAMsW,gBAAgB,CAACJ,MAAD,CAAlC;AACA,SAAOlW,GAAP;AACD,CAJD;;AAMA,MAAMsW,gBAAgB,GAAG,MAAOJ,MAAP,IAAkB;AACzC,QAAMlW,GAAG,GAAG,MAAM8U,kBAAkB,GAAGtC,MAArB,CAA4BC,MAA5B,CAAmCgB,SAAnC,CAChBP,oBADgB,EAEhBgD,MAFgB,EAGhB;AACExY,QAAI,EAAE6W;AADR,GAHgB,EAMhBE,kBANgB,EAOhBrB,2BAPgB,CAAlB;AASA,SAAOpT,GAAP;AACD,CAXD;;AAaA,MAAMuW,gBAAgB,GAAG,MAAOvW,GAAP,IAAe;AACtC,QAAMkW,MAAM,GAAG,MAAMpB,kBAAkB,GAAGtC,MAArB,CAA4BC,MAA5B,CAAmC0D,SAAnC,CAA6CjD,oBAA7C,EAA2DlT,GAA3D,CAArB;AACA,SAAOkW,MAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,OAAO,GAAG,OAAOxW,GAAP,EAAYyW,SAAZ,KAA0B;AACxC,QAAMvB,EAAE,GAAGE,UAAU,EAArB,CADwC,CAGxC;;AACA,QAAMI,qBAAqB,GAAG,MAAMV,kBAAkB,GAAGtC,MAArB,CAA4BC,MAA5B,CAAmC+D,OAAnC,CAClCvB,mBAAmB,CAACC,EAAD,CADe,EAElClV,GAFkC,EAGlCyW,SAHkC,CAApC;AAMA,SAAO/F,YAAY,CAAC8E,qBAAD,EAAwBN,EAAxB,CAAnB;AACD,CAXD;;AAaA,MAAMwB,WAAW,GAAG,OAAO1W,GAAP,EAAY2W,aAAZ,KAA8B;AAChD,QAAMC,eAAe,GAAGrW,IAAI,CAACC,SAAL,CAAemW,aAAf,CAAxB;AACA,QAAME,SAAS,GAAG,MAAMC,aAAa,CAAC9W,GAAD,EAAM4W,eAAN,CAArC;AACA,SAAOC,SAAP;AACD,CAJD;;AAMA,MAAMC,aAAa,GAAG,OAAO9W,GAAP,EAAY4W,eAAZ,KAAgC;AACpD,QAAMG,oBAAoB,GAAG1G,mBAAmB,CAACuG,eAAD,CAAhD;AACA,QAAMC,SAAS,GAAG,MAAML,OAAO,CAACxW,GAAD,EAAM+W,oBAAN,CAA/B;AACA,SAAOlE,qCAAM,CAACE,MAAP,CAAc8D,SAAd,CAAP;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,OAAO,GAAG,OAAOhX,GAAP,EAAY6W,SAAZ,KAA0B;AACxC,QAAM;AAAErB,yBAAF;AAAyBN;AAAzB,MAAgCG,yBAAyB,CAACwB,SAAD,CAA/D;AAEA,QAAME,oBAAoB,GAAG,MAAMjC,kBAAkB,GAAGtC,MAArB,CAA4BC,MAA5B,CAAmCuE,OAAnC,CACjC/B,mBAAmB,CAACC,EAAD,CADc,EAEjClV,GAFiC,EAGjCwV,qBAHiC,CAAnC;AAKA,SAAOuB,oBAAP;AACD,CATD;;AAWA,MAAME,WAAW,GAAG,OAAOjX,GAAP,EAAYkX,mBAAZ,KAAoC;AACtD,QAAMN,eAAe,GAAG,MAAMO,aAAa,CAACnX,GAAD,EAAMkX,mBAAN,CAA3C;AACA,SAAO3W,IAAI,CAACgL,KAAL,CAAWqL,eAAX,CAAP;AACD,CAHD;;AAKA,MAAMO,aAAa,GAAG,OAAOnX,GAAP,EAAYoX,eAAZ,KAAgC;AACpD,QAAM9B,oBAAoB,GAAGzC,qCAAM,CAACC,MAAP,CAAcsE,eAAd,CAA7B;AACA,QAAML,oBAAoB,GAAG,MAAMC,OAAO,CAAChX,GAAD,EAAMsV,oBAAN,CAA1C;AACA,QAAMsB,eAAe,GAAGpH,mBAAmB,CAACuH,oBAAD,CAA3C;AACA,SAAOH,eAAP;AACD,CALD;;AAOA,MAAMS,6BAA6B,GAAG,OAAO9D,OAAP,EAAgBS,IAAhB,KAAyB;AAC7D,QAAM6B,aAAa,GAAG,MAAM3L,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBqD,SAArB,CAC1BC,IAAI,CAACjC,SAAL,CAAea,6BAAf,EAA8CX,IAA9C,CAD0B,EAE1BT,OAF0B,EAG1ByB,sBAAsB,EAHI,EAI1B,CAACP,kBAJyB,EAK1BrB,2BAL0B,CAA5B;AAOA,SAAOyC,aAAP;AACD,CATD;;AAWA,MAAMyB,kCAAkC,GAAG,MAAOtX,GAAP,IAAe;AACxD,QAAMuX,gBAAgB,GAAG,MAAMvB,WAAW,EAA1C;AACA,QAAMwB,mBAAmB,GAAG,MAAMjB,gBAAgB,CAACgB,gBAAD,CAAlD;AACA,QAAME,yBAAyB,GAAG,MAAMjB,OAAO,CAACxW,GAAD,EAAMwX,mBAAN,CAA/C;AACA,SAAO,CAACD,gBAAD,EAAmBE,yBAAnB,CAAP;AACD,CALD;;AAOe;AACbzC,wBADa;AAEbC,qBAFa;AAGbG,YAHa;AAIbC,2BAJa;AAKbK,qBALa;AAMbM,aANa;AAObC,qBAPa;AAQbI,qBARa;AASbE,kBATa;AAUbD,kBAVa;AAWbE,SAXa;AAYbE,aAZa;AAabI,eAba;AAcbE,SAda;AAebC,aAfa;AAgBbE,eAhBa;AAiBbE,+BAjBa;AAkBbC,oCAlBa;AAmBbpE,cAnBa;AAoBbE,qBAAmBA;AApBN,CAAf,E;;;;;;ACtMA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMqB,iCAAkB,GAAG,IAA3B;AACA,MAAMrB,kCAAmB,GAAG,CAAC,SAAD,CAA5B,C,CAAwC;;AACxC,MAAMsE,uBAAuB,GAAG,gBAAhC,C,CAEA;;AACA,MAAMC,KAAK,GAAGhG,sBAAsB,CAAC,kgBAAD,CAApC;AACA,MAAMiG,SAAS,GAAG,CAAC,CAAD,CAAlB,C,CAEA;AACA;;AACA,IAAIC,eAAe,GAAG,IAAtB;;AACA,MAAM5K,iCAAkB,GAAG,YAAY;AACrC,MAAI4K,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD,GAFD,MAEO;AACLA,mBAAe,GAAG,MAAMC,QAAO,CAAC7K,kBAAR,EAAxB,CADK,CACgD;;AACrD,WAAO4K,eAAP;AACD;AACF,CAPD;;AASA,MAAME,4BAA4B,GAAG,CAACC,aAAD,EAAgBC,UAAhB,KAA+B;AAClED,eAAa,CAACE,aAAd,CAA4BD,UAA5B;AACAD,eAAa,CAACG,YAAd;AACA,SAAOH,aAAP;AACD,CAJD;;AAMA,MAAMI,mBAAmB,GAAIH,UAAD,IAAgB;AAC1C,QAAMD,aAAa,GAAGK,iCAAE,CAACD,mBAAH,CAAuBT,KAAvB,EAA8BC,SAA9B,CAAtB;AACA,SAAOG,4BAA4B,CAACC,aAAD,EAAgBC,UAAhB,CAAnC;AACD,CAHD;;AAKA,MAAMK,YAAY,GAAG,OAAOL,UAAP,EAAmBM,cAAnB,KAAsC;AACzD,QAAMP,aAAa,GAAGI,mBAAmB,CAACH,UAAD,CAAzC;AACA,QAAMO,YAAY,GAAGR,aAAa,CAACS,aAAd,CAA4BF,cAA5B,CAArB;AAEA,QAAMG,YAAY,GAAG,MAAM/E,OAAM,CAACpB,IAAP,CAAYiG,YAAZ,CAA3B;AACA,QAAMG,SAAS,GAAG,MAAMC,OAAM,CAACtC,gBAAP,CAAwBoC,YAAxB,CAAxB;AACA,SAAOC,SAAP;AACD,CAPD;;AASA,MAAMxL,2BAAY,GAAI8K,UAAD,IAAgB;AACnC,QAAMD,aAAa,GAAGI,mBAAmB,CAACH,UAAD,CAAzC;AACA,SAAOD,aAAa,CAAC7K,YAAd,EAAP;AACD,CAHD;;AAKA,MAAM0L,sBAAsB,GAAG,MAAOZ,UAAP,IAAsB;AACnD,QAAMU,SAAS,GAAG,MAAML,YAAY,CAACL,UAAD,EAAa,IAAIrI,UAAJ,CAAe,MAAM3C,iCAAkB,EAAvC,CAAb,CAApC;AACA,SAAO0L,SAAP;AACD,CAHD;;AAKA,MAAMjD,kCAAmB,GAAG,OAAOC,SAAP,EAAkB3B,IAAlB,KAA2B;AACrD,QAAMiE,UAAU,GAAG,MAAM/N,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBqD,SAArB,CACvBC,IAAI,CAACjC,SAAL,CAAe4D,uBAAf,EAAwC1D,IAAxC,CADuB,EAEvB2B,SAFuB,EAGvBiD,OAAM,CAAC5D,sBAAP,EAHuB,EAGU;AACjCP,mCAJuB,EAKvBrB,kCALuB,CAAzB;AAQA,QAAM0F,aAAa,GAAG,MAAMF,OAAM,CAACrC,gBAAP,CAAwB0B,UAAxB,CAA5B;AACA,SAAOa,aAAP;AACD,CAXD;;AAae;AACb3L,cADa;AAEbmL,cAFa;AAGbO,wBAHa;AAIbnD,qBAAmBA;AAJN,CAAf,E;;ACtEA;AACA;AACA;AACA;AACA;AAEA,MAAMqD,oBAAoB,GAAG,OAA7B;AACA,MAAMtE,wBAAkB,GAAG,IAA3B;AACA,MAAMuE,wBAAwB,GAAG,CAAC,MAAD,EAAS,QAAT,CAAjC;AACA,MAAMC,2BAA2B,GAAG,CAAC,MAAD,CAApC;AACA,MAAMC,gBAAgB,GAAG,KAAzB,C,CAA+B;;AAC/B,MAAMC,0BAA0B,GAAG,CAAC,QAAD,CAAnC;AACA,MAAMC,eAAe,GAAG,MAAxB;AAEA,MAAMC,wBAAwB,GAAG,0BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,OAApB;AAEA,MAAMC,YAAY,GAAG;AACnB7b,MAAI,EAAEqb,oBADa;AAEnBS,YAAU,EAAEF;AAFO,CAArB;AAKA,MAAMG,oBAAoB,GAAG;AAC3B/b,MAAI,EAAEqb,oBADqB;AAE3BxG,MAAI,EAAE;AAAE7U,QAAI,EAAEiW,OAAM,CAACrB;AAAf;AAFqB,CAA7B;;AAKA,MAAMoH,eAAe,GAAG,YAAY;AAClC,QAAMC,OAAO,GAAG,MAAMzP,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBuD,WAArB,CACpBuD,YADoB,EAEpB9E,wBAFoB,EAGpBuE,wBAHoB,CAAtB;AAKA,SAAOW,OAAP;AACD,CAPD;;AASA,MAAMC,8BAA8B,GAAG,MAAO3B,UAAP,IAAsB;AAC3D,QAAM4B,aAAa,GAAG,MAAM3P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+B+C,gBAA/B,EAAiDjB,UAAjD,CAA5B;AACA,QAAMa,aAAa,GAAGzI,mBAAmB,CAAC9P,IAAI,CAACC,SAAL,CAAeqZ,aAAf,CAAD,CAAzC;AACA,SAAOf,aAAP;AACD,CAJD;;AAMA,MAAMgB,8BAA8B,GAAG,MAAOhB,aAAP,IAAyB;AAC9D,QAAMe,aAAa,GAAGtZ,IAAI,CAACgL,KAAL,CAAWiE,mBAAmB,CAACsJ,aAAD,CAA9B,CAAtB;AACA,QAAMb,UAAU,GAAG,MAAM/N,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACvByF,gBADuB,EAEvBW,aAFuB,EAGvBN,YAHuB,EAIvB9E,wBAJuB,EAKvBwE,2BALuB,CAAzB;AAQA,SAAOhB,UAAP;AACD,CAXD;;AAaA,MAAM8B,4BAA4B,GAAG,MAAOC,YAAP,IAAwB;AAC3D,QAAMC,SAAS,GAAG,MAAM/P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACtB2F,eADsB,EAEtBY,YAFsB,EAGtBT,YAHsB,EAItB9E,wBAJsB,EAKtB0E,0BALsB,CAAxB;AAOA,SAAOc,SAAP;AACD,CATD;;AAWA,MAAMC,4BAA4B,GAAG,MAAOD,SAAP,IAAqB;AACxD,QAAMD,YAAY,GAAG,MAAM9P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+BiD,eAA/B,EAAgDa,SAAhD,CAA3B;AACA,SAAOD,YAAP;AACD,CAHD;;AAKA,MAAMG,+BAA+B,GAAG,MAAOF,SAAP,IAAqB;AAC3D,QAAMD,YAAY,GAAG,MAAME,4BAA4B,CAACD,SAAD,CAAvD;AACA,QAAMG,eAAe,GAAGvH,qCAAM,CAACE,MAAP,CAAciH,YAAd,CAAxB;AACA,SAAOI,eAAP;AACD,CAJD;;AAMA,MAAMC,0BAA0B,GAAG,MAAOpC,UAAP,IAAsB;AACvD,QAAM4B,aAAa,GAAG,MAAM3P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+B,KAA/B,EAAsC8B,UAAtC,CAA5B,CADuD,CAGvD;;AACA,SAAO4B,aAAa,CAACS,CAArB,CAJuD,CAMvD;;AACAT,eAAa,CAACU,OAAd,GAAwBpB,0BAAxB;AAEA,QAAMc,SAAS,GAAG,MAAM/P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACtB,KADsB,EAEtBoG,aAFsB,EAEP;AACfN,cAHsB,EAItB9E,wBAJsB,EAKtB0E,0BALsB,CAAxB;AAQA,SAAOc,SAAP;AACD,CAlBD;;AAoBA,MAAMO,qCAAqC,GAAG,OAAO7E,SAAP,EAAkB3B,IAAlB,KAA2B;AACvE,QAAMuD,gBAAgB,GAAG,MAAMqB,OAAM,CAAClD,mBAAP,CAA2BC,SAA3B,EAAsC3B,IAAtC,EAA4CqF,wBAA5C,CAA/B;AACA,SAAO9B,gBAAP;AACD,CAHD;;AAKA,MAAMkD,oBAAoB,GAAG,MAAO9E,SAAP,IAAqB;AAChD;AACA,QAAM+E,YAAY,GAAG,MAAMhB,eAAe,EAA1C,CAFgD,CAIhD;;AACA,QAAMiB,yBAAyB,GAAG5E,IAAI,CAACnC,YAAL,EAAlC;AACA,QAAMgH,qBAAqB,GAAG,MAAMJ,qCAAqC,CAAC7E,SAAD,EAAYgF,yBAAZ,CAAzE;AACA,QAAME,kBAAkB,GAAG,MAAMjB,8BAA8B,CAACc,YAAY,CAACzC,UAAd,CAA/D;AACA,QAAM6C,wBAAwB,GAAG,MAAMlC,OAAM,CAACpC,OAAP,CAAeoE,qBAAf,EAAsCC,kBAAtC,CAAvC;AAEA,SAAO;AACLE,mBAAe,EAAEL,YAAY,CAACzC,UADzB;AAEL+C,kBAAc,EAAE,MAAMb,+BAA+B,CAACO,YAAY,CAACT,SAAd,CAFhD;AAGLa,4BAAwB,EAAEjI,qCAAM,CAACE,MAAP,CAAc+H,wBAAd,CAHrB;AAILH,6BAAyB,EAAE9H,qCAAM,CAACE,MAAP,CAAc4H,yBAAd;AAJtB,GAAP;AAMD,CAhBD;;AAkBA,MAAMM,IAAI,GAAG,OAAOhD,UAAP,EAAmBnN,IAAnB,KAA4B;AACvC,QAAMoQ,SAAS,GAAG,MAAMhR,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBwI,IAArB,CACtBxB,oBADsB,EAEtBxB,UAFsB,EAGtBnN,IAHsB,CAAxB;AAKA,SAAOoQ,SAAP;AACD,CAPD;;AASA,MAAMC,UAAU,GAAG,OAAOlD,UAAP,EAAmBrF,UAAnB,KAAkC;AACnD,QAAM9H,IAAI,GAAGuF,mBAAmB,CAACuC,UAAD,CAAhC;AACA,QAAMsI,SAAS,GAAG,MAAMD,IAAI,CAAChD,UAAD,EAAanN,IAAb,CAA5B;AACA,QAAMsQ,eAAe,GAAGvI,qCAAM,CAACE,MAAP,CAAcmI,SAAd,CAAxB;AACA,SAAOE,eAAP;AACD,CALD;;AAOA,MAAMC,MAAM,GAAG,OAAOpB,SAAP,EAAkBiB,SAAlB,EAA6BpQ,IAA7B,KAAsC;AACnD,QAAMwQ,UAAU,GAAG,MAAMpR,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB4I,MAArB,CACvB5B,oBADuB,EAEvBQ,SAFuB,EAGvBiB,SAHuB,EAIvBpQ,IAJuB,CAAzB;AAMA,SAAOwQ,UAAP;AACD,CARD;;AAUA,MAAMC,YAAY,GAAG,OAAOtB,SAAP,EAAkBmB,eAAlB,EAAmCxI,UAAnC,KAAkD;AACrE,QAAM9H,IAAI,GAAGuF,mBAAmB,CAACuC,UAAD,CAAhC;AACA,QAAMsI,SAAS,GAAGrI,qCAAM,CAACC,MAAP,CAAcsI,eAAd,CAAlB;AACA,QAAME,UAAU,GAAG,MAAMD,MAAM,CAACpB,SAAD,EAAYiB,SAAZ,EAAuBpQ,IAAvB,CAA/B;AACA,SAAOwQ,UAAP;AACD,CALD;;AAOe;AACbb,sBADa;AAEbD,uCAFa;AAGbV,gCAHa;AAIbC,8BAJa;AAKbG,8BALa;AAMbC,iCANa;AAObE,4BAPa;AAQbY,MARa;AASbE,YATa;AAUbE,QAVa;AAWbE;AAXa,CAAf,E;;ACnKA;AACA;AACA;AACA;AACA;AAEA,MAAMC,mBAAmB,GAAG,MAA5B;AACA,MAAM/G,uBAAkB,GAAG,IAA3B;AACA,MAAMrB,wBAAmB,GAAG,CAAC,WAAD,EAAc,YAAd,CAA5B;AACA,MAAM8F,qBAAgB,GAAG,KAAzB,C,CAA+B;;AAC/B,MAAME,oBAAe,GAAG,MAAxB;AAEA,MAAMqC,uBAAuB,GAAG,yBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMnC,gBAAW,GAAG,OAApB;AAEA,MAAMoC,WAAW,GAAG;AAClBhe,MAAI,EAAE8d,mBADY;AAElBhC,YAAU,EAAEF,gBAAWA;AAFL,CAApB;;AAKA,MAAMI,oBAAe,GAAG,YAAY;AAClC,QAAMC,OAAO,GAAG,MAAMzP,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBuD,WAArB,CACpB0F,WADoB,EAEpBjH,uBAFoB,EAGpBrB,wBAHoB,CAAtB;AAKA,SAAOuG,OAAP;AACD,CAPD;;AASA,MAAMC,mCAA8B,GAAG,MAAO3B,UAAP,IAAsB;AAC3D,QAAM4B,aAAa,GAAG,MAAM3P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+B+C,qBAA/B,EAAiDjB,UAAjD,CAA5B;AACA,QAAMa,aAAa,GAAGzI,mBAAmB,CAAC9P,IAAI,CAACC,SAAL,CAAeqZ,aAAf,CAAD,CAAzC;AACA,SAAOf,aAAP;AACD,CAJD;;AAMA,MAAMgB,mCAA8B,GAAG,MAAOhB,aAAP,IAAyB;AAC9D,QAAMe,aAAa,GAAGtZ,IAAI,CAACgL,KAAL,CAAWiE,mBAAmB,CAACsJ,aAAD,CAA9B,CAAtB;AACA,QAAMb,UAAU,GAAG,MAAM/N,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACvByF,qBADuB,EAEvBW,aAFuB,EAGvB6B,WAHuB,EAIvBjH,uBAJuB,EAKvBrB,wBALuB,CAAzB;AAQA,SAAO6E,UAAP;AACD,CAXD;;AAaA,MAAMiC,iCAA4B,GAAG,MAAOD,SAAP,IAAqB;AACxD,QAAMD,YAAY,GAAG,MAAM9P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqB0D,SAArB,CAA+BiD,oBAA/B,EAAgDa,SAAhD,CAA3B;AACA,SAAOD,YAAP;AACD,CAHD;;AAKA,MAAMD,iCAA4B,GAAG,MAAOC,YAAP,IAAwB;AAC3D,QAAMC,SAAS,GAAG,MAAM/P,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACtB2F,oBADsB,EAEtBY,YAFsB,EAGtB0B,WAHsB,EAItBjH,uBAJsB,EAKtB,EALsB,CAKlB;AALkB,GAAxB;AAQA,SAAOwF,SAAP;AACD,CAVD;;AAYA,MAAM0B,oCAAoC,GAAG,OAAOhG,SAAP,EAAkB3B,IAAlB,KAA2B;AACtE,QAAMuD,gBAAgB,GAAG,MAAMqB,OAAM,CAAClD,mBAAP,CAA2BC,SAA3B,EAAsC3B,IAAtC,EAA4CyH,uBAA5C,CAA/B;AACA,SAAOlE,gBAAP;AACD,CAHD;;AAKA,MAAMqE,mBAAmB,GAAG,OAAOjG,SAAP,EAAkBoF,eAAlB,KAAsC;AAChE;AACA,QAAMc,WAAW,GAAG,MAAMnC,oBAAe,EAAzC,CAFgE,CAIhE;;AACA,QAAMoC,wBAAwB,GAAG/F,IAAI,CAACnC,YAAL,EAAjC;AACA,QAAMmI,oBAAoB,GAAG,MAAMJ,oCAAoC,CAAChG,SAAD,EAAYmG,wBAAZ,CAAvE;AACA,QAAME,iBAAiB,GAAG,MAAMpC,mCAA8B,CAACiC,WAAW,CAAC5D,UAAb,CAA9D;AACA,QAAMgE,uBAAuB,GAAG,MAAMrD,OAAM,CAACpC,OAAP,CAAeuF,oBAAf,EAAqCC,iBAArC,CAAtC;AAEA,QAAME,aAAa,GAAG,MAAMhC,iCAA4B,CAAC2B,WAAW,CAAC5B,SAAb,CAAxD;AACA,QAAMkC,mBAAmB,GAAG,MAAMC,KAAK,CAACnB,IAAN,CAAWF,eAAX,EAA4BmB,aAA5B,CAAlC;AAEA,SAAO;AACLG,kBAAc,EAAER,WAAW,CAAC5D,UADvB;AAELiE,iBAAa,EAAErJ,qCAAM,CAACE,MAAP,CAAcmJ,aAAd,CAFV;AAGLD,2BAAuB,EAAEpJ,qCAAM,CAACE,MAAP,CAAckJ,uBAAd,CAHpB;AAILE,uBAAmB,EAAEtJ,qCAAM,CAACE,MAAP,CAAcoJ,mBAAd,CAJhB;AAKLL,4BAAwB,EAAEjJ,qCAAM,CAACE,MAAP,CAAc+I,wBAAd;AALrB,GAAP;AAOD,CApBD;;AAsBA,MAAMQ,6BAA6B,GAAG,OAAOC,kBAAP,EAA2BF,cAA3B,KAA8C;AAClF,QAAMG,sBAAsB,GAAG,MAAMtS,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBqD,SAArB,CACnC;AACEpY,QAAI,EAAE8d,mBADR;AAEEhC,cAAU,EAAEF,gBAFd;AAGEmD,UAAM,EAAEF;AAHV,GADmC,EAMnCF,cANmC,EAOnCzD,OAAM,CAAC5D,sBAAP,EAPmC,EAQnC,CAACP,uBARkC,EASnCmE,OAAM,CAACxF,mBAT4B,CAArC;AAYA,SAAOoJ,sBAAP;AACD,CAdD;;AAgBe;AACb9C,iBADa;AAEbkC,qBAFa;AAGbD,sCAHa;AAIb7B,gCAJa;AAKbI,8BALa;AAMbH,8BANa;AAObuC;AAPa,CAAf,E;;ACtHA;AACA;AACA;AACA;AAEA,MAAMI,aAAa,GAAG,gBAAtB;AAEA,MAAMC,cAAc,GAAG,MAAvB;AACA,MAAMlI,uBAAkB,GAAG,KAA3B;AACA,MAAMmI,wBAAwB,GAAG,CAAC,MAAD,CAAjC;AACA,MAAMC,mCAAmC,GAAG,CAAC,MAAD,EAAS,QAAT,CAA5C;;AAEA,MAAMnH,wBAAmB,GAAG,OAAOC,SAAP,EAAkB3B,IAAlB,KAA2B;AACrD,QAAM8I,OAAO,GAAG,MAAM5S,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBqD,SAArB,CACpBC,IAAI,CAACjC,SAAL,CAAe4I,aAAf,EAA8B1I,IAA9B,CADoB,EAEpB2B,SAFoB,EAGpB;AACEjY,QAAI,EAAEif,cADR;AAEEpK,QAAI,EAAE;AACJ7U,UAAI,EAAEiW,OAAM,CAACrB;AADT,KAFR;AAKEjQ,UAAM,EAAE,GALV,CAKc;;AALd,GAHoB,EAUpBoS,uBAVoB,EAWpBmI,wBAXoB,CAAtB;AAaA,SAAOE,OAAP;AACD,CAfD;;AAiBA,MAAMC,oBAAoB,GAAG,MAAOC,OAAP,IAAmB;AAC9C,QAAMF,OAAO,GAAG,MAAM5S,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBgB,SAArB,CACpB,KADoB,EAEpBuJ,OAFoB,EAGpB;AACEtf,QAAI,EAAEif,cADR;AAEEpK,QAAI,EAAE;AACJ7U,UAAI,EAAEiW,OAAM,CAACrB;AADT,KAFR;AAKEjQ,UAAM,EAAE,GALV,CAKc;;AALd,GAHoB,EAUpBoS,uBAVoB,EAWpBoI,mCAXoB,CAAtB;AAaA,SAAOC,OAAP;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;;;AACA,MAAM7B,SAAI,GAAG,OAAOjb,GAAP,EAAY8K,IAAZ,KAAqB;AAChC,QAAMgF,MAAM,GAAG,MAAM5F,MAAM,CAACsI,MAAP,CAAcC,MAAd,CAAqBwI,IAArB,CACnB;AACEvd,QAAI,EAAEif;AADR,GADmB,EAInB3c,GAJmB,EAKnB8K,IALmB,CAArB;AAOA,SAAOgF,MAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AACA,MAAMqL,eAAU,GAAG,OAAOnb,GAAP,EAAY8K,IAAZ,KAAqB;AACtC,QAAMgF,MAAM,GAAG,MAAMmL,SAAI,CAACjb,GAAD,EAAMqQ,mBAAmB,CAACvF,IAAD,CAAzB,CAAzB;AACA,SAAO+H,qCAAM,CAACE,MAAP,CAAcjD,MAAd,CAAP;AACD,CAHD;;AAKe;AACb4F,qBADa;AAEbqH,sBAFa;AAGb9B,MAHa;AAIbE,YAAUA;AAJG,CAAf,E;;;;;;ACxEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM8B,CAAC,GAAG,KAAV,C,CAAgB;;AAChB,MAAMC,CAAC,GAAG,CAAV;AACA,MAAMC,CAAC,GAAG,CAAV;AACA,MAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,EAApB;;AACA,MAAMzJ,mBAAY,GAAG,MAAM1J,MAAM,CAACsI,MAAP,CAAcqB,eAAd,CAA8B,IAAIjE,UAAJ,CAAeyN,WAAf,CAA9B,CAA3B;;AAEA,MAAM9K,WAAI,GAAG,OAAO+K,cAAP,EAAuBtJ,IAAvB,EAA6BuJ,gBAAgB,GAAGC,4BAAQ,CAACC,MAAzD,KAAoE;AAC/E,QAAMC,mBAAmB,GAAG,IAAI9N,UAAJ,CAAeS,mBAAmB,CAACiN,cAAD,CAAlC,CAA5B;AACA,QAAMK,YAAY,GAAG,MAAMJ,gBAAgB,CAACG,mBAAD,EAAsB1J,IAAtB,EAA4BiJ,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,KAArC,CAA3C;AACA,SAAOvK,qCAAM,CAACE,MAAP,CAAc4K,YAAd,CAAP;AACD,CAJD;;AAMe;AACb/J,cADa;AAEbrB,MAAIA;AAFS,CAAf,E;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMqL,cAAc,GAAG,EAAvB,C,CAA0B;;AAC1B,MAAMC,YAAY,GAAG,MAAM3T,MAAM,CAACsI,MAAP,CAAcqB,eAAd,CAA8B,IAAIjE,UAAJ,CAAegO,cAAf,CAA9B,CAA3B;;AAEe;AACbC,cADa;AAEbjF,iBAFa;AAGbZ,+BAHa;AAIboE,cAJa;AAKb0B,YALa;AAMbnK,iBANa;AAOboK,YAPa;AAQbhI,YARa;AASb0H,gBAAMA;AATO,CAAf,E;;ACZO,MAAMO,uBAAuB,GAAIC,WAAD,IAAiB;AACtD,SAAO,IAAI5R,OAAJ,CAAYhB,OAAO,IAAI;AAC5B,QAAI6S,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,UAAM,CAACzS,MAAP,GAAgB,MAAMJ,OAAO,CAAC6S,MAAM,CAACpO,MAAR,CAA7B;;AACAoO,UAAM,CAACE,UAAP,CAAkB,IAAIC,IAAJ,CAAS,CAACJ,WAAD,CAAT,CAAlB;AACD,GAJM,CAAP;AAKD,CANM;;AAQP,MAAMK,0BAA0B,GAAIC,QAAD,IAAc;AAC/C,QAAMC,IAAI,GAAG,SAAb;AACA,QAAMC,KAAK,GAAG,UAAd;;AAEA,MAAIF,QAAQ,CAACtM,SAAT,CAAmB,CAAnB,EAAsBuM,IAAI,CAACnc,MAA3B,MAAuCmc,IAA3C,EAAiD;AAC/C,WAAOD,QAAQ,CAACtM,SAAT,CAAmBuM,IAAI,CAACnc,MAAxB,CAAP;AACD,GAFD,MAEO,IAAIkc,QAAQ,CAACtM,SAAT,CAAmB,CAAnB,EAAsBwM,KAAK,CAACpc,MAA5B,MAAwCoc,KAA5C,EAAmD;AACxD,WAAOF,QAAQ,CAACtM,SAAT,CAAmBwM,KAAK,CAACpc,MAAzB,CAAP;AACD,GAFM,MAEA;AACL,WAAOkc,QAAP;AACD;AACF,CAXD;;AAaO,MAAMG,uBAAuB,GAAIH,QAAD,IAAc;AACnD,SAAOA,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAP;AACD,CAFM;AAIA,MAAMC,QAAQ,GAAIL,QAAD,IAAc;AACpC,QAAMM,IAAI,GAAGP,0BAA0B,CAACC,QAAD,CAAvC;AACA,QAAMO,QAAQ,GAAGJ,uBAAuB,CAACH,QAAD,CAAxC;AAEA,SAAO,CAAEO,QAAQ,KAAK,OAAd,GACN,QADM,GACK,OADN,IACiBD,IADxB;AAED,CANM;AAQA,MAAME,gBAAgB,GAAIC,MAAD,IAAY;AAC1C,SAAOA,MAAM,CAAC3c,MAAP,GAAgB,CAAvB;AACD,CAFM;AAIA,MAAM4c,oBAAoB,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACxD,SAAO1e,MAAM,CAAC2e,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,QAA7C,CAAP;AACD,CAFM,C,CAIP;;AACO,SAASI,KAAT,GAAiB;AACtB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,OAAKC,SAAL,GAAiB,MAAMF,KAAK,CAACnd,MAAN,GAAeod,MAAtC;;AAEA,OAAKE,OAAL,GAAe,MAAMH,KAAK,CAACnd,MAAN,KAAiB,CAAtC;;AAEA,OAAKud,OAAL,GAAgBC,IAAD,IAAU;AACvBL,SAAK,CAACpN,IAAN,CAAWyN,IAAX;AACA,WAAO,KAAKH,SAAL,EAAP;AACD,GAHD;;AAKA,OAAKI,OAAL,GAAe,MAAM;AACnB;AACA,UAAMD,IAAI,GAAGL,KAAK,CAACC,MAAD,CAAlB;AAEAA,UAAM,IAAI,CAAV,CAJmB,CAMnB;;AACA,QAAIA,MAAM,GAAG,CAAT,GAAaD,KAAK,CAACnd,MAAvB,EAA+B;AAC7Bmd,WAAK,GAAGA,KAAK,CAAC/J,KAAN,CAAYgK,MAAZ,CAAR;AACAA,YAAM,GAAG,CAAT;AACD;;AAED,WAAOI,IAAP;AACD,GAbD;;AAeA,OAAKE,IAAL,GAAY,MAAMP,KAAK,CAACC,MAAD,CAAvB;AACD,C;;ACvED;AACA;AACA,MAAMO,SAAS,GAAG,MAAM;AACtB,QAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AACjClL,QAAI,CAACmL,SAAL,GAAiB,UAAUxX,CAAV,EAAa;AAC5B,YAAM;AACJyX,gBADI;AAEJC,kBAFI;AAGJtV;AAHI,UAIFpC,CAAC,CAACoC,IAJN,CAD4B,CAO5B;AACA;;AACA,YAAMuV,QAAQ,GAAG,YAAY;AAAE,iBAASC,CAAT,CAAWA,CAAX,EAAcpD,CAAd,EAAiB;AAAE,cAAI,CAACqD,CAAC,CAACD,CAAD,CAAN,EAAW;AAAEC,aAAC,CAACD,CAAD,CAAD,GAAO,EAAP;;AAAW,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACje,MAAtB,EAA8Bme,CAAC,EAA/B,EAAkCD,CAAC,CAACD,CAAD,CAAD,CAAKA,CAAC,CAACG,MAAF,CAASD,CAAT,CAAL,IAAoBA,CAApB;AAAuB;;AAAC,iBAAOD,CAAC,CAACD,CAAD,CAAD,CAAKpD,CAAL,CAAP;AAAgB;;AAAC,YAAIA,CAAC,GAAGhN,MAAM,CAACC,YAAf;AAAA,YAA6BqQ,CAAC,GAAG,mEAAjC;AAAA,YAAsG9X,CAAC,GAAG,mEAA1G;AAAA,YAA+K6X,CAAC,GAAG,EAAnL;AAAA,YAAuLvQ,CAAC,GAAG;AAAE0Q,0BAAgB,EAAE,0BAAUJ,CAAV,EAAa;AAAE,gBAAI,QAAQA,CAAZ,EAAe,OAAO,EAAP;;AAAW,gBAAIpD,CAAC,GAAGlN,CAAC,CAAC2Q,SAAF,CAAYL,CAAZ,EAAe,CAAf,EAAkB,UAAUA,CAAV,EAAa;AAAE,qBAAOE,CAAC,CAACC,MAAF,CAASH,CAAT,CAAP;AAAoB,aAArD,CAAR;;AAAgE,oBAAQpD,CAAC,CAAC7a,MAAF,GAAW,CAAnB;AAAwB;AAAS,mBAAK,CAAL;AAAQ,uBAAO6a,CAAP;;AAAU,mBAAK,CAAL;AAAQ,uBAAOA,CAAC,GAAG,KAAX;;AAAkB,mBAAK,CAAL;AAAQ,uBAAOA,CAAC,GAAG,IAAX;;AAAiB,mBAAK,CAAL;AAAQ,uBAAOA,CAAC,GAAG,GAAX;AAA9G;AAAgI,WAA7P;AAA+P0D,8BAAoB,EAAE,8BAAU1D,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiB,MAAMA,CAAN,GAAU,IAAV,GAAiBlN,CAAC,CAAC6Q,WAAF,CAAc3D,CAAC,CAAC7a,MAAhB,EAAwB,EAAxB,EAA4B,UAAUqG,CAAV,EAAa;AAAE,qBAAO4X,CAAC,CAACE,CAAD,EAAItD,CAAC,CAACuD,MAAF,CAAS/X,CAAT,CAAJ,CAAR;AAA0B,aAArE,CAAzC;AAAiH,WAArZ;AAAuZoY,yBAAe,EAAE,yBAAUR,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiBtQ,CAAC,CAAC2Q,SAAF,CAAYL,CAAZ,EAAe,EAAf,EAAmB,UAAUA,CAAV,EAAa;AAAE,qBAAOpD,CAAC,CAACoD,CAAC,GAAG,EAAL,CAAR;AAAkB,aAApD,IAAwD,GAAhF;AAAqF,WAA5gB;AAA8gBS,6BAAmB,EAAE,6BAAUT,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiB,MAAMA,CAAN,GAAU,IAAV,GAAiBtQ,CAAC,CAAC6Q,WAAF,CAAcP,CAAC,CAACje,MAAhB,EAAwB,KAAxB,EAA+B,UAAU6a,CAAV,EAAa;AAAE,qBAAOoD,CAAC,CAAC7P,UAAF,CAAayM,CAAb,IAAkB,EAAzB;AAA6B,aAA3E,CAAzC;AAAuH,WAAzqB;AAA2qB8D,8BAAoB,EAAE,8BAAUV,CAAV,EAAa;AAAE,iBAAK,IAAIpD,CAAC,GAAGlN,CAAC,CAACmQ,QAAF,CAAWG,CAAX,CAAR,EAAuBE,CAAC,GAAG,IAAI5Q,UAAJ,CAAe,IAAIsN,CAAC,CAAC7a,MAArB,CAA3B,EAAyDqG,CAAC,GAAG,CAA7D,EAAgE6X,CAAC,GAAGrD,CAAC,CAAC7a,MAA3E,EAAmFke,CAAC,GAAG7X,CAAvF,EAA0FA,CAAC,EAA3F,EAA+F;AAAE,kBAAIuY,CAAC,GAAG/D,CAAC,CAACzM,UAAF,CAAa/H,CAAb,CAAR;AAAyB8X,eAAC,CAAC,IAAI9X,CAAL,CAAD,GAAWuY,CAAC,KAAK,CAAjB,EAAoBT,CAAC,CAAC,IAAI9X,CAAJ,GAAQ,CAAT,CAAD,GAAeuY,CAAC,GAAG,GAAvC;AAA4C;;AAAC,mBAAOT,CAAP;AAAU,WAAj4B;AAAm4BU,kCAAwB,EAAE,kCAAUZ,CAAV,EAAa;AAAE,gBAAI,SAASA,CAAT,IAAc,KAAK,CAAL,KAAWA,CAA7B,EAAgC,OAAOtQ,CAAC,CAACoQ,UAAF,CAAaE,CAAb,CAAP;;AAAwB,iBAAK,IAAIE,CAAC,GAAG,IAAIW,KAAJ,CAAUb,CAAC,CAACje,MAAF,GAAW,CAArB,CAAR,EAAiCqG,CAAC,GAAG,CAArC,EAAwC6X,CAAC,GAAGC,CAAC,CAACne,MAAnD,EAA2Dke,CAAC,GAAG7X,CAA/D,EAAkEA,CAAC,EAAnE,EAAsE8X,CAAC,CAAC9X,CAAD,CAAD,GAAO,MAAM4X,CAAC,CAAC,IAAI5X,CAAL,CAAP,GAAiB4X,CAAC,CAAC,IAAI5X,CAAJ,GAAQ,CAAT,CAAzB;;AAAsC,gBAAIuY,CAAC,GAAG,EAAR;AAAY,mBAAOT,CAAC,CAACY,OAAF,CAAU,UAAUd,CAAV,EAAa;AAAEW,eAAC,CAAC7O,IAAF,CAAO8K,CAAC,CAACoD,CAAD,CAAR;AAAc,aAAvC,GAA0CtQ,CAAC,CAACoQ,UAAF,CAAaa,CAAC,CAACI,IAAF,CAAO,EAAP,CAAb,CAAjD;AAA2E,WAAvqC;AAAyqCC,uCAA6B,EAAE,uCAAUhB,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiBtQ,CAAC,CAAC2Q,SAAF,CAAYL,CAAZ,EAAe,CAAf,EAAkB,UAAUA,CAAV,EAAa;AAAE,qBAAO5X,CAAC,CAAC+X,MAAF,CAASH,CAAT,CAAP;AAAoB,aAArD,CAAxB;AAAgF,WAAvyC;AAAyyCiB,2CAAiC,EAAE,2CAAUrE,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiB,MAAMA,CAAN,GAAU,IAAV,IAAkBA,CAAC,GAAGA,CAAC,CAACsE,OAAF,CAAU,IAAV,EAAgB,GAAhB,CAAJ,EAA0BxR,CAAC,CAAC6Q,WAAF,CAAc3D,CAAC,CAAC7a,MAAhB,EAAwB,EAAxB,EAA4B,UAAUme,CAAV,EAAa;AAAE,qBAAOF,CAAC,CAAC5X,CAAD,EAAIwU,CAAC,CAACuD,MAAF,CAASD,CAAT,CAAJ,CAAR;AAA0B,aAArE,CAA5C,CAAxB;AAA6I,WAAx+C;AAA0+CL,kBAAQ,EAAE,kBAAUG,CAAV,EAAa;AAAE,mBAAOtQ,CAAC,CAAC2Q,SAAF,CAAYL,CAAZ,EAAe,EAAf,EAAmB,UAAUA,CAAV,EAAa;AAAE,qBAAOpD,CAAC,CAACoD,CAAD,CAAR;AAAa,aAA/C,CAAP;AAAyD,WAA5jD;AAA8jDK,mBAAS,EAAE,mBAAUL,CAAV,EAAapD,CAAb,EAAgBsD,CAAhB,EAAmB;AAAE,gBAAI,QAAQF,CAAZ,EAAe,OAAO,EAAP;AAAW,gBAAI5X,CAAJ;AAAA,gBAAO6X,CAAP;AAAA,gBAAUvQ,CAAV;AAAA,gBAAaiR,CAAC,GAAG,EAAjB;AAAA,gBAAqB9D,CAAC,GAAG,EAAzB;AAAA,gBAA6BsE,CAAC,GAAG,EAAjC;AAAA,gBAAqCC,CAAC,GAAG,EAAzC;AAAA,gBAA6CC,CAAC,GAAG,EAAjD;AAAA,gBAAqDC,CAAC,GAAG,CAAzD;AAAA,gBAA4DC,CAAC,GAAG,CAAhE;AAAA,gBAAmEC,CAAC,GAAG,CAAvE;AAAA,gBAA0ExH,CAAC,GAAG,EAA9E;AAAA,gBAAkFyH,CAAC,GAAG,CAAtF;AAAA,gBAAyFC,CAAC,GAAG,CAA7F;;AAAgG,iBAAKhS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGsQ,CAAC,CAACje,MAAlB,EAA0B2N,CAAC,IAAI,CAA/B,EAAiC,IAAIyR,CAAC,GAAGnB,CAAC,CAACG,MAAF,CAASzQ,CAAT,CAAJ,EAAiBvP,MAAM,CAAC2e,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC2B,CAArC,EAAwCQ,CAAxC,MAA+CR,CAAC,CAACQ,CAAD,CAAD,GAAOI,CAAC,EAAR,EAAY1E,CAAC,CAACsE,CAAD,CAAD,GAAO,CAAC,CAAnE,CAAjB,EAAwFC,CAAC,GAAGC,CAAC,GAAGF,CAAhG,EAAmGhhB,MAAM,CAAC2e,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC2B,CAArC,EAAwCS,CAAxC,CAAvG,EAAmJC,CAAC,GAAGD,CAAJ,CAAnJ,KAA+J;AAAE,kBAAIjhB,MAAM,CAAC2e,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCnC,CAArC,EAAwCwE,CAAxC,CAAJ,EAAgD;AAAE,oBAAIA,CAAC,CAAClR,UAAF,CAAa,CAAb,IAAkB,GAAtB,EAA2B;AAAE,uBAAK/H,CAAC,GAAG,CAAT,EAAYoZ,CAAC,GAAGpZ,CAAhB,EAAmBA,CAAC,EAApB,EAAuBqZ,CAAC,KAAK,CAAN,EAASC,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAtD;;AAA0D,uBAAKzB,CAAC,GAAGoB,CAAC,CAAClR,UAAF,CAAa,CAAb,CAAJ,EAAqB/H,CAAC,GAAG,CAA9B,EAAiC,IAAIA,CAArC,EAAwCA,CAAC,EAAzC,EAA4CqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;AAA8E,iBAAxO,MAA8O;AAAE,uBAAKA,CAAC,GAAG,CAAJ,EAAO7X,CAAC,GAAG,CAAhB,EAAmBoZ,CAAC,GAAGpZ,CAAvB,EAA0BA,CAAC,EAA3B,EAA8BqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAASxB,CAAb,EAAgByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAA7D,EAAiEzB,CAAC,GAAG,CAArE;;AAAwE,uBAAKA,CAAC,GAAGoB,CAAC,CAAClR,UAAF,CAAa,CAAb,CAAJ,EAAqB/H,CAAC,GAAG,CAA9B,EAAiC,KAAKA,CAAtC,EAAyCA,CAAC,EAA1C,EAA6CqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;AAA8E;;AAACqB,iBAAC,IAAI,KAAKA,CAAL,KAAWA,CAAC,GAAG5Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYH,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,CAAJ,EAAyC,OAAO3E,CAAC,CAACwE,CAAD,CAAlD;AAAuD,eAA3jB,MAAikB,KAAKpB,CAAC,GAAGU,CAAC,CAACU,CAAD,CAAL,EAAUjZ,CAAC,GAAG,CAAnB,EAAsBoZ,CAAC,GAAGpZ,CAA1B,EAA6BA,CAAC,EAA9B,EAAiCqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;;AAA8EqB,eAAC,IAAI,KAAKA,CAAL,KAAWA,CAAC,GAAG5Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYH,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,CAAJ,EAAyCb,CAAC,CAACS,CAAD,CAAD,GAAOG,CAAC,EAAjD,EAAqDF,CAAC,GAAGzR,MAAM,CAACuR,CAAD,CAAhE;AAAqE;;AAAC,gBAAI,OAAOE,CAAX,EAAc;AAAE,kBAAIlhB,MAAM,CAAC2e,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCnC,CAArC,EAAwCwE,CAAxC,CAAJ,EAAgD;AAAE,oBAAIA,CAAC,CAAClR,UAAF,CAAa,CAAb,IAAkB,GAAtB,EAA2B;AAAE,uBAAK/H,CAAC,GAAG,CAAT,EAAYoZ,CAAC,GAAGpZ,CAAhB,EAAmBA,CAAC,EAApB,EAAuBqZ,CAAC,KAAK,CAAN,EAASC,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAtD;;AAA0D,uBAAKzB,CAAC,GAAGoB,CAAC,CAAClR,UAAF,CAAa,CAAb,CAAJ,EAAqB/H,CAAC,GAAG,CAA9B,EAAiC,IAAIA,CAArC,EAAwCA,CAAC,EAAzC,EAA4CqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;AAA8E,iBAAxO,MAA8O;AAAE,uBAAKA,CAAC,GAAG,CAAJ,EAAO7X,CAAC,GAAG,CAAhB,EAAmBoZ,CAAC,GAAGpZ,CAAvB,EAA0BA,CAAC,EAA3B,EAA8BqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAASxB,CAAb,EAAgByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAA7D,EAAiEzB,CAAC,GAAG,CAArE;;AAAwE,uBAAKA,CAAC,GAAGoB,CAAC,CAAClR,UAAF,CAAa,CAAb,CAAJ,EAAqB/H,CAAC,GAAG,CAA9B,EAAiC,KAAKA,CAAtC,EAAyCA,CAAC,EAA1C,EAA6CqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;AAA8E;;AAACqB,iBAAC,IAAI,KAAKA,CAAL,KAAWA,CAAC,GAAG5Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYH,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,CAAJ,EAAyC,OAAO3E,CAAC,CAACwE,CAAD,CAAlD;AAAuD,eAA3jB,MAAikB,KAAKpB,CAAC,GAAGU,CAAC,CAACU,CAAD,CAAL,EAAUjZ,CAAC,GAAG,CAAnB,EAAsBoZ,CAAC,GAAGpZ,CAA1B,EAA6BA,CAAC,EAA9B,EAAiCqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;;AAA8EqB,eAAC,IAAI,KAAKA,CAAL,KAAWA,CAAC,GAAG5Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYH,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,CAAL;AAA0C;;AAAC,iBAAKvB,CAAC,GAAG,CAAJ,EAAO7X,CAAC,GAAG,CAAhB,EAAmBoZ,CAAC,GAAGpZ,CAAvB,EAA0BA,CAAC,EAA3B,EAA8BqZ,CAAC,GAAGA,CAAC,IAAI,CAAL,GAAS,IAAIxB,CAAjB,EAAoByB,CAAC,IAAI9E,CAAC,GAAG,CAAT,IAAc8E,CAAC,GAAG,CAAJ,EAAO1H,CAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR,CAAP,EAAqBA,CAAC,GAAG,CAAvC,IAA4CC,CAAC,EAAjE,EAAqEzB,CAAC,KAAK,CAA3E;;AAA8E,qBAAU;AAAE,kBAAIwB,CAAC,KAAK,CAAN,EAASC,CAAC,IAAI9E,CAAC,GAAG,CAAtB,EAAyB;AAAE5C,iBAAC,CAAClI,IAAF,CAAOoO,CAAC,CAACuB,CAAD,CAAR;AAAc;AAAO;;AAACC,eAAC;AAAI;;AAAC,mBAAO1H,CAAC,CAAC+G,IAAF,CAAO,EAAP,CAAP;AAAmB,WAA7jH;AAA+jHjB,oBAAU,EAAE,oBAAUE,CAAV,EAAa;AAAE,mBAAO,QAAQA,CAAR,GAAY,EAAZ,GAAiB,MAAMA,CAAN,GAAU,IAAV,GAAiBtQ,CAAC,CAAC6Q,WAAF,CAAcP,CAAC,CAACje,MAAhB,EAAwB,KAAxB,EAA+B,UAAU6a,CAAV,EAAa;AAAE,qBAAOoD,CAAC,CAAC7P,UAAF,CAAayM,CAAb,CAAP;AAAwB,aAAtE,CAAzC;AAAkH,WAA5sH;AAA8sH2D,qBAAW,EAAE,qBAAUP,CAAV,EAAaE,CAAb,EAAgB9X,CAAhB,EAAmB;AAAE,gBAAI6X,CAAJ;AAAA,gBAAOvQ,CAAP;AAAA,gBAAUiR,CAAV;AAAA,gBAAa9D,CAAb;AAAA,gBAAgBsE,CAAhB;AAAA,gBAAmBC,CAAnB;AAAA,gBAAsBC,CAAtB;AAAA,gBAAyBC,CAAzB;AAAA,gBAA4BC,CAAC,GAAG,EAAhC;AAAA,gBAAoCC,CAAC,GAAG,CAAxC;AAAA,gBAA2CxH,CAAC,GAAG,CAA/C;AAAA,gBAAkDyH,CAAC,GAAG,CAAtD;AAAA,gBAAyDC,CAAC,GAAG,EAA7D;AAAA,gBAAiEE,CAAC,GAAG,EAArE;AAAA,gBAAyEC,CAAC,GAAG;AAAEC,iBAAG,EAAE1Z,CAAC,CAAC,CAAD,CAAR;AAAa2Z,sBAAQ,EAAE7B,CAAvB;AAA0B8B,mBAAK,EAAE;AAAjC,aAA7E;;AAAmH,iBAAKtS,CAAC,GAAG,CAAT,EAAY,IAAIA,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA0B6R,CAAC,CAAC7R,CAAD,CAAD,GAAOA,CAAP;;AAAU,iBAAKmN,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAX,EAA2BN,CAAC,GAAG,CAApC,EAAuCA,CAAC,IAAID,CAA5C,GAA+CD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwI,oBAAQpB,CAAC,GAAGpD,CAAZ;AAAiB,mBAAK,CAAL;AAAQ,qBAAKA,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAX,EAA2BN,CAAC,GAAG,CAApC,EAAuCA,CAAC,IAAID,CAA5C,GAA+CD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwIC,iBAAC,GAAG1E,CAAC,CAACC,CAAD,CAAL;AAAU;;AAAO,mBAAK,CAAL;AAAQ,qBAAKA,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAX,EAA4BN,CAAC,GAAG,CAArC,EAAwCA,CAAC,IAAID,CAA7C,GAAgDD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwIC,iBAAC,GAAG1E,CAAC,CAACC,CAAD,CAAL;AAAU;;AAAO,mBAAK,CAAL;AAAQ,uBAAO,EAAP;AAA1b;;AAAqc,iBAAK0E,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAP,EAAUX,CAAC,GAAGW,CAAd,EAAiBM,CAAC,CAAC9P,IAAF,CAAOwP,CAAP,CAAtB,IAAoC;AAAE,kBAAIO,CAAC,CAACG,KAAF,GAAUhC,CAAd,EAAiB,OAAO,EAAP;;AAAW,mBAAKnD,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYF,CAAZ,CAAX,EAA2BJ,CAAC,GAAG,CAApC,EAAuCA,CAAC,IAAID,CAA5C,GAA+CD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwI,sBAAQC,CAAC,GAAGzE,CAAZ;AAAiB,qBAAK,CAAL;AAAQ,uBAAKA,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAX,EAA2BN,CAAC,GAAG,CAApC,EAAuCA,CAAC,IAAID,CAA5C,GAA+CD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwIE,mBAAC,CAACvH,CAAC,EAAF,CAAD,GAAS4C,CAAC,CAACC,CAAD,CAAV,EAAeyE,CAAC,GAAGtH,CAAC,GAAG,CAAvB,EAA0BwH,CAAC,EAA3B;AAA+B;;AAAO,qBAAK,CAAL;AAAQ,uBAAK3E,CAAC,GAAG,CAAJ,EAAOuE,CAAC,GAAG1Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAX,EAA4BN,CAAC,GAAG,CAArC,EAAwCA,CAAC,IAAID,CAA7C,GAAgDD,CAAC,GAAGU,CAAC,CAACC,GAAF,GAAQD,CAAC,CAACE,QAAd,EAAwBF,CAAC,CAACE,QAAF,KAAe,CAAvC,EAA0C,KAAKF,CAAC,CAACE,QAAP,KAAoBF,CAAC,CAACE,QAAF,GAAa7B,CAAb,EAAgB2B,CAAC,CAACC,GAAF,GAAQ1Z,CAAC,CAACyZ,CAAC,CAACG,KAAF,EAAD,CAA7C,CAA1C,EAAqGnF,CAAC,IAAI,CAACsE,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAb,IAAkBE,CAA5H,EAA+HA,CAAC,KAAK,CAArI;;AAAwIE,mBAAC,CAACvH,CAAC,EAAF,CAAD,GAAS4C,CAAC,CAACC,CAAD,CAAV,EAAeyE,CAAC,GAAGtH,CAAC,GAAG,CAAvB,EAA0BwH,CAAC,EAA3B;AAA+B;;AAAO,qBAAK,CAAL;AAAQ,yBAAOI,CAAC,CAACb,IAAF,CAAO,EAAP,CAAP;AAApe;;AAAuf,kBAAI,KAAKS,CAAL,KAAWA,CAAC,GAAG9Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYF,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,GAAqCF,CAAC,CAACD,CAAD,CAA1C,EAA+CI,CAAC,GAAGH,CAAC,CAACD,CAAD,CAAL,CAA/C,KAA8D;AAAE,oBAAIA,CAAC,KAAKtH,CAAV,EAAa,OAAO,IAAP;AAAa0H,iBAAC,GAAGf,CAAC,GAAGA,CAAC,CAACR,MAAF,CAAS,CAAT,CAAR;AAAqB;AAACyB,eAAC,CAAC9P,IAAF,CAAO4P,CAAP,GAAWH,CAAC,CAACvH,CAAC,EAAF,CAAD,GAAS2G,CAAC,GAAGe,CAAC,CAACvB,MAAF,CAAS,CAAT,CAAxB,EAAqCqB,CAAC,EAAtC,EAA0Cb,CAAC,GAAGe,CAA9C,EAAiD,KAAKF,CAAL,KAAWA,CAAC,GAAG9Y,IAAI,CAACiZ,GAAL,CAAS,CAAT,EAAYF,CAAZ,CAAJ,EAAoBA,CAAC,EAAhC,CAAjD;AAAsF;AAAE;AAA37K,SAA3L;AAA0nL,eAAO/R,CAAP;AAAU,OAAxwL,EAAjB;;AAEA,UAAImQ,QAAJ,EAAcoC,WAAW,CAAClC,QAAQ,CAACF,QAAT,CAAkBrV,IAAlB,CAAD,CAAX,CAAd,KACK,IAAIsV,UAAJ,EAAgBmC,WAAW,CAAClC,QAAQ,CAACD,UAAT,CAAoBtV,IAApB,CAAD,CAAX;AACtB,KAbD;AAcD,GAfD;;AAiBA,QAAM0X,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoB,IAAIrE,IAAJ,CAClC,CAAC,GAAD,EAAM4B,cAAc,CAAC0C,QAAf,EAAN,EAAiC,KAAjC,CADkC,EAElC;AAAExa,QAAI,EAAE;AAAR,GAFkC,CAApB,CAAhB;AAKA,QAAMya,MAAM,GAAG,IAAIC,MAAJ,CAAWL,OAAX,CAAf;AAEAC,KAAG,CAACK,eAAJ,CAAoBN,OAApB;AACA,SAAOI,MAAP;AACD,CA3BD,C,CA6BA;;;AACO,MAAMzC,QAAQ,GAAG,MAAOrV,IAAP,IAAgB;AACtC,QAAM8X,MAAM,GAAG5C,SAAS,EAAxB;AACA,SAAO,IAAI3T,OAAJ,CAAahB,OAAD,IAAa;AAC9BuX,UAAM,CAAC1C,SAAP,GAAoBxX,CAAD,IAAO;AACxB2C,aAAO,CAAC3C,CAAC,CAACoC,IAAH,CAAP;AACA8X,YAAM,CAACG,SAAP;AACD,KAHD;;AAIAH,UAAM,CAACL,WAAP,CAAmB;AAAEpC,cAAQ,EAAE,IAAZ;AAAkBrV;AAAlB,KAAnB;AACD,GANM,CAAP;AAOD,CATM;AAWA,MAAMsV,UAAU,GAAG,MAAOtV,IAAP,IAAgB;AACxC,QAAM8X,MAAM,GAAG5C,SAAS,EAAxB;AACA,SAAO,IAAI3T,OAAJ,CAAahB,OAAD,IAAa;AAC9BuX,UAAM,CAAC1C,SAAP,GAAoBxX,CAAD,IAAO;AACxB2C,aAAO,CAAC3C,CAAC,CAACoC,IAAH,CAAP;AACA8X,YAAM,CAACG,SAAP;AACD,KAHD;;AAIAH,UAAM,CAACL,WAAP,CAAmB;AAAEnC,gBAAU,EAAE,IAAd;AAAoBtV;AAApB,KAAnB;AACD,GANM,CAAP;AAOD,CATM,C;;AC3CP;AACA;AAEA,MAAMkY,OAAO,GAAG,KAAK,IAArB;AAEO,MAAM5V,oBAAiB,GAAG,OAAO6V,MAAP,EAAeC,UAAf,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqDhW,KAArD,KAA+D;AAC9F,SAAO,IAAIhB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMF,GAAG,GAAG,IAAIkB,cAAJ,EAAZ;AAEA,UAAMC,MAAM,GAAG,MAAf;AACA,UAAMC,GAAG,GAAG,UAAGpD,UAAM,CAACa,WAAP,EAAH,iDAA8Db,UAAM,CAACE,mBAArE,0BACA2Z,MADA,8BAEIC,UAFJ,yBAGDC,KAHC,4BAIEC,QAJF,+BAKKC,OALL,CAAZ;AAOAjY,OAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBC,GAAjB;AACApB,OAAG,CAACuB,IAAJ,CAAS,IAAIiD,UAAJ,CAAevC,KAAf,CAAT,EAZsC,CAYN;;AAEhC7B,cAAU,CAACJ,GAAD,EAAMC,OAAN,EAAeC,MAAf,EAAuB0X,OAAvB,CAAV;AACD,GAfM,CAAP;AAgBD,CAjBM,C;;;;;;;;ACLP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMM,kBAAkB,GAAG,8BAA3B;AAEA,MAAMC,mBAAmB,GAAG,IAA5B;AACA,MAAMC,eAAe,GAAG,OAAO,EAA/B;AAEA,MAAMC,iBAAiB,GAAG,OAAO,GAAjC,C,CAAqC;;AACrC,MAAMC,uBAAuB,GAAG,EAAhC;AAEA,MAAMC,kBAAkB,GAAG,KAAK,IAAhC;AAEA,MAAMC,QAAQ,GAAGC,YAAM,EAAvB,C,CAA0B;;AAE1B,MAAMC,gBAAN,SAA4BvmB,KAA5B,CAAkC;AAChCC,aAAW,CAACumB,MAAD,EAASrb,CAAT,EAAY,GAAGjL,MAAf,EAAuB;AAChC,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,4BAA8BqmB,MAA9B;AACA,SAAKpmB,OAAL,GAAe+K,CAAC,CAAC/K,OAAjB;AACA,SAAKC,MAAL,GAAc8K,CAAC,CAAC9K,MAAF,IAAa8K,CAAC,CAAC/K,OAAF,KAAc,SAAd,IAA2BE,WAAW,CAAC,iBAAD,CAAjE;AACA,SAAKmN,QAAL,GAAgBtC,CAAC,CAAC9K,MAAF,IAAY8K,CAA5B;AACD;;AAR+B;;AAWlC,MAAMsb,cAAN,SAA6BzmB,KAA7B,CAAmC;AACjCC,aAAW,CAACG,OAAD,EAAUsB,QAAV,EAAoByJ,CAApB,EAAuB,GAAGjL,MAA1B,EAAkC;AAC3C,UAAM,GAAGA,MAAT;AAEA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKsB,QAAL,GAAgBA,QAAhB;AACA,SAAKyJ,CAAL,GAASA,CAAT;AACD;;AARgC;;AAWnC,MAAMub,aAAN,CAAiB;AACfzmB,aAAW,GAAG;AACZ,SAAK0mB,IAAL;AACD;;AAEDA,MAAI,CAACC,iBAAD,EAAoBC,gBAApB,EAAsCnW,OAAtC,EAA+Ca,UAA/C,EAA2DjB,UAA3D,EAAuEwW,cAAvE,EAAuFC,KAAvF,EAA8FC,cAA9F,EAA8G;AAChH,QAAI,KAAKC,WAAT,EAAsBC,YAAY,CAAC,KAAKD,WAAN,CAAZ;;AAEtB,SAAK,MAAMrF,QAAX,IAAuB1e,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAvB,EAA0C;AACxC,aAAO,KAAKye,QAAL,CAAP;AACD;;AAED,SAAKuF,EAAL,GAAU,IAAV;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA,SAAKR,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKQ,kBAAL,GAA0B,KAA1B;AAEA,SAAK3W,OAAL,GAAe;AACbhP,cAAQ,EAAEgP,OAAO,IAAIA,OAAO,CAAChP,QADhB;AAEb+N,eAAS,EAAEiB,OAAO,IAAIA,OAAO,CAACjB,SAFjB;AAGbe,kBAAY,EAAEE,OAAO,IAAIA,OAAO,CAACF,YAHpB;AAIbC,oBAAc,EAAEC,OAAO,IAAIA,OAAO,CAACD,cAJtB;AAKbiV,YAAM,EAAEhV,OAAO,IAAIA,OAAO,CAACgV,MALd;AAMb4B,eAAS,EAAE5W,OAAO,IAAIA,OAAO,CAAC4W;AANjB,KAAf;AASA,SAAK/V,UAAL,GAAkBA,UAAlB;AACA,SAAKuV,cAAL,GAAsBA,cAAtB;AACA,SAAK3jB,IAAL,GAAY;AACVwjB,UAAI,EAAE,KADI;AAEVY,WAAK,EAAE;AAFG,KAAZ;AAKA,SAAKC,QAAL,GAAgB;AACdC,gBAAU,EAAE;AADE,KAAhB;AAIA,SAAKnX,UAAL,GAAkBA,UAAlB;AAEA,SAAKoX,QAAL,GAAgB,EAAhB;AAEA,SAAKX,KAAL,GAAaA,KAAK,IAAI;AACpBY,kBAAY,EAAE,EADM;AAEpBC,eAAS,EAAE,EAFS;AAEL;AACfC,qBAAe,EAAE,EAHG;AAGC;AACrBC,wBAAkB,EAAE,EAJA,CAII;;AAJJ,KAAtB;AAOA,SAAKd,cAAL,GAAsBA,cAAtB;AACD;;AAEDe,SAAO,CAACrX,OAAD,EAAUa,UAAU,GAAG,IAAvB,EAA6BjB,UAA7B,EAAyCwW,cAAzC,EAAyDkB,cAAzD,EAAyEjB,KAAzE,EAAgF;AACrF,QAAI,KAAKK,SAAT,EAAoB,MAAM,IAAIX,cAAJ,CAAmBV,kBAAnB,EAAuC,KAAKrV,OAAL,CAAahP,QAApD,CAAN;AAEpB,WAAO,IAAIoN,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIJ,OAAO,GAAG,KAAd;AAEA,YAAMsa,sBAAsB,GAAGC,UAAU,CACvC,MAAM;AACJ,YAAI,CAAC,KAAKd,SAAN,IAAmB,CAAC,KAAKe,YAA7B,EAA2C;AACzCxa,iBAAO,GAAG,IAAV;AACAI,gBAAM,CAAC,IAAI0Y,cAAJ,CAAmB,SAAnB,CAAD,CAAN;AACD;AACF,OANsC,EAOvC,KAPuC,CAAzC;AAUA,YAAMxX,GAAG,aAAMoS,QAAQ,CAACxV,UAAM,CAACa,WAAP,EAAD,CAAd,wBAAkDb,UAAM,CAACU,QAAP,EAAlD,wBAAiFmE,OAAO,CAACjB,SAAzF,uBAA+G4W,QAA/G,gCAA6Ixa,UAAM,CAACE,mBAApJ,CAAT;AAEA,YAAMob,EAAE,GAAG,IAAIiB,SAAJ,CAAcnZ,GAAd,CAAX;;AAEAkY,QAAE,CAACkB,MAAH,GAAY,YAAY;AACtB,YAAI1a,OAAJ,EAAa;AACbuZ,oBAAY,CAACe,sBAAD,CAAZ;AACD,OAHD;;AAKAd,QAAE,CAACxE,SAAH,GAAe,MAAOxX,CAAP,IAAa;AAC1B,YAAIwC,OAAJ,EAAa;;AAEb,YAAI;AACF,gBAAMvN,OAAO,GAAG4C,IAAI,CAACgL,KAAL,CAAW7C,CAAC,CAACoC,IAAb,CAAhB;AACA,gBAAM+a,KAAK,GAAGloB,OAAO,CAACkoB,KAAtB;;AAEA,kBAAQA,KAAR;AACE,iBAAK,MAAL;AAAa;AACX,qBAAKC,SAAL;AAEA,sBAAM/B,MAAM,GAAG,MAAf;AACA,qBAAKW,EAAL,CAAQ/X,IAAR,CAAapM,IAAI,CAACC,SAAL,CAAe;AAAEujB;AAAF,iBAAf,CAAb;AACA;AACD;;AAED,iBAAK,YAAL;AAAmB;AACjB,sBAAM;AAAEQ;AAAF,oBAAqB5mB,OAA3B;AACA,qBAAKumB,IAAL,CAAU7Y,OAAV,EAAmBC,MAAnB,EAA2B2C,OAA3B,EAAoCa,UAApC,EAAgDjB,UAAhD,EAA4DwW,cAA5D,EAA4EC,KAA5E,EAAmFC,cAAnF;AACA,qBAAKG,EAAL,GAAUA,EAAV;AACA,qBAAKoB,SAAL;AACA,qBAAKnB,SAAL,GAAiB,IAAjB,CALiB,CAOjB;;AACA,oBAAI7V,UAAJ,EAAgB;AACd,wBAAM;AACJ9C,4BADI;AAEJ+Z,qCAFI;AAGJja,6BAHI;AAIJka;AAJI,sBAKFroB,OALJ;AAOA,uBAAK+C,IAAL,CAAUokB,KAAV,GAAkB9Y,QAAlB;AAEA,uBAAK+Z,iBAAL,GAAyBA,iBAAzB;AACA,uBAAKja,SAAL,GAAiBA,SAAjB,CAXc,CAad;AACA;;AACA,sBAAIka,0BAAJ,EAAgC,KAAKA,0BAAL,GAAkC,IAAIpW,UAAJ,CAAeoW,0BAA0B,CAAClb,IAA1C,CAAlC;;AAEhC,sBAAI;AACF,0BAAM,KAAKmb,OAAL,CAAa,KAAKnX,UAAlB,CAAN;AACA,0BAAMiW,QAAQ,GAAG,MAAM,KAAKmB,WAAL,EAAvB;AACA,yBAAKnB,QAAL,GAAgBA,QAAhB;AACD,mBAJD,CAIE,OAAOrc,CAAP,EAAU;AACV,wBAAKA,CAAC,IAAIA,CAAC,CAAChL,IAAF,KAAW,gBAAjB,IAAsCgL,CAAC,YAAYyd,YAAvD,EAAqE,MAAM,IAAI5oB,KAAJ,CAAU,cAAV,CAAN,CAArE,KACK,MAAMmL,CAAN;AACN;;AAED,uBAAKhI,IAAL,CAAUwjB,IAAV,GAAiB,IAAjB;AACD;;AAED,qBAAKC,iBAAL;AACA,qBAAKS,kBAAL,GAA0B,IAA1B;AACA;AACD;;AAED,iBAAK,mBAAL;AAA0B;AACxB,sBAAMwB,IAAI,GAAGzoB,OAAO,CAACyoB,IAArB;AACA,sBAAMC,UAAU,GAAG1oB,OAAO,CAAC0oB,UAA3B,CAFwB,CAIxB;;AACA,sBAAMC,QAAQ,GAAG3oB,OAAO,CAAC4oB,OAAR,GACb,KAAKjC,KAAL,CAAWa,SAAX,CAAqBkB,UAArB,CADa,GAEb,KAAK/B,KAAL,CAAWc,eAAX,CAA2BgB,IAA3B,CAFJ;AAIA,oBAAI,CAACE,QAAL,EAAe,MAAM,IAAI/oB,KAAJ,CAAU,kBAAV,CAAN,CATS,CAWxB;;AACA,oBAAI+oB,QAAQ,CAACE,sBAAT,CAAgC7G,OAAhC,EAAJ,EAA+C;AAE7C;AACA2G,0BAAQ,CAACE,sBAAT,CAAgC5G,OAAhC,CAAwC,IAAxC;AACD,iBAJD,MAIO;AAEL;AACA,wBAAM,IAAIvT,OAAJ,CAAYhB,OAAO,IAAI;AAC3B,0BAAMob,oCAAoC,GAAGpb,OAA7C;AACAib,4BAAQ,CAACE,sBAAT,CAAgC5G,OAAhC,CAAwC6G,oCAAxC;AACD,mBAHK,CAAN;AAID;;AAED,sBAAMC,eAAe,GAAI/oB,OAAO,CAAC0oB,UAAR,KAAuB1oB,OAAO,CAACgpB,KAAR,IAAiBhpB,OAAO,CAACipB,cAAhD,CAAD,IAAqEjpB,OAAO,CAACkpB,wBAArG;;AACA,oBAAIH,eAAe,KAAK,CAACJ,QAAQ,CAACQ,WAAV,IAAyB,CAACR,QAAQ,CAACK,KAAxC,CAAnB,EAAmE;AACjE,wBAAMG,WAAW,GAAGnpB,OAAO,CAACipB,cAAR,KAA2BjpB,OAAO,CAACgpB,KAAR,GAC3C,MAAMnU,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4B,KAAKzW,IAAL,CAAUmV,aAAtC,EAAqDlY,OAAO,CAACgpB,KAA7D,CADqC,GAE3C,MAAML,QAAQ,CAACS,+BAAT,CAAyCppB,OAAO,CAACkpB,wBAAjD,EAA2ElpB,OAAO,CAACqpB,2BAAnF,CAFU,CAApB;AAIAV,0BAAQ,CAACQ,WAAT,GAAuBA,WAAvB;AACAR,0BAAQ,CAACK,KAAT,GAAiB,MAAMnU,MAAM,CAACoG,MAAP,CAAcvC,mBAAd,CAAkCyQ,WAAlC,CAAvB;AACD;;AAED,oBAAI,CAACR,QAAQ,CAACK,KAAd,EAAqB,MAAM,IAAIppB,KAAJ,CAAU,gBAAV,CAAN;;AAErB,oBAAII,OAAO,CAACspB,OAAZ,EAAqB;AACnBX,0BAAQ,CAACY,kBAAT,GAA8B,IAA9B;;AACA,uBAAK,MAAM;AAAEjE,0BAAF;AAAUhkB;AAAV,mBAAX,IAAmCtB,OAAO,CAACspB,OAA3C,EAAoD;AAClDX,4BAAQ,CAACa,iBAAT,CAA2BpW,GAA3B,CAA+BkS,MAA/B,EAAuChkB,QAAvC;AACD;AACF,iBA1CuB,CA4CxB;;;AACA,oBAAItB,OAAO,CAACypB,iBAAZ,EAA+B;AAC7B,sBAAI,CAACd,QAAQ,CAACe,wBAAd,EAAwC;AACtC,0BAAM,IAAIhb,OAAJ,CAAYhB,OAAO,IAAIib,QAAQ,CAACe,wBAAT,GAAoChc,OAA3D,CAAN;AACD,mBAH4B,CAK7B;;;AACA,sBAAI;AACF,0BAAMic,MAAM,GAAG,MAAM,KAAKC,aAAL,CAAmBjB,QAAnB,EAA6B3oB,OAAO,CAAC6pB,WAArC,EAAkD7pB,OAAO,CAAC8pB,4BAA1D,CAArB;AACA,0BAAMnB,QAAQ,CAACoB,WAAT,CAAqBJ,MAArB,EAA6B3pB,OAAO,CAAC6pB,WAArC,CAAN;AACD,mBAHD,CAGE,OAAO9e,CAAP,EAAU;AACVwB,0BAAM,CAACyd,KAAP,CAAa,6FAAsFvB,IAAtF,cAAqG1d,CAAlH;AACA,0BAAMA,CAAN;AACD;AACF;;AAED,sBAAMkf,eAAe,GAAGjqB,OAAO,CAACkqB,cAAhC;AACA,sBAAMvB,QAAQ,CAACwB,iBAAT,CAA2BF,eAA3B,EAA4CjqB,OAAO,CAACoqB,OAApD,EAA6D3B,IAA7D,EAAmEC,UAAnE,CAAN;;AAEA,oBAAI1oB,OAAO,CAACqqB,WAAZ,EAAyB;AACvB,uBAAKA,WAAL,CAAiB1B,QAAjB;AACD,iBAjEuB,CAmExB;;;AACAA,wBAAQ,CAACE,sBAAT,CAAgC1G,OAAhC;;AACA,oBAAI,CAACwG,QAAQ,CAACE,sBAAT,CAAgC7G,OAAhC,EAAL,EAAgD;AAC9C,wBAAMsI,6BAA6B,GAAG3B,QAAQ,CAACE,sBAAT,CAAgCzG,IAAhC,EAAtC;AACAkI,+CAA6B;AAC9B;;AAED;AACD;;AAED,iBAAK,qBAAL;AAA4B;AAC1B,sBAAM;AAAE7B,sBAAF;AAAQC,4BAAR;AAAoBE,yBAApB;AAA6BiB,6BAA7B;AAA0CU,8BAA1C;AAAwDC,6BAAxD;AAAqE9a;AAArE,oBAA+E1P,OAArF,CAD0B,CAG1B;;AACA,sBAAM2oB,QAAQ,GAAGC,OAAO,GACpB,KAAKjC,KAAL,CAAWa,SAAX,CAAqBkB,UAArB,CADoB,GAEpB,KAAK/B,KAAL,CAAWc,eAAX,CAA2BgB,IAA3B,CAFJ;AAIA,oBAAI,CAACE,QAAL,EAAe,MAAM,IAAI/oB,KAAJ,CAAU,kBAAV,CAAN,CARW,CAU1B;;AACA,oBAAI2qB,YAAJ,EAAkB5B,QAAQ,CAAC8B,YAAT,CAAsBZ,WAAtB,IAAqC,EAArC;AAElBlB,wBAAQ,CAAC8B,YAAT,CAAsBZ,WAAtB,EAAmCpV,IAAnC,CAAwC/E,KAAxC;;AAEA,oBAAI8a,WAAJ,EAAiB;AACf,sBAAI7B,QAAQ,CAACe,wBAAb,EAAuCf,QAAQ,CAACe,wBAAT,GAAvC,KACKf,QAAQ,CAACe,wBAAT,GAAoC,IAApC;AACN;;AAED;AACD;;AAED,iBAAK,aAAL;AAAoB;AAClB,qBAAKgB,gBAAL,CAAsB1qB,OAAO,CAAC2qB,WAA9B;AACA;AACD;;AAED,iBAAK,SAAL;AACA,iBAAK,YAAL;AACA,iBAAK,YAAL;AACA,iBAAK,gBAAL;AACA,iBAAK,cAAL;AACA,iBAAK,0BAAL;AACA,iBAAK,cAAL;AACA,iBAAK,kBAAL;AACA,iBAAK,QAAL;AACA,iBAAK,QAAL;AACA,iBAAK,QAAL;AACA,iBAAK,kBAAL;AACA,iBAAK,kBAAL;AACA,iBAAK,sBAAL;AACA,iBAAK,gBAAL;AACA,iBAAK,iBAAL;AACA,iBAAK,oBAAL;AACA,iBAAK,UAAL;AACA,iBAAK,aAAL;AACA,iBAAK,kBAAL;AACA,iBAAK,sBAAL;AACA,iBAAK,oBAAL;AACA,iBAAK,oBAAL;AACA,iBAAK,qBAAL;AACA,iBAAK,eAAL;AACA,iBAAK,oBAAL;AACA,iBAAK,wBAAL;AACA,iBAAK,cAAL;AACA,iBAAK,2BAAL;AACA,iBAAK,YAAL;AACE;AACE,sBAAMC,SAAS,GAAG5qB,OAAO,CAAC4qB,SAA1B;AAEA,oBAAI,CAACA,SAAL,EAAgB,OAAO5f,OAAO,CAAC+E,IAAR,CAAa,oBAAb,CAAP;AAEhB,sBAAM8a,OAAO,GAAG,KAAKvD,QAAL,CAAcsD,SAAd,CAAhB;AACA,oBAAI,CAACC,OAAL,EAAc,OAAO7f,OAAO,CAAC+E,IAAR,mBAAwB6a,SAAxB,wBAAP,CAAd,KACK,IAAI,CAACC,OAAO,CAACC,cAAT,IAA2B,CAACD,OAAO,CAACE,aAAxC,EAAuD;AAE5D,sBAAM1d,QAAQ,GAAGrN,OAAO,CAACqN,QAAzB;AAEA,sBAAM2d,kBAAkB,GAAG3d,QAAQ,IAAIA,QAAQ,CAACpN,MAAT,KAAoBC,WAAW,CAAC,SAAD,CAAtE;AAEA,oBAAI,CAAC8qB,kBAAL,EAAyB,OAAOH,OAAO,CAACE,aAAR,CAAsB1d,QAAtB,CAAP,CAAzB,KACK,OAAOwd,OAAO,CAACC,cAAR,CAAuBzd,QAAvB,CAAP;AACN;;AAEH;AAAS;AACPrC,uBAAO,CAACigB,GAAR,CAAY,2CAA2CroB,IAAI,CAACC,SAAL,CAAe7C,OAAf,CAAvD;AACA;AACD;AA9MH;AAgND,SApND,CAoNE,OAAO+K,CAAP,EAAU;AACV,cAAI,CAAC,KAAKkc,kBAAV,EAA8B;AAC5B,iBAAKiE,KAAL;AACAvd,kBAAM,CAAC,IAAI0Y,cAAJ,CAAmBtb,CAAC,CAAC/K,OAArB,EAA8BsQ,OAAO,CAAChP,QAAtC,EAAgDyJ,CAAhD,CAAD,CAAN;AACD,WAHD,MAGO;AACLC,mBAAO,CAAC+E,IAAR,CAAa,0BAAb,EAAyChF,CAAzC;AACD;AACF;AACF,OA/ND;;AAiOAgc,QAAE,CAACoE,OAAH,GAAa,MAAOpgB,CAAP,IAAa;AACxB,YAAIwC,OAAJ,EAAa;AAEb,cAAM6d,cAAc,GAAGrgB,CAAC,CAACsgB,IAAF,KAAWnrB,WAAW,CAAC,iBAAD,CAA7C;AACA,cAAMorB,kBAAkB,GAAGvgB,CAAC,CAACsgB,IAAF,KAAWnrB,WAAW,CAAC,kBAAD,CAAjD;AACA,cAAMqrB,kBAAkB,GAAGH,cAAc,IAAIE,kBAAlB,IAAwC,CAACvgB,CAAC,CAACygB,QAAtE,CALwB,CAKuD;;AAE/E,YAAID,kBAAJ,EAAwB;AACtB,gBAAMxqB,KAAK,GAAIqqB,cAAc,IAAI,CAACxD,cAApB,GACV,CADU,GAETA,cAAc,GAAGA,cAAc,GAAGhC,mBAApB,GAA0C,IAF7D;AAIA,eAAKmC,YAAL,GAAoB,IAApB;AACA,gBAAM,KAAK0D,SAAL,CAAe/d,OAAf,EAAwBC,MAAxB,EAAgC2C,OAAhC,EAAyC,KAAKa,UAAL,IAAmBA,UAA5D,EAAwEjB,UAAxE,EAAoFwW,cAApF,EAAoG3lB,KAApG,EAA2G,CAAC,KAAK2qB,WAAN,IAAqB/E,KAAhI,CAAN;AACD,SAPD,MAOO,IAAI5b,CAAC,CAACsgB,IAAF,KAAWnrB,WAAW,CAAC,0BAAD,CAA1B,EAAwD;AAC7DyN,gBAAM,CAAC,IAAI0Y,cAAJ,CAAmBV,kBAAnB,EAAuCrV,OAAO,CAAChP,QAA/C,EAAyDyJ,CAAzD,CAAD,CAAN;AACD,SAFM,MAEA;AACL,eAAKwb,IAAL;AACD;AACF,OAnBD;;AAqBAQ,QAAE,CAAChZ,OAAH,GAAa,MAAM,CAAG,CAAtB,CA5QsC,CA4Qf;;AACxB,KA7QM,CAAP;AA8QD;;AAED,QAAM0d,SAAN,CAAgBjF,iBAAhB,EAAmCC,gBAAnC,EAAqDnW,OAArD,EAA8Da,UAA9D,EAA0EjB,UAA1E,EAAsFwW,cAAtF,EAAsGkB,cAAtG,EAAsH+D,YAAtH,EAAoI;AAClI,QAAI;AACF,YAAMxgB,UAAU,GAAGE,IAAI,CAACugB,GAAL,CAAShE,cAAT,EAAyB/B,eAAzB,CAAnB;AACA7a,aAAO,CAACigB,GAAR,iEAAqE9f,UAAU,GAAG,IAAlF,oBAAgGA,UAAU,KAAK,IAAf,GAAsB,GAAtB,GAA4B,EAA5H;AAEA,YAAM0gB,WAAW,GAAG,EAApB;AACA,YAAMC,eAAe,GAAG,EAAxB,CALE,CAOF;;AACAtF,uBAAiB,CAAC,MAAM,IAAI9X,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqBma,UAAU,CACjE,YAAY;AACV,YAAI;AACF;AACA,gBAAMnB,KAAK,GAAGgF,YAAY,IAAI;AAC5BpE,wBAAY,EAAE,oBAAK,KAAKZ,KAAL,CAAWY,YAAlB,CADgB;AAE5BC,qBAAS,EAAE,oBAAK,KAAKb,KAAL,CAAWa,SAAlB,CAFmB;AAG5BC,2BAAe,EAAE,oBAAK,KAAKd,KAAL,CAAWc,eAAlB,CAHa;AAI5BC,8BAAkB,EAAE,oBAAK,KAAKf,KAAL,CAAWe,kBAAlB;AAJU,WAA9B,CAFE,CASF;;AACA,eAAK,MAAMgB,UAAX,IAAyB/B,KAAK,CAACa,SAA/B,EAA0C;AACxCb,iBAAK,CAACa,SAAN,CAAgBkB,UAAhB,EAA4BnC,IAA5B,GAAmC,KAAnC;AACAI,iBAAK,CAACa,SAAN,CAAgBkB,UAAhB,EAA4BgB,wBAA5B,GAAuD,KAAvD;AACAmC,uBAAW,CAACpX,IAAZ,CAAiBiU,UAAjB;AACD;;AAED,eAAK,MAAMD,IAAX,IAAmB9B,KAAK,CAACc,eAAzB,EAA0C;AACxCd,iBAAK,CAACc,eAAN,CAAsBgB,IAAtB,EAA4BlC,IAA5B,GAAmC,KAAnC;AACAI,iBAAK,CAACc,eAAN,CAAsBgB,IAAtB,EAA4BiB,wBAA5B,GAAuD,KAAvD;AACAoC,2BAAe,CAACrX,IAAhB,CAAqBgU,IAArB;AACD;;AAED,eAAKlC,IAAL;AACA,eAAKwB,YAAL,GAAoB,IAApB;AAEA,gBAAM5V,MAAM,GAAG,MAAM,KAAKwV,OAAL,CAAarX,OAAb,EAAsBa,UAAtB,EAAkCjB,UAAlC,EAA8CwW,cAA9C,EAA8DkB,cAA9D,EAA8EjB,KAA9E,CAArB;AAEA,eAAK+E,WAAL,GAAmB,IAAnB,CA3BE,CA6BF;;AACA,cAAI,CAACC,YAAL,EAAmB;AACjB,kBAAM,KAAKI,eAAL,CAAqBF,WAArB,EAAkCC,eAAlC,EAAmD,IAAnD,CAAN;AACA9gB,mBAAO,CAACigB,GAAR,CAAY,cAAZ;AACD;;AAEDvd,iBAAO,CAACyE,MAAD,CAAP;AACD,SApCD,CAoCE,OAAOpH,CAAP,EAAU;AACV4C,gBAAM,CAAC5C,CAAD,CAAN;AACD;AACF,OAzCgE,EA0CjEI,UA1CiE,CAA3C,CAAP,CAAjB;AA4CD,KApDD,CAoDE,OAAOJ,CAAP,EAAU;AACV0b,sBAAgB,CAAC1b,CAAD,CAAhB;AACD;AACF;;AAED,QAAMghB,eAAN,CAAsBF,WAAtB,EAAmCC,eAAnC,EAAoD3gB,UAApD,EAAgE;AAC9D,QAAI;AACF,YAAM6gB,oBAAoB,GAAG,EAA7B,CADE,CAGF;;AACA,WAAK,MAAMtD,UAAX,IAAyBmD,WAAzB,EAAsC;AACpC,cAAMlD,QAAQ,GAAG,KAAKhC,KAAL,CAAWa,SAAX,CAAqBkB,UAArB,CAAjB;;AAEA,YAAI,CAACC,QAAQ,CAACpC,IAAd,EAAoB;AAClB,gBAAMH,MAAM,GAAG,cAAf;AACA,gBAAMtmB,MAAM,GAAG;AAAE4oB,sBAAF;AAAcuD,yBAAa,EAAEtD,QAAQ,CAACuD;AAAtC,WAAf;AACAF,8BAAoB,CAACvX,IAArB,CAA0B,KAAKoW,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAA1B;AACD;AACF,OAZC,CAcF;;;AACA,WAAK,MAAMylB,UAAX,IAAyBuG,eAAzB,EAA0C;AACxC,cAAMnD,QAAQ,GAAG,KAAKhC,KAAL,CAAWc,eAAX,CAA2BlC,UAA3B,CAAjB;;AAEA,YAAI,CAACoD,QAAQ,CAACpC,IAAd,EAAoB;AAClB,gBAAM4F,iBAAiB,GAAGxD,QAAQ,CAACwD,iBAAnC,CADkB,CAGlB;;AACA,gBAAMC,kBAAkB,GAAGD,iBAAiB,GACxC,MAAM,KAAKE,sBAAL,CAA4B1D,QAAQ,CAAC2D,YAArC,EAAmDH,iBAAnD,CADkC,GAExC,EAFJ;AAIA,gBAAM/F,MAAM,GAAG,0BAAf;;AACA,gBAAMtmB,MAAM,GAAG;AAAEylB,sBAAL;AAAiB0G,yBAAa,EAAEtD,QAAQ,CAACuD;AAAzC,aAAuDE,kBAAvD,CAAZ;;AACAJ,8BAAoB,CAACvX,IAArB,CAA0B,KAAKoW,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAA1B;AACD;AACF;;AAED,YAAM4O,OAAO,CAAC6d,GAAR,CAAYP,oBAAZ,CAAN;AACD,KAjCD,CAiCE,OAAOjhB,CAAP,EAAU;AAEV;AACA,YAAM,IAAI2D,OAAJ,CAAYhB,OAAO,IAAIoa,UAAU,CACrC,YAAY;AACV,cAAM,KAAKiE,eAAL,CAAqBF,WAArB,EAAkCC,eAAlC,EAAmD3gB,UAAU,GAAGya,mBAAhE,CAAN;AACAlY,eAAO;AACR,OAJoC,EAKrCrC,IAAI,CAACugB,GAAL,CAASzgB,UAAT,EAAqB0a,eAArB,CALqC,CAAjC,CAAN;AAOD;AACF;;AAEDsC,WAAS,GAAG;AACVrB,gBAAY,CAAC,KAAKD,WAAN,CAAZ;AAEA,UAAM2F,cAAc,GAAG,IAAvB;AAEA,SAAK3F,WAAL,GAAmBiB,UAAU,CAAC,MAAM;AAClC,UAAI,KAAKf,EAAT,EAAa,KAAKA,EAAL,CAAQmE,KAAR,CAAchrB,WAAW,CAAC,kBAAD,CAAzB;AACd,KAF4B,EAE1B,QAAQssB,cAFkB,CAA7B;AAGD;;AAEDtB,OAAK,CAACG,IAAD,EAAO;AACV,SAAKtE,EAAL,GACI,KAAKA,EAAL,CAAQmE,KAAR,CAAcG,IAAd,CADJ,GAEI,KAAK9E,IAAL,EAFJ;AAGD;;AAED,QAAMkG,OAAN,GAAgB;AACd,UAAMnrB,QAAQ,GAAG,KAAKgP,OAAL,CAAahP,QAA9B;AACA,UAAM2lB,kBAAkB,GAAG,KAAKA,kBAAhC;AACA,UAAMR,gBAAgB,GAAG,KAAKA,gBAA9B;;AAEA,QAAI;AACFiG,eAAS,CAACjb,cAAV,CAAyB,KAAKvB,UAA9B,EAA0C5O,QAA1C;AAEA,YAAM+N,SAAS,GAAG,KAAKiB,OAAL,CAAajB,SAA/B;AAEA,UAAI,KAAK0Y,YAAT,EAAuB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AAEvB,YAAMub,MAAM,GAAG,SAAf;AACA,YAAMtmB,MAAM,GAAG;AAAEuP;AAAF,OAAf;AACA,YAAM,KAAKwb,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAAN;AAEA,WAAKorB,KAAL;;AAEA,UAAI,CAACjE,kBAAD,IAAuBR,gBAA3B,EAA6C;AAC3CA,wBAAgB,CAAC,IAAIJ,cAAJ,CAAmB,UAAnB,EAA+B/kB,QAA/B,CAAD,CAAhB;AACD;AAEF,KAjBD,CAiBE,OAAOyJ,CAAP,EAAU;AACV,UAAI,CAACkc,kBAAD,IAAuBR,gBAA3B,EAA6C;AAC3CA,wBAAgB,CAAC,IAAIJ,cAAJ,CAAmB,UAAnB,EAA+B/kB,QAA/B,CAAD,CAAhB;AACD;;AAED,YAAMyJ,CAAN;AACD;AACF;;AAED,QAAMud,OAAN,CAAcnX,UAAd,EAA0B;AACxB,QAAI,KAAKpO,IAAL,CAAUwjB,IAAd,EAAoB;AACpB,QAAI,CAACpV,UAAL,EAAiB,MAAM,IAAIkV,cAAJ,CAAmB,cAAnB,EAAmC,KAAK/V,OAAL,CAAahP,QAAhD,CAAN;AACjB,QAAI,CAAC,KAAKyB,IAAL,CAAUokB,KAAf,EAAsB,MAAM,IAAId,cAAJ,CAAmB,eAAnB,EAAoC,KAAK/V,OAAL,CAAahP,QAAjD,CAAN;AACtB,QAAI,CAAC,KAAK6P,UAAV,EAAsB,KAAKA,UAAL,GAAkBA,UAAlB;AAEtB,UAAMwE,IAAI,GAAGT,qCAAM,CAACC,MAAP,CAAchE,UAAd,CAAb;AACA,UAAM6G,SAAS,GAAG,MAAMnD,MAAM,CAACuD,IAAP,CAAYvC,aAAZ,CAA0BF,IAA1B,CAAxB;AAEA,UAAMwR,KAAK,GAAG,KAAKpkB,IAAL,CAAUokB,KAAxB;AACA,SAAKpkB,IAAL,CAAUmV,aAAV,GAA0B,MAAMrD,MAAM,CAACoG,MAAP,CAAclD,mBAAd,CAAkCC,SAAlC,EAA6C9C,qCAAM,CAACC,MAAP,CAAcgS,KAAK,CAACwF,iBAApB,CAA7C,CAAhC;AACA,SAAK5pB,IAAL,CAAUoc,OAAV,GAAoB,MAAMtK,MAAM,CAACuL,IAAP,CAAYrI,mBAAZ,CAAgCC,SAAhC,EAA2C9C,qCAAM,CAACC,MAAP,CAAcgS,KAAK,CAACyF,WAApB,CAA3C,CAA1B;;AAEA,QAAIzF,KAAK,CAACnK,yBAAV,EAAqC;AACnC,YAAMC,qBAAqB,GAAG,MAAMpI,MAAM,CAAC4J,KAAP,CAAa5B,qCAAb,CAAmD7E,SAAnD,EAA8D9C,qCAAM,CAACC,MAAP,CAAcgS,KAAK,CAACnK,yBAApB,CAA9D,CAApC;AACA,YAAMG,wBAAwB,GAAGjI,qCAAM,CAACC,MAAP,CAAc,KAAKhH,SAAL,CAAegP,wBAA7B,CAAjC;AACA,YAAM0P,kBAAkB,GAAG,MAAMhY,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB4D,qBAAtB,EAA6CE,wBAA7C,CAAjC;AACA,WAAKpa,IAAL,CAAUqa,eAAV,GAA4B,MAAMvI,MAAM,CAAC4J,KAAP,CAAatC,8BAAb,CAA4C0Q,kBAA5C,CAAlC;AAEA,YAAMzO,oBAAoB,GAAG,MAAMvJ,MAAM,CAACsL,IAAP,CAAYnC,oCAAZ,CAAiDhG,SAAjD,EAA4D9C,qCAAM,CAACC,MAAP,CAAcgS,KAAK,CAAChJ,wBAApB,CAA5D,CAAnC;AACA,YAAMG,uBAAuB,GAAGpJ,qCAAM,CAACC,MAAP,CAAc,KAAKhH,SAAL,CAAemQ,uBAA7B,CAAhC;AACA,YAAMwO,iBAAiB,GAAG,MAAMjY,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB+E,oBAAtB,EAA4CE,uBAA5C,CAAhC;AACA,WAAKvb,IAAL,CAAU2b,cAAV,GAA2B,MAAM7J,MAAM,CAACsL,IAAP,CAAYhE,8BAAZ,CAA2C2Q,iBAA3C,CAAjC;AACD,KAVD,MAUO,IAAI3F,KAAK,CAAC4F,SAAV,EAAqB;AAE1B;AACA,WAAKhqB,IAAL,CAAUiqB,YAAV,GAAyB,MAAMnY,MAAM,CAACwF,aAAP,CAAqBtC,mBAArB,CAAyCC,SAAzC,EAAoD9C,qCAAM,CAACC,MAAP,CAAcgS,KAAK,CAAC4F,SAApB,CAApD,CAA/B;AACD;;AAED,QAAI5F,KAAK,CAAC4F,SAAN,IAAmB5F,KAAK,CAAC8F,mBAA7B,EAAkD;AAEhD;AACA,YAAMC,YAAY,GAAG,MAAMrY,MAAM,CAAC4J,KAAP,CAAa3B,oBAAb,CAAkC9E,SAAlC,CAA3B;AACA,YAAMmV,WAAW,GAAG,MAAMtY,MAAM,CAACsL,IAAP,CAAYlC,mBAAZ,CAAgCjG,SAAhC,EAA2CkV,YAAY,CAAC9P,eAAxD,CAA1B;AAEA,WAAKra,IAAL,CAAUqa,eAAV,GAA4B8P,YAAY,CAAC9P,eAAzC;AACA,WAAKra,IAAL,CAAU2b,cAAV,GAA2ByO,WAAW,CAACzO,cAAvC;AAEA,aAAOwO,YAAY,CAAC9P,eAApB;AACA,aAAO+P,WAAW,CAACzO,cAAnB;AAEA,WAAK0O,YAAL,GAAoB;AAClBF,oBADkB;AAElBC;AAFkB,OAApB;AAID;AACF;;AAED,QAAM5E,WAAN,GAAoB;AAClB,QAAIH,iBAAJ;;AACA,QAAI,KAAKrlB,IAAL,CAAUqa,eAAV,IAA6B,CAAC,KAAKra,IAAL,CAAUiqB,YAA5C,EAA0D;AAExD;AACA5E,uBAAiB,GAAG,MAAMvT,MAAM,CAAC4J,KAAP,CAAanB,IAAb,CAAkB,KAAKva,IAAL,CAAUqa,eAA5B,EAA6ClI,qCAAM,CAACC,MAAP,CAAc,KAAKiT,iBAAnB,CAA7C,CAA1B;AAED,KALD,MAKO,IAAI,KAAKrlB,IAAL,CAAUiqB,YAAd,EAA4B;AAEjC;AACA,YAAMhS,SAAS,GAAG,MAAMnG,MAAM,CAACwF,aAAP,CAAqBa,sBAArB,CAA4C,KAAKnY,IAAL,CAAUiqB,YAAtD,CAAxB;AACA5E,uBAAiB,GAAG,MAAMvT,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB2B,SAAtB,EAAiC,KAAKqN,0BAAtC,CAA1B;AAEA,aAAO,KAAKtlB,IAAL,CAAUiqB,YAAjB;AACD;;AAED,UAAM5G,MAAM,GAAG,aAAf;AACA,UAAMtmB,MAAM,GAAG;AACbsoB,uBAAiB,EAAElT,qCAAM,CAACE,MAAP,CAAcgT,iBAAd,CADN;AAEbja,eAAS,EAAE,KAAKif;AAFH,KAAf;AAKA,UAAM/f,QAAQ,GAAG,MAAM,KAAKwd,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAAvB;AACA,UAAMsnB,QAAQ,GAAG/Z,QAAQ,CAACF,IAA1B;AACA,WAAOia,QAAP;AACD;;AAED,QAAMyD,OAAN,CAAczE,MAAd,EAAsBtmB,MAAtB,EAA8B;AAC5B;AACA,UAAM8qB,SAAS,GAAG1E,YAAM,EAAxB;AACA,SAAKoB,QAAL,CAAcsD,SAAd,IAA2B,EAA3B,CAH4B,CAK5B;AACA;AACA;;AACA,UAAMyC,eAAe,GAAG,KAAKC,KAAL,CAAW1C,SAAX,CAAxB,CAR4B,CAU5B;;AACA,SAAK7D,EAAL,CAAQ/X,IAAR,CAAapM,IAAI,CAACC,SAAL,CAAe;AAC1B+nB,eAD0B;AAE1BxE,YAF0B;AAG1BtmB;AAH0B,KAAf,CAAb,EAX4B,CAiB5B;;AACA,QAAI;AACF,YAAMuN,QAAQ,GAAG,MAAMggB,eAAvB;AACA,aAAOhgB,QAAP;AACD,KAHD,CAGE,OAAOtC,CAAP,EAAU;AACV;AACA,UAAIA,CAAC,CAAC9K,MAAF,KAAaC,WAAW,CAAC,mBAAD,CAA5B,EAAmD,MAAM,IAAIkM,MAAM,CAAClB,eAAX,CAA2BH,CAAC,CAACoC,IAAF,CAAOhC,UAAlC,CAAN,CAAnD,KACK,MAAM,IAAIgb,gBAAJ,CAAkBC,MAAlB,EAA0Brb,CAA1B,CAAN;AACN;AACF;;AAED,QAAMuiB,KAAN,CAAY1C,SAAZ,EAAuB;AACrB,UAAMvd,QAAQ,GAAG,MAAM,IAAIqB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtD,WAAK2Z,QAAL,CAAcsD,SAAd,EAAyBE,cAAzB,GAA0Cpd,OAA1C;AACA,WAAK4Z,QAAL,CAAcsD,SAAd,EAAyBG,aAAzB,GAAyCpd,MAAzC;AAEAma,gBAAU,CAAC,MAAM;AAAEna,cAAM,CAAC,IAAI/N,KAAJ,CAAU,SAAV,CAAD,CAAN;AAA8B,OAAvC,EAAyComB,kBAAzC,CAAV;AACD,KALsB,CAAvB;AAOA,WAAO,KAAKsB,QAAL,CAAcsD,SAAd,CAAP;AACA,WAAOvd,QAAP;AACD;;AAED,QAAMuc,aAAN,CAAoBjB,QAApB,EAA8BkB,WAA9B,EAA2CC,4BAA3C,EAAyE;AACvE,UAAMW,YAAY,GAAG,EAArB;;AACA,SAAK,IAAIpY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsW,QAAQ,CAAC8B,YAAT,CAAsBZ,WAAtB,EAAmCnlB,MAAvD,EAA+D2N,CAAC,EAAhE,EAAoE;AAClE,YAAM3C,KAAK,GAAGiZ,QAAQ,CAAC8B,YAAT,CAAsBZ,WAAtB,EAAmCxX,CAAnC,CAAd;AACA,YAAMkb,gBAAgB,GAAG7a,mBAAmB,CAAChD,KAAD,CAA5C;AACA+a,kBAAY,CAAChW,IAAb,CAAkB8Y,gBAAlB;AACD;;AACD,UAAMC,iBAAiB,GAAGla,aAAa,CAACmX,YAAD,CAAb,CAA4BpX,MAAtD;AAEA,UAAM;AAAE6F,eAAF;AAAauU;AAAb,QAAmC7qB,IAAI,CAACgL,KAAL,CAAWiE,mBAAmB,CAAC2b,iBAAD,CAA9B,CAAzC;AAEA,UAAME,sBAAsB,GAAG,MAAM7Y,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsBsP,QAAQ,CAACK,KAA/B,EAAsC9T,qCAAM,CAACC,MAAP,CAAc2U,4BAAd,CAAtC,CAArC;AACA,UAAM6D,mBAAmB,GAAG,MAAM9Y,MAAM,CAACoG,MAAP,CAActC,gBAAd,CAA+B+U,sBAA/B,CAAlC;AAEA,UAAME,SAAS,GAAG,MAAM/Y,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsBsU,mBAAtB,EAA2Cjb,mBAAmB,CAACwG,SAAD,CAA9D,CAAxB;AACA,UAAM2U,eAAe,GAAGhc,mBAAmB,CAAC+b,SAAD,CAA3C;AAEA,UAAM,CAACE,qBAAD,EAAwBC,4BAAxB,IAAwD,MAAMrf,OAAO,CAAC6d,GAAR,CAAY,CAC9E9J,UAAU,CAACoL,eAAD,CADoE,EAE9EpL,UAAU,CAACgL,iBAAD,CAFoE,CAAZ,CAApE;;AAKA,UAAM9D,MAAM,GAAG,oCACV/mB,IAAI,CAACgL,KAAL,CAAWkgB,qBAAX,CADO,GAEPlrB,IAAI,CAACgL,KAAL,CAAWmgB,4BAAX,CAFO,CAAZ;;AAKA,WAAOpF,QAAQ,CAAC8B,YAAT,CAAsBZ,WAAtB,CAAP;AAEA,WAAOF,MAAP;AACD;;AAED,QAAMqE,YAAN,CAAmB1I,MAAnB,EAA2BmD,IAA3B,EAAiCjD,KAAjC,EAAwCC,QAAxC,EAAkD+H,iBAAlD,EAAqE;AACnE,QAAI9I,QAAQ,GAAG,CAAf;AACA,QAAIuJ,WAAW,GAAG,CAAlB;AACA,QAAIC,KAAK,GAAG,EAAZ,CAHmE,CAGpD;;AAEf,WAAOxJ,QAAQ,GAAG8I,iBAAiB,CAACra,UAApC,EAAgD;AAC9C,YAAMzD,KAAK,GAAG8d,iBAAiB,CAAC1V,KAAlB,CAAwB4M,QAAxB,EAAkCA,QAAQ,GAAGoB,iBAA7C,CAAd,CAD8C,CAG9C;;AACAoI,WAAK,CAACzZ,IAAN,CAAWhF,oBAAiB,CAAC6V,MAAD,EAASmD,IAAT,EAAejD,KAAf,EAAsBC,QAAtB,EAAgCwI,WAAhC,EAA6Cve,KAA7C,CAA5B;;AAEA,UAAIwe,KAAK,CAACxpB,MAAN,KAAiBqhB,uBAArB,EAA8C;AAC5C,YAAI;AACF,gBAAMrX,OAAO,CAAC6d,GAAR,CAAY2B,KAAZ,CAAN;AACD,SAFD,CAEE,gBAAM;AACN;AACA,iBAAO,CAAP;AACD;;AACDA,aAAK,GAAG,EAAR;AACD;;AAEDD,iBAAW,IAAI,CAAf;AACAvJ,cAAQ,IAAIoB,iBAAZ;AACD;;AAED,QAAI;AACF,YAAMpX,OAAO,CAAC6d,GAAR,CAAY2B,KAAZ,CAAN;AACD,KAFD,CAEE,iBAAM;AACN;AACA,aAAO,CAAP;AACD;;AAED,WAAOD,WAAP;AACD;;AAED,QAAME,gBAAN,CAAuB1F,IAAvB,EAA6BjD,KAA7B,EAAoCwD,KAApC,EAA2C;AACzC,UAAM5C,MAAM,GAAG,kBAAf;AACA,UAAMtmB,MAAM,GAAG;AAAE2oB,UAAF;AAAQjD;AAAR,KAAf;AACA,QAAI4I,YAAJ;;AACA,QAAI;AACFA,kBAAY,GAAG,MAAM,KAAKvD,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAArB;AACD,KAFD,CAEE,iBAAM;AACN;AACA,aAAO,EAAP;AACD;;AACD,UAAM;AAAE2lB;AAAF,QAAe2I,YAAY,CAACjhB,IAAlC;AAEA,UAAM,CAACwgB,mBAAD,EAAsB7D,4BAAtB,IAAsD,MAAMjV,MAAM,CAACoG,MAAP,CAActB,kCAAd,CAAiDqP,KAAjD,CAAlE;AAEA,WAAO;AAAEvD,cAAF;AAAYkI,yBAAZ;AAAiC7D,kCAA4B,EAAE5U,qCAAM,CAACE,MAAP,CAAc0U,4BAAd;AAA/D,KAAP;AACD;;AAEDuE,cAAY,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAC9B,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAInc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkc,UAAU,CAACpa,KAAX,CAAiBzP,MAArC,EAA6C2N,CAAC,EAA9C,EAAkD;AAChD,YAAMoc,MAAM,GAAGF,UAAU,CAACpa,KAAX,CAAiB9B,CAAjB,EAAoBoc,MAAnC;AACAD,uBAAiB,CAAC/Z,IAAlB,CAAuB6Z,KAAK,CAACG,MAAD,CAA5B;AACD;;AACD,WAAOD,iBAAP;AACD;;AAEDE,eAAa,CAAC/F,QAAD,EAAW;AACtB,UAAM;AACJ2F,WADI;AAEJC,gBAFI;AAGJI;AAHI,QAIFhG,QAJJ;AAMA,UAAMgB,MAAM,GAAG;AACb;AACAzQ,eAAS,EAAEtW,IAAI,CAACC,SAAL,CAAe;AACxByrB,aAAK,EAAE,KAAKD,YAAL,CAAkBC,KAAlB,EAAyBC,UAAzB,CADiB;AAExBA,kBAAU,EAAEA,UAAU,CAACpa;AAFC,OAAf,CAFE;AAOb;AACAsZ,uBAAiB,EAAE7qB,IAAI,CAACC,SAAL,CAAe;AAChC8rB,8BAAsB,EAAE,KAAKN,YAAL,CAAkBM,sBAAlB,EAA0CJ,UAA1C;AADQ,OAAf;AARN,KAAf;AAaA,WAAO5E,MAAP;AACD;;AAED,QAAMU,WAAN,CAAkB1B,QAAlB,EAA4B;AAC1B,UAAMF,IAAI,GAAGE,QAAQ,CAACF,IAAtB;AACA,UAAMyD,SAAS,GAAGvD,QAAQ,CAACuD,SAA3B;AACA,UAAMlD,KAAK,GAAGL,QAAQ,CAACK,KAAvB;AACA,UAAM1D,MAAM,GAAG,KAAKhV,OAAL,CAAagV,MAA5B,CAJ0B,CAM1B;AACA;;AACA,QAAIqD,QAAQ,CAACiG,cAAT,IAA2BjG,QAAQ,CAACiG,cAAT,IAA2B1C,SAA1D,EAAqE,OAArE,KACKvD,QAAQ,CAACiG,cAAT,GAA0B1C,SAA1B;AAEL,UAAMvC,MAAM,GAAG,KAAK+E,aAAL,CAAmB/F,QAAnB,CAAf;AAEA,UAAMW,OAAO,GAAGX,QAAQ,CAACY,kBAAT,GACZ,CAAC,GAAGZ,QAAQ,CAACa,iBAAT,CAA2BzmB,IAA3B,EAAJ,EAAuC2gB,IAAvC,CAA4C,GAA5C,CADY,GAEZmL,SAFJ;AAIA,UAAM;AAAEpJ,cAAF;AAAYkI,yBAAZ;AAAiC7D;AAAjC,QAAkE,MAAM,KAAKqE,gBAAL,CAAsB1F,IAAtB,EAA4ByD,SAA5B,EAAuClD,KAAvC,CAA9E;AACA,QAAI,CAACvD,QAAL,EAAe;AAEf,UAAM,CAACqJ,0BAAD,EAA6BC,iCAA7B,IAAkE,MAAMrgB,OAAO,CAAC6d,GAAR,CAAY,CACxF/J,QAAQ,CAACmH,MAAM,CAACzQ,SAAR,CADgF,EAExFsJ,QAAQ,CAACmH,MAAM,CAAC8D,iBAAR,CAFgF,CAAZ,CAA9E;AAKA,UAAMuB,qCAAqC,GAAGtc,mBAAmB,CAACoc,0BAAD,CAAjE;AACA,UAAMG,cAAc,GAAG,MAAMpa,MAAM,CAACoG,MAAP,CAAcpC,OAAd,CAAsB8U,mBAAtB,EAA2CqB,qCAA3C,CAA7B;AAEArF,UAAM,CAACzQ,SAAP,GAAmBrH,mBAAmB,CAACod,cAAD,CAAtC;AACAtF,UAAM,CAAC8D,iBAAP,GAA2BsB,iCAA3B;AACA,UAAMvB,iBAAiB,GAAG9a,mBAAmB,CAAC9P,IAAI,CAACC,SAAL,CAAe8mB,MAAf,CAAD,CAA7C;AAEA,UAAMuF,SAAS,GAAG,MAAM,KAAKlB,YAAL,CAAkB1I,MAAlB,EAA0BmD,IAA1B,EAAgCyD,SAAhC,EAA2CzG,QAA3C,EAAqD+H,iBAArD,CAAxB;AACA,QAAI,CAAC0B,SAAL,EAAgB;AAEhB,UAAM9I,MAAM,GAAG,sBAAf;AACA,UAAMtmB,MAAM,GAAG;AAAE2oB,UAAF;AAAQjD,WAAK,EAAE0G,SAAf;AAA0BzG,cAA1B;AAAoC6D,aAApC;AAA6C4F,eAA7C;AAAwDpF;AAAxD,KAAf;;AACA,QAAI;AACF,YAAM,KAAKe,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAAN;AACD,KAFD,CAEE,iBAAM;AACN;AACA;AACD;AACF;;AAEDqvB,iBAAe,CAAC;AAAE7tB,YAAF;AAAYgkB,UAAZ;AAAoB4B,aAApB;AAA+B5Y,SAA/B;AAAsCC,WAAtC;AAA+C6gB,oBAA/C;AAAiEC,oBAAjE;AAAmF3I,kBAAnF;AAAmG4I,mBAAnG;AAAoHlI;AAApH,GAAD,EAAiI;AAC9I,UAAMjV,MAAM,GAAG;AAAE7Q,cAAF;AAAYgkB,YAAZ;AAAoB4B;AAApB,KAAf;AAEA,QAAI5Y,KAAJ,EAAW6D,MAAM,CAAC7D,KAAP,GAAeA,KAAf;AACX,QAAIC,OAAJ,EAAa4D,MAAM,CAAC5D,OAAP,GAAiBA,OAAjB;AACb,QAAI6gB,gBAAJ,EAAsBjd,MAAM,CAACid,gBAAP,GAA0BA,gBAA1B;AACtB,QAAIC,gBAAJ,EAAsBld,MAAM,CAACkd,gBAAP,GAA0BA,gBAA1B;AACtB,QAAI3I,cAAJ,EAAoBvU,MAAM,CAACuU,cAAP,GAAwBA,cAAxB;AACpB,QAAI4I,eAAJ,EAAqBnd,MAAM,CAACmd,eAAP,GAAyBA,eAAzB;;AAErB,QAAIlI,QAAJ,EAAc;AACZ,YAAM;AAAEhX,oBAAF;AAAgBiX;AAAhB,UAA+BD,QAArC;AACA,UAAIhX,YAAJ,EAAkB+B,MAAM,CAAC/B,YAAP,GAAsBA,YAAtB;;AAElB,UAAIiX,UAAJ,EAAgB;AACd,cAAM;AAAEkI,sBAAF;AAAgBrlB,4BAAhB;AAAoCslB,8BAApC;AAA0DC,4BAA1D;AAA8EC;AAA9E,YAAsGrI,UAA5G;AAEA,YAAIkI,YAAJ,EAAkBpd,MAAM,CAACod,YAAP,GAAsBA,YAAtB;AAClB,YAAIrlB,kBAAJ,EAAwBiI,MAAM,CAACjI,kBAAP,GAA4BA,kBAA5B;AACxB,YAAIslB,oBAAJ,EAA0Brd,MAAM,CAACqd,oBAAP,GAA8BA,oBAA9B;AAC1B,YAAIC,kBAAJ,EAAwBtd,MAAM,CAACsd,kBAAP,GAA4BA,kBAA5B;AACxB,YAAIC,mBAAJ,EAAyBvd,MAAM,CAACud,mBAAP,GAA6BA,mBAA7B;AAC1B;AACF;;AAED,WAAOvd,MAAP;AACD;;AAEDuY,kBAAgB,CAACC,WAAD,EAAc;AAC5B;AACA,QAAI,KAAKra,OAAL,IAAgB,KAAKA,OAAL,CAAagV,MAAb,KAAwBqF,WAAW,CAAC,QAAD,CAAvD,EAAmE;AACjE,WAAKra,OAAL,CAAahP,QAAb,GAAwBqpB,WAAW,CAAC,UAAD,CAAnC;AACA,WAAKvD,QAAL,GAAgBuD,WAAW,CAACvD,QAA5B;AAEA,YAAM1a,iBAAiB,GAAGjB,UAAM,CAACY,oBAAP,EAA1B;;AACA,UAAIK,iBAAJ,EAAuB;AACrBA,yBAAiB,CAAC;AAAEijB,cAAI,EAAE,KAAKR,eAAL;AAAuBjI,qBAAS,EAAE,KAAK5W,OAAL,CAAa4W;AAA/C,aAA6DyD,WAA7D;AAAR,SAAD,CAAjB;AACD;AACF;AACF;;AAED,QAAMiF,UAAN,CAAiBC,aAAjB,EAAgCC,UAAhC,EAA4C;AAC1C;AACA,UAAM;AAAEzhB,cAAF;AAAYF;AAAZ,QAA0B2hB,UAAhC;AACA,UAAM;AAAE5C,kBAAF;AAAgBC;AAAhB,QAAgChf,SAAtC;AACAE,YAAQ,CAAC2O,yBAAT,GAAqCkQ,YAAY,CAAClQ,yBAAlD;AACA3O,YAAQ,CAAC8P,wBAAT,GAAoCgP,WAAW,CAAChP,wBAAhD;AAEA,SAAKpb,IAAL,CAAUokB,KAAV,GAAkB9Y,QAAlB;AACA,SAAKF,SAAL,uCAAsB+e,YAAtB,GAAuCC,WAAvC;AAEA,UAAM,KAAK7E,OAAL,CAAauH,aAAb,CAAN;AAEA,SAAK9sB,IAAL,CAAUwjB,IAAV,GAAiB,IAAjB;AACD;;AAED,QAAM8F,sBAAN,CAA6BC,YAA7B,EAA2CH,iBAA3C,EAA8D;AAC5D;AACA,UAAM/F,MAAM,GAAG,wBAAf;AACA,UAAMtmB,MAAM,GAAG;AAAEwsB;AAAF,KAAf;AAEA,QAAIjf,QAAJ;;AACA,QAAI;AACFA,cAAQ,GAAG,MAAM,KAAKwd,OAAL,CAAazE,MAAb,EAAqBtmB,MAArB,CAAjB;AACD,KAFD,CAEE,OAAOiL,CAAP,EAAU;AACV,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,oBAAtC,EAA4D,MAAM,IAAIf,MAAM,CAACxH,kBAAX,EAAN;AAC5D,YAAMmG,CAAN;AACD;;AACD,UAAM;AAAEwa,gBAAF;AAAcwK,2BAAd;AAAqC3H;AAArC,QAA2D/a,QAAQ,CAACF,IAA1E,CAZ4D,CAc5D;;AACA,QAAI6iB,yBAAJ;;AACA,QAAI;AACF,YAAMC,mCAAmC,GAAG/a,qCAAM,CAACC,MAAP,CAAc4a,qBAAqB,CAACE,mCAApC,CAA5C;AACA,YAAMC,+BAA+B,GAAG,MAAMrb,MAAM,CAAC4J,KAAP,CAAa5B,qCAAb,CAAmDsP,iBAAnD,EAAsE8D,mCAAtE,CAA9C;AACA,YAAME,kCAAkC,GAAGjb,qCAAM,CAACC,MAAP,CAAc4a,qBAAqB,CAACI,kCAApC,CAA3C;AACA,YAAMC,4BAA4B,GAAG,MAAMvb,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB6W,+BAAtB,EAAuDC,kCAAvD,CAA3C;AACAH,+BAAyB,GAAG,MAAMnb,MAAM,CAAC4J,KAAP,CAAatC,8BAAb,CAA4CiU,4BAA5C,CAAlC;AACD,KAND,CAME,iBAAM;AACN,YAAM,IAAIhkB,MAAM,CAACzH,iBAAX,EAAN;AACD,KAxB2D,CA0B5D;;;AACA,UAAM0rB,uBAAuB,GAAG,MAAMxb,MAAM,CAAC4J,KAAP,CAAanB,IAAb,CAAkB0S,yBAAlB,EAA6C9a,qCAAM,CAACC,MAAP,CAAciT,iBAAd,CAA7C,CAAtC;AACA,WAAO;AAAE7C,gBAAF;AAAc6C,uBAAd;AAAiCiI,6BAAuB,EAAEnb,qCAAM,CAACE,MAAP,CAAcib,uBAAd;AAA1D,KAAP;AACD;;AAz0Bc;;AA40BF,+CAAI/J,aAAJ,EAAf,E;;;;;;;;AC13BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMgK,wBAAwB,GAAG,IAAjC;AACA,MAAMC,wBAAwB,GAAG,CAAjC;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,OAAK,EAAE,IADmB;AAE1BngB,SAAO,EAAE,IAFiB;AAG1BogB,MAAI,EAAE;AAHoB,CAA5B;AAMA,MAAMC,wBAAwB,GAAG,wHAAjC;AACA,MAAMC,gCAAgC,GAAG,+FAAzC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,MAAI9J,MAAE,CAACgB,YAAP,EAAqB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AACrB,MAAI,CAACkc,MAAE,CAAChkB,IAAH,CAAQwjB,IAAT,IAAiBQ,MAAE,CAACL,cAAxB,EAAwC,MAAM,IAAIta,MAAM,CAACtK,sBAAX,EAAN;AACxC,MAAI,CAACilB,MAAE,CAAChkB,IAAH,CAAQwjB,IAAb,EAAmB,MAAM,IAAIna,MAAM,CAACzK,eAAX,EAAN;AACpB,CAJD;;AAMA,MAAMmvB,mBAAmB,GAAI/lB,CAAD,IAAO;AACjC,MAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,QAAItC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,wBAAxB,EAAkD;AAChD,YAAM,IAAIf,MAAM,CAAC3K,oBAAX,CAAgC8K,MAAM,CAACwkB,QAAP,CAAgBC,MAAhD,CAAN;AACD,KAFD,MAEO,IAAIjmB,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,kBAAxB,EAA4C;AACjD,YAAM,IAAIf,MAAM,CAAC5K,aAAX,EAAN;AACD,KAFM,MAEA,IAAIuJ,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,cAAxB,EAAwC;AAC7C,YAAM,IAAIf,MAAM,CAACxK,YAAX,EAAN;AACD,KAFM,MAEA,IAAImJ,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,uBAAD,CAArC,EAAgE;AACrE,YAAM,IAAIkM,MAAM,CAACzB,mBAAX,EAAN;AACD,KAFM,MAEA,IAAII,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,iBAAD,CAArC,EAA0D;AAC/D,YAAM,IAAIkM,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,GAZD,MAYO,IAAIG,CAAC,CAAC/K,OAAF,IAAa+K,CAAC,CAAC/K,OAAF,CAAUixB,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAnD,EAAsD;AAC3D,UAAM,IAAI7kB,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,CAhBD;;AAkBA,MAAMsmB,iBAAiB,GAAG,OAAO5gB,OAAP,EAAgBqF,IAAhB,EAAsBzF,UAAtB,EAAkCwW,cAAlC,KAAqD;AAC7E,MAAI;AACF,UAAMK,MAAE,CAACY,OAAH,CAAWrX,OAAX,EAAoBqF,IAApB,EAA0BzF,UAA1B,EAAsCwW,cAAtC,CAAN;AACD,GAFD,CAEE,OAAO3b,CAAP,EAAU;AACV+lB,uBAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,QAAIA,CAAC,CAAC/K,OAAF,KAAc,8BAAlB,EAAkD;AAChD,YAAM,IAAIoM,MAAM,CAAC/K,mBAAX,CAA+B0J,CAAC,CAACzJ,QAAjC,CAAN;AACD;;AAED,UAAMyJ,CAAN;AACD;AACF,CAZD;;AAcA,MAAMomB,kCAAkC,GAAIpmB,CAAD,IAAO;AAChD,MAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgB5C,KAAhB,KAA0B,iBAA5C,EAA+D;AAC7D,UAAM,IAAI6B,MAAM,CAAC/L,eAAX,CAA2B0K,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgB7M,MAA3C,CAAN;AACD,GAFD,MAEO,IAAIyK,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgB5C,KAAhB,KAA0B,8BAA5C,EAA4E;AACjF,UAAM,IAAI6B,MAAM,CAACtL,4BAAX,CAAwCiK,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBpM,KAAxD,CAAN;AACD;AACF,CAND;;AAQA,MAAMqwB,wBAAwB,GAAIrmB,CAAD,IAAO;AACtC,MAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAA7B,EAAmC;AACjC,UAAMA,IAAI,GAAGpC,CAAC,CAACsC,QAAF,CAAWF,IAAxB;;AAEA,YAAQA,IAAI,CAAC5C,KAAb;AACE,WAAK,uBAAL;AACE,cAAM,IAAI6B,MAAM,CAAClL,qBAAX,CAAiCiM,IAAI,CAACxM,MAAtC,CAAN;;AAEF,WAAK,sBAAL;AACE,cAAM,IAAIyL,MAAM,CAACjL,oBAAX,CAAgCgM,IAAI,CAAC7M,MAArC,CAAN;AALJ;AAOD;AACF,CAZD;;AAcA,MAAM+wB,uBAAuB,GAAG,CAACtmB,CAAD,EAAIzJ,QAAJ,KAAiB;AAC/CwvB,qBAAmB,CAAC/lB,CAAD,CAAnB;;AACAomB,oCAAkC,CAACpmB,CAAD,CAAlC;;AAEA,MAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,UAAMF,IAAI,GAAGpC,CAAC,CAACsC,QAAF,CAAWF,IAAxB;;AAEA,YAAQA,IAAR;AACE,WAAK,uBAAL;AACE,cAAM,IAAIf,MAAM,CAACzM,qBAAX,CAAiC2B,QAAjC,CAAN;;AAEF,WAAK,oBAAL;AACE,cAAM,IAAI8K,MAAM,CAACnJ,kBAAX,EAAN;;AAEF,WAAK,0BAAL;AACE,cAAM,IAAImJ,MAAM,CAACjJ,wBAAX,EAAN;;AAEF,cAVF,CAWE;;AAXF;;AAcA,YAAQgK,IAAI,CAAC5C,KAAb;AACE,WAAK,eAAL;AACE,cAAM,IAAI6B,MAAM,CAACrK,aAAX,EAAN;;AAEF,WAAK,qBAAL;AACE,cAAM,IAAIqK,MAAM,CAACpK,mBAAX,EAAN;;AAEF,WAAK,mBAAL;AACE,cAAM,IAAIoK,MAAM,CAAChK,iBAAX,CAA6B+K,IAAI,CAAC7M,MAAlC,EAA0C6M,IAAI,CAAC9K,GAA/C,CAAN;;AAEF,WAAK,0BAAL;AACE,cAAM,IAAI+J,MAAM,CAAC9J,wBAAX,CAAoC6K,IAAI,CAAC9K,GAAzC,EAA8C8K,IAAI,CAAC5K,KAAnD,CAAN;;AAEF,WAAK,2BAAL;AACE,cAAM,IAAI6J,MAAM,CAAC5J,yBAAX,CAAqC2K,IAAI,CAAC9K,GAA1C,CAAN;;AAEF,WAAK,qBAAL;AACE,cAAM,IAAI+J,MAAM,CAAC3J,mBAAX,CAA+B0K,IAAI,CAAC7M,MAApC,EAA4C6M,IAAI,CAAC9K,GAAjD,EAAsD8K,IAAI,CAAC5K,KAA3D,CAAN;;AAEF,WAAK,uBAAL;AACE,cAAM,IAAI6J,MAAM,CAAClK,qBAAX,CAAiCiL,IAAI,CAAChL,OAAtC,CAAN;;AAEF,WAAK,sBAAL;AACE,cAAM,IAAIiK,MAAM,CAACnK,oBAAX,EAAN;AAvBJ;AAyBD;;AAED,QAAM8I,CAAN;AACD,CAjDD;;AAmDA,MAAMumB,yBAAyB,GAAG7iB,aAAa,IAAIA,aAAa,IAAIA,aAAa,GAAG,EAAhB,GAAqB,EAArB,GAA0B,IAA9F;;AAEA,MAAM8iB,iBAAiB,GAAIjwB,QAAD,IAAc;AACtC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,MAAM,IAAI8K,MAAM,CAAC7L,oBAAX,EAAN;AAClC,MAAIe,QAAQ,CAACoD,MAAT,KAAoB,CAAxB,EAA2B,MAAM,IAAI0H,MAAM,CAAChM,qBAAX,EAAN;AAC5B,CAHD;;AAKA,MAAMoxB,iBAAiB,GAAIC,QAAD,IAAc;AACtC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,MAAM,IAAIrlB,MAAM,CAACvL,oBAAX,EAAN;AAClC,MAAI4wB,QAAQ,CAAC/sB,MAAT,KAAoB,CAAxB,EAA2B,MAAM,IAAI0H,MAAM,CAAC3L,qBAAX,EAAN;AAC3B,MAAIgxB,QAAQ,CAAC/sB,MAAT,GAAkB6rB,wBAAtB,EAAgD,MAAM,IAAInkB,MAAM,CAAC1L,gBAAX,CAA4B6vB,wBAA5B,CAAN;AAChD,MAAIkB,QAAQ,CAAC/sB,MAAT,GAAkB4rB,wBAAtB,EAAgD,MAAM,IAAIlkB,MAAM,CAACxL,eAAX,CAA2B0vB,wBAA3B,CAAN;AACjD,CALD;;AAOA,MAAMoB,4BAA4B,GAAI5xB,MAAD,IAAY;AAC/C,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;AAEhC,MAAI,CAACqW,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAzB,EAA+C,MAAM,IAAIsM,MAAM,CAACjM,eAAX,EAAN;AAC/C,MAAI,CAACmhB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAzB,EAA+C,MAAM,IAAIsM,MAAM,CAAC5L,eAAX,EAAN;;AAE/C+wB,mBAAiB,CAACzxB,MAAM,CAACwB,QAAR,CAAjB;;AACAkwB,mBAAiB,CAAC1xB,MAAM,CAAC2xB,QAAR,CAAjB;;AAEA,MAAInQ,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAApB,IAA8C,CAAC0wB,mBAAmB,CAAC1wB,MAAM,CAACoQ,UAAR,CAAtE,EAA2F;AACzF,UAAM,IAAI9D,MAAM,CAAC1J,uBAAX,CAAmC8tB,mBAAnC,CAAN;AACD;;AAED,MAAIlP,oBAAoB,CAACxhB,MAAD,EAAS,eAAT,CAApB,IAAiD,OAAOA,MAAM,CAAC2O,aAAd,KAAgC,QAArF,EAA+F;AAC7F,UAAM,IAAIrC,MAAM,CAACnL,yBAAX,EAAN;AACD;AACF,CAhBD;;AAkBA,MAAM0wB,sBAAsB,GAAG,OAAOF,QAAP,EAAiB9b,IAAjB,EAAuBiK,gBAAvB,KAA4C;AACzE,QAAMgS,YAAY,GAAG/c,MAAM,CAACiL,MAAP,CAAc7J,YAAd,EAArB;AACA,QAAM+J,YAAY,GAAG,MAAMnL,MAAM,CAACiL,MAAP,CAAclL,IAAd,CAAmB6c,QAAnB,EAA6BG,YAA7B,EAA2ChS,gBAA3C,CAA3B;AAEA,QAAMiS,eAAe,GAAG,MAAMhd,MAAM,CAACuD,IAAP,CAAY1C,uBAAZ,CAAoCsK,YAApC,CAA9B;AAEA,QAAM8R,iBAAiB,GAAGjd,MAAM,CAACuD,IAAP,CAAYnC,YAAZ,EAA1B;AACA,QAAM/H,aAAa,GAAG,MAAM2G,MAAM,CAACuD,IAAP,CAAY3B,gBAAZ,CAA6Bob,eAA7B,EAA8CC,iBAA9C,CAA5B;AAEA,QAAMC,8BAA8B,GAAGld,MAAM,CAACuD,IAAP,CAAYnC,YAAZ,EAAvC;AACA,QAAM+b,0BAA0B,GAAG,MAAMnd,MAAM,CAACoG,MAAP,CAAcvB,6BAAd,CACvCmY,eADuC,EACtBE,8BADsB,CAAzC;AAGA,QAAME,qBAAqB,GAAG,MAAMpd,MAAM,CAACoG,MAAP,CAAcpC,OAAd,CAAsBmZ,0BAAtB,EAAkDrc,IAAlD,CAApC;AAEA,QAAMvH,aAAa,GAAG;AACpBwjB,gBAAY,EAAE1c,qCAAM,CAACE,MAAP,CAAcwc,YAAd,CADM;AAEpBE,qBAAiB,EAAE5c,qCAAM,CAACE,MAAP,CAAc0c,iBAAd;AAFC,GAAtB;AAKA,QAAMtjB,mBAAmB,GAAG;AAC1BujB,kCAA8B,EAAE7c,qCAAM,CAACE,MAAP,CAAc2c,8BAAd,CADN;AAE1BE,yBAAqB,EAAE/c,qCAAM,CAACE,MAAP,CAAc6c,qBAAd;AAFG,GAA5B;AAKA,SAAO;AACL/jB,iBADK;AAELE,iBAFK;AAGLI;AAHK,GAAP;AAKD,CA9BD;;AAgCA,MAAM0jB,aAAa,GAAG,MAAOvc,IAAP,IAAgB;AACpC,QAAMqC,SAAS,GAAG,MAAMnD,MAAM,CAACuD,IAAP,CAAYvC,aAAZ,CAA0BF,IAA1B,CAAxB;AAEA,QAAMgX,iBAAiB,GAAG9X,MAAM,CAACuD,IAAP,CAAYnC,YAAZ,EAA1B;AACA,QAAM2W,WAAW,GAAG/X,MAAM,CAACuD,IAAP,CAAYnC,YAAZ,EAApB;AACA,QAAM5H,QAAQ,GAAG;AACfse,qBAAiB,EAAEzX,qCAAM,CAACE,MAAP,CAAcuX,iBAAd,CADJ;AAEfC,eAAW,EAAE1X,qCAAM,CAACE,MAAP,CAAcwX,WAAd;AAFE,GAAjB;AAKA,QAAMM,YAAY,GAAG,MAAMrY,MAAM,CAAC4J,KAAP,CAAa3B,oBAAb,CAAkC9E,SAAlC,CAA3B;AACA,QAAMmV,WAAW,GAAG,MAAMtY,MAAM,CAACsL,IAAP,CAAYlC,mBAAZ,CAAgCjG,SAAhC,EAA2CkV,YAAY,CAAC9P,eAAxD,CAA1B;AAEA,SAAO8P,YAAY,CAAC9P,eAApB;AACA,SAAO+P,WAAW,CAACzO,cAAnB;AAEA,QAAMvQ,SAAS,GAAG;AAChB+e,gBADgB;AAEhBC;AAFgB,GAAlB;AAKA,SAAO;AAAEhf,aAAF;AAAaE;AAAb,GAAP;AACD,CAtBD;;AAwBA,MAAM8jB,sBAAsB,GAAG,OAAO7wB,QAAP,EAAiBmwB,QAAjB,EAA2B9b,IAA3B,EAAiCiK,gBAAjC,EAAmDtR,KAAnD,EAA0DC,OAA1D,EAAmEE,aAAnE,KAAqF;AAClH,QAAM;AACJP,iBADI;AAEJE,iBAFI;AAGJI;AAHI,MAIF,MAAMmjB,sBAAsB,CAACF,QAAD,EAAW9b,IAAX,EAAiBiK,gBAAjB,CAJhC;AAMA,QAAM;AAAEzR,aAAF;AAAaE;AAAb,MAA0B,MAAM6jB,aAAa,CAACvc,IAAD,CAAnD;;AAEA,MAAI;AACF,UAAMrF,OAAO,GAAG,MAAM6J,QAAO,CAAClM,MAAR,CACpB3M,QADoB,EAEpB4M,aAFoB,EAGpBC,SAHoB,EAIpBC,aAJoB,EAKpBC,QALoB,EAMpBC,KANoB,EAOpBC,OAPoB,EAQpBC,mBARoB,EASpBC,aAToB,CAAtB;AAWA,WAAO6B,OAAP;AACD,GAbD,CAaE,OAAOvF,CAAP,EAAU;AACVqmB,4BAAwB,CAACrmB,CAAD,CAAxB;;AACAsmB,2BAAuB,CAACtmB,CAAD,EAAIzJ,QAAJ,CAAvB;AACD;AACF,CA1BD;;AA4BA,MAAM8wB,gBAAgB,GAAI7jB,OAAD,IAAa;AACpC,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAInC,MAAM,CAACpK,mBAAX,EAAN;AAEjC,MAAIqwB,SAAS,GAAG,KAAhB;;AACA,OAAK,MAAMhwB,GAAX,IAAkBkM,OAAlB,EAA2B;AACzB8jB,aAAS,GAAG,IAAZ;AAEA,UAAM9vB,KAAK,GAAGgM,OAAO,CAAClM,GAAD,CAArB;AACA,QAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B,MAAM,IAAI6J,MAAM,CAAC9J,wBAAX,CAAoCD,GAApC,EAAyCE,KAAzC,CAAN;AAC/B,QAAI,CAACA,KAAL,EAAY,MAAM,IAAI6J,MAAM,CAAC5J,yBAAX,CAAqCH,GAArC,CAAN;AACb;;AAED,MAAI,CAACgwB,SAAL,EAAgB,MAAM,IAAIjmB,MAAM,CAACnK,oBAAX,EAAN;AACjB,CAbD;;AAeA,MAAMqwB,oBAAoB,GAAIxyB,MAAD,IAAY;AACvC4xB,8BAA4B,CAAC5xB,MAAD,CAA5B;;AAEA,MAAIA,MAAM,CAACyO,OAAX,EAAoB6jB,gBAAgB,CAACtyB,MAAM,CAACyO,OAAR,CAAhB;AACpB,MAAIzO,MAAM,CAACwO,KAAP,IAAgB,OAAOxO,MAAM,CAACwO,KAAd,KAAwB,QAA5C,EAAsD,MAAM,IAAIlC,MAAM,CAACrK,aAAX,EAAN;AACvD,CALD;;AAOA,MAAMkM,WAAM,GAAG,MAAOnO,MAAP,IAAkB;AAC/B,MAAI;AACFwyB,wBAAoB,CAACxyB,MAAD,CAApB;;AAEA,UAAM;AAAE2xB,cAAF;AAAYljB,aAAZ;AAAqBqR,sBAArB;AAAuC1P,gBAAU,GAAG;AAApD,QAAkEpQ,MAAxE;AAEA,UAAMwB,QAAQ,GAAGxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAjB;AACA,UAAMjkB,KAAK,GAAGxO,MAAM,CAACwO,KAAP,IAAgBxO,MAAM,CAACwO,KAAP,CAAaikB,WAAb,EAA9B;AAEA,UAAM1pB,KAAK,GAAG4C,UAAM,CAACU,QAAP,EAAd;AACA,UAAMwJ,IAAI,GAAG,MAAMd,MAAM,CAACqL,YAAP,EAAnB;;AAEA,UAAMzR,aAAa,GAAG6iB,yBAAyB,CAACxxB,MAAM,CAAC2O,aAAR,CAA/C;;AAEA,UAAM;AAAEY,eAAF;AAAae,kBAAb;AAA2BC,oBAA3B;AAA2CiV,YAA3C;AAAmD4B;AAAnD,QAAiE,MAAMiL,sBAAsB,CAAC7wB,QAAD,EAAWmwB,QAAX,EAAqB9b,IAArB,EAA2BiK,gBAA3B,EAA6CtR,KAA7C,EAAoDC,OAApD,EAA6DE,aAA7D,CAAnG;AACA,UAAM6B,OAAO,GAAG;AAAEhP,cAAF;AAAYgkB,YAAZ;AAAoBjW,eAApB;AAA+Be,kBAA/B;AAA6CC,oBAA7C;AAA6D6W;AAA7D,KAAhB;AAEA,UAAM/V,UAAU,GAAG+D,qCAAM,CAACE,MAAP,CAAcO,IAAd,CAAnB;AAEA+W,aAAS,CAACxb,cAAV,CAAyBhB,UAAzB,EAAqCrH,KAArC,EAA4CvH,QAA5C,EAAsD6P,UAAtD;AACAub,aAAS,CAAClb,aAAV,CAAwBtB,UAAxB,EAAoC5O,QAApC,EAA8C+N,SAA9C,EAAyDe,YAAzD,EAAuEC,cAAvE;AAEA,UAAM6gB,iBAAiB,CAAC5gB,OAAD,EAAUa,UAAV,EAAsBjB,UAAtB,CAAvB;AAEA,WAAO6W,MAAE,CAACoI,eAAH,CAAmB;AAAE7tB,cAAF;AAAYgkB,YAAZ;AAAoB4B,eAApB;AAA+B5Y,WAA/B;AAAsCC,aAAtC;AAA+C6Y,cAAQ,EAAEL,MAAE,CAACK;AAA5D,KAAnB,CAAP;AACD,GAxBD,CAwBE,OAAOrc,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,kBAAL;AACA,WAAK,iBAAL;AACA,WAAK,sBAAL;AACA,WAAK,eAAL;AACA,WAAK,qBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,mBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,yBAAL;AACA,WAAK,2BAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,oBAAL;AACA,WAAK,aAAL;AACA,WAAK,eAAL;AACA,WAAK,sBAAL;AACA,WAAK,qBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAjCJ;AAoCD;AACF,CAhED;;AAkEA,MAAM0hB,OAAO,GAAG,YAAY;AAC1B,MAAI;AACF,QAAI,CAAC1F,MAAE,CAACzW,OAAH,CAAWhP,QAAhB,EAA0B,MAAM,IAAI8K,MAAM,CAACzK,eAAX,EAAN;;AAE1B,QAAI;AACF,YAAMolB,MAAE,CAAC0F,OAAH,EAAN;AACD,KAFD,CAEE,OAAO1hB,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,YAAMA,CAAN;AACD;AAEF,GAVD,CAUE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AANJ;AAQD;AACF,CAtBD;;AAwBA,MAAMynB,qCAAqC,GAAG,OAAOX,eAAP,EAAwBrjB,mBAAxB,KAAgD;AAC5F,QAAM;AAAEujB,kCAAF;AAAkCE;AAAlC,MAA4DzjB,mBAAlE;AAEA,QAAMwjB,0BAA0B,GAAG,MAAMnd,MAAM,CAACoG,MAAP,CAAcvB,6BAAd,CACvCmY,eADuC,EACtB3c,qCAAM,CAACC,MAAP,CAAc4c,8BAAd,CADsB,CAAzC;AAGA,QAAMU,cAAc,GAAG,MAAM5d,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB2Y,0BAAtB,EAAkD9c,qCAAM,CAACC,MAAP,CAAc8c,qBAAd,CAAlD,CAA7B;AACA,QAAMS,oBAAoB,GAAGxd,qCAAM,CAACE,MAAP,CAAcqd,cAAd,CAA7B;AAEA,SAAOC,oBAAP;AACD,CAVD;;AAYA,MAAMC,cAAc,GAAG,OAAOrxB,QAAP,EAAiB4M,aAAjB,EAAgCO,aAAhC,KAAkD;AACvE,MAAI;AACF,UAAMmkB,eAAe,GAAG,MAAMzY,QAAO,CAAChL,MAAR,CAAe7N,QAAf,EAAyB4M,aAAzB,EAAwCO,aAAxC,CAA9B;AACA,WAAOmkB,eAAP;AACD,GAHD,CAGE,OAAO7nB,CAAP,EAAU;AACV+lB,uBAAmB,CAAC/lB,CAAD,CAAnB;;AACAomB,sCAAkC,CAACpmB,CAAD,CAAlC;;AACAqmB,4BAAwB,CAACrmB,CAAD,CAAxB;;AAEA,QAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,kBAAtC,EAA0D;AACxD,YAAM,IAAIf,MAAM,CAACpL,0BAAX,EAAN;AACD,KAFD,MAEO,IAAI+J,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,uBAAtC,EAA+D;AACpE,YAAM,IAAIf,MAAM,CAAC7K,mBAAX,EAAN;AACD;;AAED,UAAMwJ,CAAN;AACD;AACF,CAjBD;;AAmBA,MAAM8nB,iCAAiC,GAAG,MAAOvxB,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAM8M,aAAa,GAAG,MAAM+L,QAAO,CAAClL,gBAAR,CAAyB3N,QAAzB,CAA5B;AACA,WAAO8M,aAAP;AACD,GAHD,CAGE,OAAOrD,CAAP,EAAU;AACV+lB,uBAAmB,CAAC/lB,CAAD,CAAnB;;AACAomB,sCAAkC,CAACpmB,CAAD,CAAlC;;AAEA,QAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,gBAAtC,EAAwD;AACtD,YAAM,IAAIf,MAAM,CAACpL,0BAAX,EAAN;AACD;;AAED,UAAM+J,CAAN;AACD;AACF,CAdD;;AAgBA,MAAM+nB,8BAA8B,GAAG,YAAY;AACjD,MAAI;AACF,UAAM1M,MAAM,GAAG,kBAAf;AACA,UAAM2M,qBAAqB,GAAG,MAAMhM,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,CAApC;AACA,WAAO2M,qBAAqB,CAAC5lB,IAA7B;AACD,GAJD,CAIE,OAAOpC,CAAP,EAAU;AACV+lB,uBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,UAAMA,CAAN;AACD;AACF,CATD;;AAWA,MAAMioB,qBAAqB,GAAG,OAAOvB,QAAP,EAAiBrjB,aAAjB,EAAgCwR,gBAAhC,KAAqD;AACjF,QAAM;AAAEgS,gBAAF;AAAgBE;AAAhB,MAAsC1jB,aAA5C;AAEA,QAAM4R,YAAY,GAAG,MAAMnL,MAAM,CAACiL,MAAP,CAAclL,IAAd,CAAmB6c,QAAnB,EAA6B,IAAIxf,UAAJ,CAAeiD,qCAAM,CAACC,MAAP,CAAcyc,YAAd,CAAf,CAA7B,EAA0EhS,gBAA1E,CAA3B;AACA,QAAMiS,eAAe,GAAG,MAAMhd,MAAM,CAACuD,IAAP,CAAY1C,uBAAZ,CAAoCsK,YAApC,CAA9B;AACA,QAAM9R,aAAa,GAAG,MAAM2G,MAAM,CAACuD,IAAP,CAAY3B,gBAAZ,CAA6Bob,eAA7B,EAA8C3c,qCAAM,CAACC,MAAP,CAAc2c,iBAAd,CAA9C,CAA5B;AAEA,SAAO;AAAED,mBAAF;AAAmB3jB;AAAnB,GAAP;AACD,CARD;;AAUA,MAAMiB,WAAM,GAAG,MAAOrP,MAAP,IAAkB;AAC/B,MAAI;AACF4xB,gCAA4B,CAAC5xB,MAAD,CAA5B;;AAEA,UAAMwB,QAAQ,GAAGxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAjB;AACA,UAAM;AAAEd,cAAF;AAAY7R,sBAAZ;AAA8B1P,gBAAU,GAAG;AAA3C,QAAyDpQ,MAA/D;AAEA,UAAM+I,KAAK,GAAG4C,UAAM,CAACU,QAAP,EAAd;AAEA,UAAMiC,aAAa,GAAG,MAAMykB,iCAAiC,CAACvxB,QAAD,CAA7D;AACA,UAAM;AAAEuwB,qBAAF;AAAmB3jB;AAAnB,QAAqC,MAAM8kB,qBAAqB,CAACvB,QAAD,EAAWrjB,aAAX,EAA0BwR,gBAA1B,CAAtE;;AAEA,UAAMnR,aAAa,GAAG6iB,yBAAyB,CAACxxB,MAAM,CAAC2O,aAAR,CAA/C;;AAEA,UAAMmkB,eAAe,GAAG,MAAMD,cAAc,CAACrxB,QAAD,EAAW4M,aAAX,EAA0BO,aAA1B,CAA5C;AACA,UAAM;AAAE6W,YAAF;AAAUhX,WAAV;AAAiBC,aAAjB;AAA0BC,yBAA1B;AAA+C4gB,sBAA/C;AAAiEC,sBAAjE;AAAmF3I;AAAnF,QAAsGkM,eAA5G;;AACA,UAAMtiB,OAAO,GAAG,wCACXsiB,eAAe,CAACtiB,OADR;AAEXhP,cAFW;AAGXgkB;AAHW,MAAb;;AAMA,QAAInU,UAAJ;;AACA,QAAI,CAACuV,cAAL,EAAqB;AACnB,YAAMuM,eAAe,GAAGvG,SAAS,CAACnb,aAAV,CAAwB1I,KAAxB,EAA+BvH,QAA/B,CAAxB;AAEA,UAAIoxB,oBAAJ;;AACA,UAAI,CAACO,eAAD,IAAoB5D,gBAAxB,EAA0C;AACxC,cAAM,IAAIjjB,MAAM,CAAChJ,WAAX,CAAuButB,wBAAvB,CAAN;AACD,OAFD,MAEO,IAAI,CAACtB,gBAAL,EAAuB;AAC5B;AACAqD,4BAAoB,GAAG,MAAMF,qCAAqC,CAACX,eAAD,EAAkBrjB,mBAAlB,CAAlE;AACAke,iBAAS,CAACxb,cAAV,CAAyBhB,UAAzB,EAAqCrH,KAArC,EAA4CvH,QAA5C,EAAsDoxB,oBAAtD;AACD;;AAEDvhB,gBAAU,GAAGuhB,oBAAoB,IAAIO,eAArC;AACD;;AAEDvG,aAAS,CAAClb,aAAV,CAAwBtB,UAAxB,EAAoC5O,QAApC,EAA8CgP,OAAO,CAACjB,SAAtD,EAAiEiB,OAAO,CAACF,YAAzE,EAAuFE,OAAO,CAACD,cAA/F;;AAEA,QAAI;AACF,YAAM6gB,iBAAiB,CAAC5gB,OAAD,EAAUa,UAAV,EAAsBjB,UAAtB,EAAkCwW,cAAlC,CAAvB;AACD,KAFD,CAEE,OAAO3b,CAAP,EAAU;AACV,UAAIskB,gBAAgB,IAAItkB,CAAC,CAAC/K,OAAF,KAAc,cAAtC,EAAsD,MAAM,IAAIoM,MAAM,CAAChJ,WAAX,CAAuButB,wBAAvB,CAAN;AACtD,YAAM5lB,CAAN;AACD;;AAED,WAAOgc,MAAE,CAACoI,eAAH,CAAmB;AACxB7tB,cADwB;AACdgkB,YADc;AACN4B,eAAS,EAAE5W,OAAO,CAAC4W,SADb;AACwB5Y,WADxB;AAExBC,aAFwB;AAEf6gB,sBAFe;AAEGC,sBAFH;AAEqB3I,oBAFrB;AAEqCU,cAAQ,EAAEL,MAAE,CAACK;AAFlD,KAAnB,CAAP;AAID,GAlDD,CAkDE,OAAOrc,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,4BAAL;AACA,WAAK,qBAAL;AACA,WAAK,uBAAL;AACA,WAAK,iBAAL;AACA,WAAK,sBAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,kBAAL;AACA,WAAK,iBAAL;AACA,WAAK,sBAAL;AACA,WAAK,8BAAL;AACA,WAAK,yBAAL;AACA,WAAK,2BAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,eAAL;AACA,WAAK,sBAAL;AACA,WAAK,qBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AA3BJ;AA8BD;AACF,CApFD;;AAsFA,MAAMwb,IAAI,GAAG,MAAOzmB,MAAP,IAAkB;AAC7B,MAAI;AACF,QAAI,CAACyM,MAAM,CAACsI,MAAP,CAAcC,MAAnB,EAA2B,MAAM,IAAI1I,MAAM,CAACnD,oBAAX,EAAN;AAE3B,QAAI,OAAOnJ,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;AAEhC,QAAI,CAACqW,oBAAoB,CAACxhB,MAAD,EAAS,OAAT,CAAzB,EAA4C,MAAM,IAAIsM,MAAM,CAACrD,YAAX,EAAN;AAC5C,QAAI,OAAOjJ,MAAM,CAAC+I,KAAd,KAAwB,QAA5B,EAAsC,MAAM,IAAIuD,MAAM,CAACtD,iBAAX,EAAN;AACtC,QAAIhJ,MAAM,CAAC+I,KAAP,CAAanE,MAAb,KAAwB,CAA5B,EAA+B,MAAM,IAAI0H,MAAM,CAACpD,kBAAX,EAAN;;AAE/B,QAAIsY,oBAAoB,CAACxhB,MAAD,EAAS,mBAAT,CAApB,IAAqD,OAAOA,MAAM,CAAC4M,iBAAd,KAAoC,UAA7F,EAAyG;AACvG,YAAM,IAAIN,MAAM,CAAClD,+BAAX,EAAN;AACD;;AAED,QAAIoY,oBAAoB,CAACxhB,MAAD,EAAS,eAAT,CAApB,IAAiD,OAAOA,MAAM,CAAC2O,aAAd,KAAgC,QAArF,EAA+F;AAC7F,YAAM,IAAIrC,MAAM,CAACnL,yBAAX,EAAN;AACD;;AAED,QAAIqgB,oBAAoB,CAACxhB,MAAD,EAAS,2BAAT,CAApB,IAA6D,OAAOA,MAAM,CAAC6M,yBAAd,KAA4C,SAA7G,EAAwH;AACtH,YAAM,IAAIP,MAAM,CAAChL,sCAAX,EAAN;AACD;;AAEDqK,cAAM,CAACgB,SAAP,CAAiB3M,MAAjB;AAEA,UAAMwQ,OAAO,GAAG,MAAMlB,sBAAiB,CAACtP,MAAM,CAAC+I,KAAR,EAAeyoB,yBAAyB,CAACxxB,MAAM,CAAC2O,aAAR,CAAxC,CAAvC;AACA,WAAO6B,OAAP;AACD,GAzBD,CAyBE,OAAOvF,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,sBAAL;AACA,WAAK,oBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,eAAL;AACA,WAAK,sBAAL;AACA,WAAK,iCAAL;AACA,WAAK,2BAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,wCAAL;AACA,WAAK,qBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnBJ;AAsBD;AACF,CAnDD;;AAqDA,MAAMqE,sBAAiB,GAAG,OAAOvG,KAAP,EAAc4F,aAAd,KAAgC;AACxD,MAAIykB,gBAAJ;;AACA,MAAI;AACF,UAAMpiB,cAAc,GAAG4b,SAAS,CAAC/b,iBAAV,EAAvB;AACA,QAAI,CAACG,cAAL,EAAqB,OAAO,EAAP;AAErB,UAAM;AAAEX,cAAF;AAAYd,eAAZ;AAAuBe,kBAAvB;AAAqCC,oBAArC;AAAqDH;AAArD,QAAoEY,cAA1E;AACAoiB,oBAAgB,GAAGpiB,cAAc,CAACxP,QAAlC;AACA,UAAM2xB,eAAe,GAAGvG,SAAS,CAACnb,aAAV,CAAwB1I,KAAxB,EAA+BqqB,gBAA/B,CAAxB;;AAEA,QAAI,CAAC/iB,QAAD,IAAa,CAAC8iB,eAAd,IAAiC,IAAIE,IAAJ,KAAa,IAAIA,IAAJ,CAAS9iB,cAAT,CAAlD,EAA4E;AAC1E,aAAO;AAAE6iB;AAAF,OAAP;AACD;;AAED,QAAIE,0BAAJ;;AACA,QAAI;AACFA,gCAA0B,GAAG,MAAMjZ,QAAO,CAAC/K,iBAAR,CAA0BC,SAA1B,EAAqCZ,aAArC,CAAnC;AACD,KAFD,CAEE,OAAO1D,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AACAqmB,8BAAwB,CAACrmB,CAAD,CAAxB;;AAEA,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,iBAAtC,EAAyD;AACvD,eAAO;AAAE+lB;AAAF,SAAP;AACD;;AAED,YAAMnoB,CAAN;AACD;;AACD,UAAM;AAAEua,YAAF;AAAU4B,eAAV;AAAqB5lB,cAArB;AAA+BgN,WAA/B;AAAsCC,aAAtC;AAA+C6gB;AAA/C,QAAoEgE,0BAA1E,CAzBE,CA2BF;;AACA,QAAI9xB,QAAQ,KAAK4xB,gBAAjB,EAAmC;AACjCxG,eAAS,CAACxb,cAAV,CAAyBhB,UAAzB,EAAqCrH,KAArC,EAA4CvH,QAA5C,EAAsD2xB,eAAtD;AACAvG,eAAS,CAACtb,gBAAV,CAA2BvI,KAA3B,EAAkCqqB,gBAAlC;AACD,KA/BC,CAiCF;;;AACAxG,aAAS,CAAClb,aAAV,CAAwBtB,UAAxB,EAAoC5O,QAApC,EAA8C+N,SAA9C,EAAyDe,YAAzD,EAAuEgjB,0BAA0B,CAAC/iB,cAAlG,EAlCE,CAoCF;;AACA,QAAI0W,MAAE,CAACE,kBAAP,EAA2B;AACzB,UAAIF,MAAE,CAACzW,OAAH,CAAWjB,SAAX,KAAyBA,SAA7B,EAAwC;AACtC,eAAO;AAAEsgB,cAAI,EAAE5I,MAAE,CAACoI,eAAH,CAAmB;AAAE7tB,oBAAF;AAAYgkB,kBAAZ;AAAoB4B,qBAAS,EAAEH,MAAE,CAACzW,OAAH,CAAW4W,SAA1C;AAAqD5Y,iBAArD;AAA4DC,mBAA5D;AAAqE6gB,4BAArE;AAAuFhI,oBAAQ,EAAEL,MAAE,CAACK;AAApG,WAAnB;AAAR,SAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIhb,MAAM,CAAC/K,mBAAX,CAA+B0lB,MAAE,CAACzW,OAAH,CAAWhP,QAA1C,CAAN;AACD;AACF;;AAED,UAAMgP,OAAO,GAAG,wCAAKQ,cAAR;AAAwBxP,cAAxB;AAAkCgkB,YAAlC;AAA0C4B;AAA1C,MAAb;;AACA,UAAMgK,iBAAiB,CAAC5gB,OAAD,EAAU2iB,eAAV,EAA2B/iB,UAA3B,CAAvB;AAEA,WAAO;AAAEyf,UAAI,EAAE5I,MAAE,CAACoI,eAAH,CAAmB;AAAE7tB,gBAAF;AAAYgkB,cAAZ;AAAoB4B,iBAApB;AAA+B5Y,aAA/B;AAAsCC,eAAtC;AAA+C6gB,wBAA/C;AAAiEhI,gBAAQ,EAAEL,MAAE,CAACK;AAA9E,OAAnB;AAAR,KAAP;AACD,GAjDD,CAiDE,OAAOrc,CAAP,EAAU;AACV,QAAIA,CAAC,CAAC/K,OAAF,KAAc,cAAlB,EAAkC,OAAO;AAAEkzB;AAAF,KAAP;;AAClCpC,uBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,UAAMA,CAAN;AACD;AACF,CAxDD;;AA0DA,MAAMsoB,yBAAyB,GAAIvzB,MAAD,IAAY;AAC5C,MAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAArB,IACC,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,aAAT,CADtB,IAEC,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,OAAT,CAFtB,IAGC,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,SAAT,CAH1B,EAIE;AACA,UAAM,IAAIsM,MAAM,CAACpJ,aAAX,EAAN;AACD;;AAED,QAAM;AAAE1B,YAAF;AAAYgyB,mBAAZ;AAA6BC,eAA7B;AAA0CjlB,SAA1C;AAAiDC;AAAjD,MAA6DzO,MAAnE;AAEA,MAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAxB,EAA8CyxB,iBAAiB,CAACjwB,QAAD,CAAjB;;AAC9C,MAAIggB,oBAAoB,CAACxhB,MAAD,EAAS,aAAT,CAAxB,EAAiD;AAC/C,QAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,iBAAT,CAAzB,EAAsD,MAAM,IAAIsM,MAAM,CAAClJ,sBAAX,EAAN;;AAEtDsuB,qBAAiB,CAAC8B,eAAD,CAAjB;;AACA9B,qBAAiB,CAAC+B,WAAD,CAAjB;AACD,GAjB2C,CAmB5C;;;AACA,MAAIjlB,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC,MAAM,IAAIlC,MAAM,CAACrK,aAAX,EAAN;AACxC,MAAIwM,OAAJ,EAAa6jB,gBAAgB,CAAC7jB,OAAD,CAAhB;AACd,CAtBD;;AAwBA,MAAMilB,sBAAsB,GAAG,OAAO1zB,MAAP,EAAe2zB,OAAf,KAA2B;AACxD,MAAI3zB,MAAM,CAACwB,QAAX,EAAqBxB,MAAM,CAACwB,QAAP,GAAkBxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAlB;;AAErB,MAAIzyB,MAAM,CAACyzB,WAAX,EAAwB;AACtB,UAAM,CAACG,oBAAD,EAAuBC,kBAAvB,EAA2C7D,UAA3C,IAAyD,MAAMphB,OAAO,CAAC6d,GAAR,CAAY,CAC/EuG,8BAA8B,EADiD,EAE/EnB,sBAAsB,CAAC7xB,MAAM,CAACyzB,WAAR,EAAqBE,OAAO,IAAIve,qCAAM,CAACC,MAAP,CAAc4R,MAAE,CAAC5V,UAAjB,CAAhC,CAFyD,EAG/EsiB,OAAO,IAAIvB,aAAa,CAACuB,OAAD,CAHuD,CAAZ,CAArE,CADsB,CAOtB;;AACA,UAAM;AAAEvlB;AAAF,QAAoB,MAAM8kB,qBAAqB,CAAClzB,MAAM,CAACwzB,eAAR,EAAyBI,oBAAzB,EAA+C5zB,MAAM,CAAC8f,gBAAtD,CAArD;AACA9f,UAAM,CAAC8zB,oBAAP,GAA8B1lB,aAA9B;AACA,WAAOpO,MAAM,CAACwzB,eAAd,CAVsB,CAYtB;;AACAxzB,UAAM,CAACoO,aAAP,GAAuBylB,kBAAkB,CAACzlB,aAA1C;AACApO,UAAM,CAACsO,aAAP,GAAuBulB,kBAAkB,CAACvlB,aAA1C;AACAtO,UAAM,CAAC0O,mBAAP,GAA6BmlB,kBAAkB,CAACnlB,mBAAhD;AACA,WAAO1O,MAAM,CAACyzB,WAAd;AAEA,QAAIzD,UAAJ,EAAgBhwB,MAAM,CAACgwB,UAAP,GAAoBA,UAApB;AACjB;;AAED,MAAIhwB,MAAM,CAACwO,KAAX,EAAkBxO,MAAM,CAACwO,KAAP,GAAexO,MAAM,CAACwO,KAAP,CAAaikB,WAAb,EAAf,CAAlB,KACK,IAAIjR,oBAAoB,CAACxhB,MAAD,EAAS,OAAT,CAAxB,EAA2CA,MAAM,CAACwO,KAAP,GAAe,KAAf,CAzBQ,CAyBa;;AAErE,MAAI,CAACxO,MAAM,CAACyO,OAAR,IAAmB+S,oBAAoB,CAACxhB,MAAD,EAAS,SAAT,CAA3C,EAAgEA,MAAM,CAACyO,OAAP,GAAiB,KAAjB,CA3BR,CA2B+B;;AAEvF,SAAOzO,MAAP;AACD,CA9BD;;AAgCA,MAAM+zB,UAAU,GAAG,MAAO/zB,MAAP,IAAkB;AACnC,MAAI;AACF,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;;AAEhCooB,6BAAyB,CAACvzB,MAAD,CAAzB;;AAEA,QAAIinB,MAAE,CAACgB,YAAP,EAAqB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AACrB,QAAI,CAACkc,MAAE,CAACE,kBAAR,EAA4B,MAAM,IAAI7a,MAAM,CAACzK,eAAX,EAAN;AAC5B,UAAMmyB,cAAc,GAAG/M,MAAE,CAACzW,OAAH,CAAWgV,MAAlC,CAPE,CASF;;AACA,UAAMmO,OAAO,GAAG3zB,MAAM,CAACyzB,WAAP,IAAsB,CAACxM,MAAE,CAAChkB,IAAH,CAAQwjB,IAA/B,IAAuCQ,MAAE,CAACL,cAA1C,KAA4D,MAAM7R,MAAM,CAACqL,YAAP,EAAlE,CAAhB;AAEA,UAAMkG,MAAM,GAAG,YAAf;AACA,UAAM2N,WAAW,GAAG,MAAMP,sBAAsB,CAAC,sBAAK1zB,MAAN,GAAgB2zB,OAAhB,CAAhD;AAEA,QAAI1M,MAAE,CAACgB,YAAP,EAAqB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AACrB,QAAI,CAACkc,MAAE,CAACE,kBAAR,EAA4B,MAAM,IAAI7a,MAAM,CAACzK,eAAX,EAAN,CAhB1B,CAkBF;;AACA,QAAI,CAAColB,MAAE,CAACzW,OAAJ,IAAewjB,cAAc,KAAK/M,MAAE,CAACzW,OAAH,CAAWgV,MAAjD,EAAyD,MAAM,IAAIlZ,MAAM,CAAC1B,kBAAX,EAAN;;AAEzD,QAAI;AACF,UAAIqpB,WAAW,CAACzyB,QAAhB,EAA0B;AACxBorB,iBAAS,CAACxb,cAAV,CAAyB6V,MAAE,CAAC7W,UAA5B,EAAwCzE,UAAM,CAACU,QAAP,EAAxC,EAA2D4nB,WAAW,CAACzyB,QAAvE,EAAiFylB,MAAE,CAAC5V,UAApF;AACD;;AAED,YAAM9D,QAAQ,GAAG,MAAM0Z,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB2N,WAAnB,CAAvB;AACA,YAAMpJ,WAAW,GAAGtd,QAAQ,CAACF,IAAT,CAAcwd,WAAlC;AACA5D,YAAE,CAAC2D,gBAAH,CAAoBC,WAApB,EAPE,CASF;;AACA,UAAI8I,OAAO,IAAI1M,MAAE,CAACzW,OAAd,IAAyBwjB,cAAc,KAAK/M,MAAE,CAACzW,OAAH,CAAWgV,MAA3D,EAAmE;AACjE,cAAMuK,aAAa,GAAG3a,qCAAM,CAACE,MAAP,CAAcqe,OAAd,CAAtB;AACA,cAAM1M,MAAE,CAAC6I,UAAH,CAAcC,aAAd,EAA6BkE,WAAW,CAACjE,UAAzC,CAAN;AACApD,iBAAS,CAACxb,cAAV,CAAyB6V,MAAE,CAAC7W,UAA5B,EAAwCzE,UAAM,CAACU,QAAP,EAAxC,EAA2Dwe,WAAW,CAACrpB,QAAvE,EAAiFuuB,aAAjF;AAEA,cAAM;AAAExgB,mBAAF;AAAae,sBAAb;AAA2BC;AAA3B,YAA8C0W,MAAE,CAACzW,OAAvD;AACAoc,iBAAS,CAAClb,aAAV,CAAwBuV,MAAE,CAAC7W,UAA3B,EAAuCya,WAAW,CAACrpB,QAAnD,EAA6D+N,SAA7D,EAAwEe,YAAxE,EAAsFC,cAAtF;AACD;AACF,KAlBD,CAkBE,OAAOtF,CAAP,EAAU;AACVsmB,6BAAuB,CAACtmB,CAAD,EAAIgpB,WAAW,CAACzyB,QAAhB,CAAvB;AACD;AACF,GA1CD,CA0CE,OAAOyJ,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,eAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,iBAAL;AACA,WAAK,wBAAL;AACA,WAAK,0BAAL;AACA,WAAK,8BAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,kBAAL;AACA,WAAK,iBAAL;AACA,WAAK,eAAL;AACA,WAAK,qBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,mBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,aAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AA/BJ;AAkCD;AACF,CAhFD;;AAkFA,MAAMipB,UAAU,GAAG,YAAY;AAC7B,MAAI;AACFnD,uBAAmB;;AAEnB,UAAMvvB,QAAQ,GAAGylB,MAAE,CAACzW,OAAH,CAAWhP,QAA5B;AACAorB,aAAS,CAACtb,gBAAV,CAA2B3F,UAAM,CAACU,QAAP,EAA3B,EAA8C7K,QAA9C;AACAorB,aAAS,CAAChb,oBAAV;;AAEA,QAAI;AACF,YAAM0U,MAAM,GAAG,YAAf;AACA,YAAMW,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,CAAN;AACD,KAHD,CAGE,OAAOrb,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,YAAMA,CAAN;AACD;;AAEDgc,UAAE,CAACmE,KAAH;AAED,GAjBD,CAiBE,OAAOngB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AATJ;AAYD;AACF,CAjCD;;AAmCA,MAAMkpB,kCAAkC,GAAG,OAAOprB,KAAP,EAAcvH,QAAd,KAA2B;AACpE,QAAM6P,UAAU,GAAGub,SAAS,CAACnb,aAAV,CAAwB1I,KAAxB,EAA+BvH,QAA/B,CAAnB;AACA,MAAI,CAAC6P,UAAL,EAAiB,MAAM,IAAI/E,MAAM,CAAChJ,WAAX,CAAuBwtB,gCAAvB,CAAN;AACjB,QAAMjb,IAAI,GAAGT,qCAAM,CAACC,MAAP,CAAchE,UAAd,CAAb;AACA,QAAM6G,SAAS,GAAG,MAAMnD,MAAM,CAACuD,IAAP,CAAYvC,aAAZ,CAA0BF,IAA1B,CAAxB;AACA,SAAOqC,SAAP;AACD,CAND;;AAQA,MAAMkc,cAAc,GAAG,MAAOp0B,MAAP,IAAkB;AACvC,MAAI;AACF,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;;AAChC,QAAIqW,oBAAoB,CAACxhB,MAAD,EAAS,6BAAT,CAApB,IAA+D,OAAOA,MAAM,CAACq0B,2BAAd,KAA8C,SAAjH,EAA4H;AAC1H,YAAM,IAAI/nB,MAAM,CAAC/I,wCAAX,EAAN;AACD;;AACD,QAAI,CAACie,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAzB,EAA+C,MAAM,IAAIsM,MAAM,CAACjM,eAAX,EAAN;;AAE/CoxB,qBAAiB,CAACzxB,MAAM,CAACwB,QAAR,CAAjB;;AACA,UAAMA,QAAQ,GAAGxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAjB;AAEA,UAAM1pB,KAAK,GAAG4C,UAAM,CAACU,QAAP,EAAd;AAEA,UAAM0C,GAAG,aAAMoS,QAAQ,CAACxV,UAAM,CAACa,WAAP,EAAD,CAAd,6CAAuEzD,KAAvE,uBAAyFqG,kBAAkB,CAAC5N,QAAD,CAA3G,gCAA2ImK,UAAM,CAACE,mBAAlJ,CAAT;AACA,UAAMyoB,gBAAgB,GAAG,IAAIpM,SAAJ,CAAcnZ,GAAG,IAAIyS,oBAAoB,CAACxhB,MAAD,EAAS,6BAAT,CAApB,0CACVA,MAAM,CAACq0B,2BADG,IAC6B,EADjC,CAAjB,CAAzB;AAGA,UAAM,IAAIzlB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACrCma,gBAAU,CAAC,MAAMna,MAAM,CAAC,IAAIvB,MAAM,CAACxB,OAAX,EAAD,CAAb,EAAmC,KAAnC,CAAV;;AAEAwpB,sBAAgB,CAACrmB,OAAjB,GAA2B,MAAMJ,MAAM,CAAC,IAAIvB,MAAM,CAAC1B,kBAAX,EAAD,CAAvC;;AAEA0pB,sBAAgB,CAAC7R,SAAjB,GAA6B,MAAOxX,CAAP,IAAa;AACxC,YAAI;AACF,gBAAM/K,OAAO,GAAG4C,IAAI,CAACgL,KAAL,CAAW7C,CAAC,CAACoC,IAAb,CAAhB;;AAEA,kBAAQnN,OAAO,CAACkoB,KAAhB;AAEE;AACA,iBAAK,uBAAL;AAA8B;AAC5B,sBAAMlQ,SAAS,GAAG,MAAMic,kCAAkC,CAACprB,KAAD,EAAQvH,QAAR,CAA1D,CAD4B,CAG5B;;AACA,sBAAM+yB,4BAA4B,GAAG,IAAIpiB,UAAJ,CAAejS,OAAO,CAACq0B,4BAAR,CAAqClnB,IAApD,CAArC;AAEA,sBAAM6f,YAAY,GAAG,MAAMnY,MAAM,CAACwF,aAAP,CAAqBtC,mBAArB,CAAyCC,SAAzC,EAAoD9C,qCAAM,CAACC,MAAP,CAAcnV,OAAO,CAAC+sB,SAAtB,CAApD,CAA3B;AACA,sBAAM/R,SAAS,GAAG,MAAMnG,MAAM,CAACwF,aAAP,CAAqBa,sBAArB,CAA4C8R,YAA5C,CAAxB;AAEA,oBAAIsH,mBAAJ;;AACA,oBAAI;AACF;AACAA,qCAAmB,GAAGpf,qCAAM,CAACE,MAAP,CAAc,MAAMP,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB2B,SAAtB,EAAiCqZ,4BAAjC,CAApB,CAAtB;AACD,iBAHD,CAGE,gBAAM;AACN,wBAAM,IAAIjoB,MAAM,CAAChJ,WAAX,CAAuBwtB,gCAAvB,CAAN;AACD;;AAEDwD,gCAAgB,CAACplB,IAAjB,CAAsBpM,IAAI,CAACC,SAAL,CAAe;AACnCujB,wBAAM,EAAE,gBAD2B;AAEnCtmB,wBAAM,EAAE;AAAEw0B;AAAF;AAF2B,iBAAf,CAAtB;AAKA;AACD;AAED;;AACA,iBAAK,cAAL;AAAqB;AACnB,sBAAMtc,SAAS,GAAG,MAAMic,kCAAkC,CAACprB,KAAD,EAAQvH,QAAR,CAA1D;AAEA,sBAAM;AACJ0b,2CADI;AAEJG,0CAFI;AAGJmX;AAHI,oBAIFt0B,OAJJ;AAMA,sBAAMid,qBAAqB,GAAG,MAAMpI,MAAM,CAAC4J,KAAP,CAAa5B,qCAAb,CAAmD7E,SAAnD,EAA8D9C,qCAAM,CAACC,MAAP,CAAc6H,yBAAd,CAA9D,CAApC;AAEA,oBAAII,eAAJ;;AACA,oBAAI;AACF;AACA,wBAAMyP,kBAAkB,GAAG,MAAMhY,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB4D,qBAAtB,EAA6C/H,qCAAM,CAACC,MAAP,CAAcgI,wBAAd,CAA7C,CAAjC;AACAC,iCAAe,GAAG,MAAMvI,MAAM,CAAC4J,KAAP,CAAatC,8BAAb,CAA4C0Q,kBAA5C,CAAxB;AACD,iBAJD,CAIE,iBAAM;AACN,wBAAM,IAAIzgB,MAAM,CAAChJ,WAAX,CAAuBwtB,gCAAvB,CAAN;AACD;;AAED,sBAAM2D,yBAAyB,GAAGrf,qCAAM,CAACE,MAAP,CAAc,MAAMP,MAAM,CAAC4J,KAAP,CAAanB,IAAb,CAAkBF,eAAlB,EAAmClI,qCAAM,CAACC,MAAP,CAAcmf,mBAAd,CAAnC,CAApB,CAAlC;AAEAF,gCAAgB,CAACplB,IAAjB,CAAsBpM,IAAI,CAACC,SAAL,CAAe;AACnCujB,wBAAM,EAAE,gBAD2B;AAEnCtmB,wBAAM,EAAE;AAAEy0B;AAAF;AAF2B,iBAAf,CAAtB;AAKA;AACD;;AAED,iBAAK,4BAAL;AAAmC;AACjC;AACA7mB,uBAAO;AACP;AACD;;AAED,iBAAK,OAAL;AAAc;AACZ,sBAAMP,IAAI,GAAGnN,OAAO,CAACmN,IAArB;;AAEA,wBAAQA,IAAI,CAACpN,IAAb;AACE,uBAAK,iBAAL;AAAwB,0BAAM,IAAIqM,MAAM,CAAC/L,eAAX,CAA2B8M,IAAI,CAAC7M,MAAhC,CAAN;;AACxB,uBAAK,eAAL;AAAsB,0BAAM,IAAI8L,MAAM,CAAC5K,aAAX,EAAN;;AACtB,uBAAK,cAAL;AAAqB,0BAAM,IAAI4K,MAAM,CAACxK,YAAX,EAAN;;AACrB,uBAAK,mBAAL;AAA0B,0BAAM,IAAIwK,MAAM,CAACvK,iBAAX,EAAN;;AAE1B;AAAS;AACP,0BAAI7B,OAAO,CAACC,MAAR,KAAmBC,WAAW,CAAC,uBAAD,CAAlC,EAA6D,MAAM,IAAIkM,MAAM,CAAC1B,kBAAX,EAAN,CAA7D,KACK,MAAM,IAAI0B,MAAM,CAACtB,yBAAX,CAAqCqC,IAArC,CAAN;AACN;AATH;AAWD;;AAED,iBAAK,MAAL;AAAa;AACX;AACA;AACD;;AAED;AACEQ,oBAAM,CAAC,IAAI/N,KAAJ,0DAA4DmL,CAAC,CAACoC,IAA9D,EAAD,CAAN;AAvFJ;AAyFD,SA5FD,CA4FE,OAAOpC,CAAP,EAAU;AACV4C,gBAAM,CAAC5C,CAAD,CAAN;AACD;AACF,OAhGD;AAiGD,KAtGK,CAAN;AAwGAqpB,oBAAgB,CAAClJ,KAAjB;AACD,GAzHD,CAyHE,OAAOngB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,iBAAL;AACA,WAAK,aAAL;AACA,WAAK,eAAL;AACA,WAAK,aAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAfJ;AAkBD;AACF,CA/ID;;AAiJe;AACbkD,QADa;AAEbwe,SAFa;AAGbtd,QAHa;AAIboX,MAJa;AAKbsN,YALa;AAMbG,YANa;AAObE;AAPa,CAAf,E;;;;;;;;;;;;ACx7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMM,OAAO,GAAG,SAAhB;AAEA,MAAMC,uBAAuB,GAAG,GAAhC;AACA,MAAMC,uBAAuB,GAAG,GAAhC;AAEA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAM/iB,SAAM,GAAG+iB,WAAW,GAAG,IAA7B;AACA,MAAMC,cAAc,GAAGhjB,SAAvB;AAEA,MAAMijB,gBAAgB,GAAG,EAAzB;AAEA,MAAMC,eAAe,GAAG,OAAO,GAA/B,C,CAAmC;;AACnC,MAAMC,qBAAqB,GAAG,EAA9B;AAEA,MAAMC,4BAA4B,GAAG,2BAArC;AAEA,MAAMC,uBAAuB,GAAG;AAC9B,gBAAc,IADgB;AAE9B,iBAAe;AAFe,CAAhC;AAKA,MAAMC,UAAU,GAAG,KAAK,IAAxB;;AAEA,MAAMrE,qBAAmB,GAAG,MAAM;AAChC,MAAI9J,MAAE,CAACgB,YAAP,EAAqB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AACrB,MAAI,CAACkc,MAAE,CAAChkB,IAAH,CAAQwjB,IAAT,IAAiBQ,MAAE,CAACL,cAAxB,EAAwC,MAAM,IAAIta,MAAM,CAACtK,sBAAX,EAAN;AACxC,MAAI,CAACilB,MAAE,CAAChkB,IAAH,CAAQwjB,IAAT,IAAiB,CAAC0O,uBAAuB,CAAClO,MAAE,CAACH,cAAJ,CAA7C,EAAkE,MAAM,IAAIxa,MAAM,CAACzK,eAAX,EAAN;AACnE,CAJD;;AAMA,MAAMmvB,qBAAmB,GAAI/lB,CAAD,IAAO;AACjC,MAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,QAAItC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,cAAxB,EAAwC;AACtC,YAAM,IAAIf,MAAM,CAACxK,YAAX,EAAN;AACD,KAFD,MAEO,IAAImJ,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,uBAAD,CAArC,EAAgE;AACrE,YAAM,IAAIkM,MAAM,CAACzB,mBAAX,EAAN;AACD,KAFM,MAEA,IAAII,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,iBAAD,CAArC,EAA0D;AAC/D,YAAM,IAAIkM,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,GARD,MAQO,IAAIG,CAAC,CAAC/K,OAAF,IAAa+K,CAAC,CAAC/K,OAAF,CAAUixB,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAnD,EAAsD;AAC3D,UAAM,IAAI7kB,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,CAZD;;AAcA,MAAMuqB,qBAAN,CAA4B;AAC1Bt1B,aAAW,CAACu1B,UAAD,EAAa;AACtB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKxK,cAAL,GAAsB,IAAtB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKpG,KAAL,GAAa,IAAb;AACD;;AAED4Q,eAAa,GAAG;AACd,WAAO,KAAKH,UAAZ;AACD;;AAEDI,UAAQ,GAAG;AACT,WAAO,KAAK7Q,KAAZ;AACD;;AAED8Q,UAAQ,CAAC9Q,KAAD,EAAQ;AACd,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,QAAM+Q,SAAN,CAAgBlQ,KAAhB,EAAuB;AACrB,SAAK6P,OAAL,GAAe7P,KAAf;AAEA,UAAMmQ,OAAO,GAAG,IAAIjnB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AAC/C,WAAKmd,cAAL,GAAsBpd,OAAtB;AACA,WAAKqd,aAAL,GAAqBpd,MAArB;AAEAma,gBAAU,CAAC,MAAM;AAAEna,cAAM,CAAC,IAAI/N,KAAJ,CAAU,SAAV,CAAD,CAAN;AAA8B,OAAvC,EAAyCs1B,UAAzC,CAAV;AACD,KALe,CAAhB;AAOA,SAAKU,aAAL;AAEA,WAAOD,OAAP;AACD;;AAEDC,eAAa,GAAG;AACd,QAAI,CAAC,KAAKP,OAAN,IAAiB,KAAKA,OAAL,IAAgB,CAArC,EAAwC;AACtC;AACD;;AAED,QAAI,CAAC,KAAKvK,cAAN,IAAwB,CAAC,KAAKC,aAAlC,EAAiD;AAC/C;AACD;;AAED,QAAI,KAAKuK,YAAL,CAAkB,KAAKD,OAAvB,CAAJ,EAAqC;AACnC,UAAI,KAAKC,YAAL,CAAkB,KAAKD,OAAvB,KAAmC,SAAvC,EAAkD;AAChD,aAAKvK,cAAL;AACD,OAFD,MAEO;AACL,aAAKC,aAAL,CAAmB,KAAKuK,YAAL,CAAkB,KAAKD,OAAvB,CAAnB;AACD;AACF;AACF;;AAEDQ,gBAAc,CAACC,WAAD,EAAczK,IAAd,EAAoB;AAChC,QAAI,KAAKiK,YAAL,CAAkBQ,WAAW,CAACtQ,KAA9B,CAAJ,EAA0C;AAC1C,SAAK8P,YAAL,CAAkBQ,WAAW,CAACtQ,KAA9B,IAAuC6F,IAAvC;AACA,SAAKuK,aAAL;AACD;;AA3DyB;;AA8D5B,MAAMG,WAAN,CAAe;AACbl2B,aAAW,CAACm2B,aAAD,EAAgBC,eAAhB,EAAiC3J,YAAjC,EAA+CH,iBAA/C,EAAkE;AAC3E,SAAK+J,QAAL,GAAgBC,iBAAiB,CAACH,aAAD,CAAjC;AAEA,SAAK1H,KAAL,GAAa,EAAb;AACA,SAAKK,sBAAL,GAA8B,EAA9B;AACA,SAAKyH,OAAL,GAAe,EAAf;;AAEA,UAAMC,YAAY,GAAG,CAACrS,CAAD,EAAIsS,CAAJ,KAAU;AAC7B,UAAItS,CAAC,CAACwB,KAAF,GAAU8Q,CAAC,CAAC9Q,KAAZ,IAAsBxB,CAAC,CAACwB,KAAF,KAAY8Q,CAAC,CAAC9Q,KAAd,IAAuBxB,CAAC,CAACuS,cAAF,GAAmBD,CAAC,CAACC,cAAtE,EAAuF;AACrF,eAAO,CAAC,CAAR;AACD;;AACD,UAAIvS,CAAC,CAACwB,KAAF,GAAU8Q,CAAC,CAAC9Q,KAAZ,IAAsBxB,CAAC,CAACwB,KAAF,KAAY8Q,CAAC,CAAC9Q,KAAd,IAAuBxB,CAAC,CAACuS,cAAF,GAAmBD,CAAC,CAACC,cAAtE,EAAuF;AACrF,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KARD;;AAUA,SAAKhI,UAAL,GAAkB,IAAIiI,+BAAJ,CAAgB,EAAhB,EAAoBH,YAApB,CAAlB;AACA,SAAKI,sBAAL,GAA8B,EAA9B;AACA,SAAKvK,SAAL,GAAiB,CAAjB;AACA,SAAK3F,IAAL,GAAY,KAAZ;AACA,SAAKyC,KAAL,GAAa,IAAb;AACA,SAAKiN,eAAL,GAAuBA,eAAvB;AACA,SAAKzM,iBAAL,GAAyB,IAAIkN,GAAJ,EAAzB;AACA,SAAKnN,kBAAL,GAA0B,KAA1B;AAEA,SAAK+C,YAAL,GAAoBA,YAApB;AACA,SAAKH,iBAAL,GAAyBA,iBAAzB,CA3B2E,CA6B3E;;AACA,SAAKtD,sBAAL,GAA8B,IAAIjH,KAAJ,EAA9B;AAEA,SAAK6I,YAAL,GAAoB,EAApB;AACD;;AAED,QAAMN,iBAAN,CAAwBmL,YAAxB,EAAsClL,OAAtC,EAA+C3B,IAA/C,EAAqDC,UAArD,EAAiE;AAC/D,SAAK,IAAIrW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGijB,YAAY,CAAC5wB,MAAjC,EAAyC2N,CAAC,EAA1C,EAA8C;AAC5C,YAAMyjB,WAAW,GAAGR,YAAY,CAACjjB,CAAD,CAAhC;AACA,YAAMmT,KAAK,GAAGsQ,WAAW,CAACtQ,KAA1B,CAF4C,CAI5C;;AACA,UAAIA,KAAK,KAAK,KAAK0G,SAAL,GAAiB,CAA/B,EAAkC;AAChClhB,eAAO,CAAC+E,IAAR,6DAAkEyV,KAAlE,kCAA+F,KAAK0G,SAApG;AACA;AACD;;AAED,YAAMyK,eAAe,GAAG,MAAM,KAAKC,gBAAL,CAAsB,KAAK5N,KAA3B,EAAkC8M,WAAlC,EAA+C1L,OAA/C,CAA9B;AACA,WAAK8B,SAAL,GAAiB1G,KAAjB;;AAEA,WAAK,IAAIqR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,sBAAL,CAA4B/xB,MAAhD,EAAwDmyB,CAAC,EAAzD,EAA6D;AAC3D,YAAI,CAAC,KAAKJ,sBAAL,CAA4BI,CAA5B,CAAD,IAAmCrR,KAAK,GAAG,KAAKiR,sBAAL,CAA4BI,CAA5B,EAA+BtB,aAA/B,EAA/C,EAA+F;AAC7F;AACD;;AACD,aAAKkB,sBAAL,CAA4BI,CAA5B,EAA+BhB,cAA/B,CAA8CP,YAAY,CAACjjB,CAAD,CAA1D,EAA+DskB,eAA/D;AACD;;AAED,UAAI,KAAKpQ,IAAL,IAAaoQ,eAAe,KAAK,SAArC,EAAgD;AAC9C,aAAKT,QAAL,CAAc,KAAKY,QAAL,EAAd;AACD;AACF;;AAED,QAAI,CAAC,KAAKvQ,IAAV,EAAgB;AACd,WAAKA,IAAL,GAAY,IAAZ,CADc,CACG;;AACjB,WAAKkC,IAAL,GAAYA,IAAZ;AACA,WAAKC,UAAL,GAAkBA,UAAlB;AACA,WAAKwN,QAAL,CAAc,KAAKY,QAAL,EAAd;AACA,WAAKb,eAAL,GALc,CAKS;AACxB;AACF;;AAED,QAAMlM,WAAN,CAAkBJ,MAAlB,EAA0BE,WAA1B,EAAuC;AACrC;AACA,QAAI,KAAKqC,SAAL,KAAmB,CAAvB,EAA0B;AACxBlhB,aAAO,CAAC+E,IAAR,gEAAqE,KAAKmc,SAA1E;AACA;AACD;;AAED,SAAK,IAAI7Z,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsX,MAAM,CAAC4E,UAAP,CAAkB7pB,MAAtC,EAA8C2N,CAAC,EAA/C,EAAmD;AACjD,YAAM0kB,SAAS,GAAGpN,MAAM,CAAC4E,UAAP,CAAkBlc,CAAlB,CAAlB;AACA,YAAMoc,MAAM,GAAG9E,MAAM,CAAC4E,UAAP,CAAkBlc,CAAlB,EAAqBoc,MAApC;AACA,YAAMvM,IAAI,GAAGyH,MAAM,CAAC2E,KAAP,CAAajc,CAAb,CAAb;AACA,YAAMsc,sBAAsB,GAAGhF,MAAM,CAACgF,sBAAP,CAA8Btc,CAA9B,CAA/B;;AAEA,UAAI6P,IAAI,CAAC8U,IAAL,IAAa9U,IAAI,CAAC8U,IAAL,CAAUC,uBAA3B,EAAoD;AAClD/U,YAAI,CAAC8U,IAAL,CAAUE,iBAAV,GAA8B,MAAMriB,MAAM,CAACoG,MAAP,CAAcvC,mBAAd,CAAkCwJ,IAAI,CAAC8U,IAAL,CAAUC,uBAA5C,CAApC;AACA,aAAKb,OAAL,CAAalU,IAAI,CAAC8U,IAAL,CAAUG,MAAvB,IAAiC1I,MAAjC;AACD;;AAED,WAAKH,KAAL,CAAWG,MAAX,IAAqBvM,IAArB;AACA,WAAKyM,sBAAL,CAA4BF,MAA5B,IAAsCE,sBAAtC;AACA,WAAKJ,UAAL,CAAgB6I,MAAhB,CAAuBL,SAAvB;AACD;;AAED,SAAK7K,SAAL,GAAiBrC,WAAjB;AACD;;AAED,QAAM+M,gBAAN,CAAuBv0B,GAAvB,EAA4ByzB,WAA5B,EAAyC1L,OAAzC,EAAkD;AAChD,UAAM5E,KAAK,GAAGsQ,WAAW,CAACtQ,KAA1B;AACA,UAAM3d,OAAO,GAAGiuB,WAAW,CAACjuB,OAA5B;;AAEA,YAAQA,OAAR;AACE,WAAK,QAAL;AAAe;AACb,cAAI;AACF,kBAAMwvB,MAAM,GAAG,MAAMxiB,MAAM,CAACoG,MAAP,CAAc3B,WAAd,CAA0BjX,GAA1B,EAA+ByzB,WAAW,CAACuB,MAA3C,CAArB;AACA,kBAAM5I,MAAM,GAAG4I,MAAM,CAACC,EAAtB;AACA,kBAAMpV,IAAI,GAAGmV,MAAM,CAACnV,IAApB;AACA,kBAAMqV,SAAS,GAAG,KAAKC,0BAAL,CAAgC1B,WAAhC,CAAlB;AACA,kBAAM2B,WAAW,GAAG3B,WAAW,CAAC2B,WAAhC;AAEA,iBAAKC,cAAL,CAAoBjJ,MAApB;AACA,mBAAO,KAAKkJ,WAAL,CAAiBlJ,MAAjB,EAAyBjJ,KAAzB,EAAgCtD,IAAhC,EAAsCqV,SAAtC,EAAiDE,WAAjD,CAAP;AACD,WATD,CASE,OAAOd,eAAP,EAAwB;AACxB,mBAAOA,eAAP;AACD;AACF;;AAED,WAAK,QAAL;AAAe;AACb,cAAI;AACF,kBAAMU,MAAM,GAAG,MAAMxiB,MAAM,CAACoG,MAAP,CAAc3B,WAAd,CAA0BjX,GAA1B,EAA+ByzB,WAAW,CAACuB,MAA3C,CAArB;AACA,kBAAM5I,MAAM,GAAG4I,MAAM,CAACC,EAAtB;AACA,kBAAMpV,IAAI,GAAGmV,MAAM,CAACnV,IAApB;AACA,kBAAM0V,SAAS,GAAG,KAAKJ,0BAAL,CAAgC1B,WAAhC,CAAlB;AACA,kBAAM+B,GAAG,GAAGR,MAAM,CAACQ,GAAnB;AACA,kBAAMJ,WAAW,GAAG3B,WAAW,CAAC2B,WAAhC;AAEA,iBAAKK,cAAL,CAAoBrJ,MAApB,EAA4BoJ,GAA5B,EAAiCD,SAAjC,EAA4CxN,OAA5C,EAAqDqN,WAArD,EAAkE,YAAlE;AACA,mBAAO,KAAKM,WAAL,CAAiBtJ,MAAjB,EAAyBvM,IAAzB,EAA+B2V,GAA/B,EAAoCD,SAApC,EAA+CH,WAA/C,CAAP;AACD,WAVD,CAUE,OAAOd,eAAP,EAAwB;AACxB,mBAAOA,eAAP;AACD;AACF;;AAED,WAAK,QAAL;AAAe;AACb,cAAI;AACF,kBAAMU,MAAM,GAAG,MAAMxiB,MAAM,CAACoG,MAAP,CAAc3B,WAAd,CAA0BjX,GAA1B,EAA+ByzB,WAAW,CAACuB,MAA3C,CAArB;AACA,kBAAM5I,MAAM,GAAG4I,MAAM,CAACC,EAAtB;AACA,kBAAMU,SAAS,GAAG,KAAKR,0BAAL,CAAgC1B,WAAhC,CAAlB;AACA,kBAAM+B,GAAG,GAAGR,MAAM,CAACQ,GAAnB;AAEA,iBAAKI,sBAAL,CAA4BxJ,MAA5B,EAAoCoJ,GAApC,EAAyCG,SAAzC,EAAoD5N,OAApD,EAA6D,YAA7D;AACA,mBAAO,KAAK8N,WAAL,CAAiBzJ,MAAjB,CAAP;AACD,WARD,CAQE,OAAOkI,eAAP,EAAwB;AACxB,mBAAOA,eAAP;AACD;AACF;;AAED,WAAK,kBAAL;AAAyB;AACvB,cAAI;AACF,kBAAMzI,KAAK,GAAG4H,WAAW,CAACqC,UAA1B;AACA,kBAAMC,WAAW,GAAG,KAAKZ,0BAAL,CAAgC1B,WAAhC,CAApB;AACA,kBAAMuC,cAAc,GAAG,EAAvB;;AAEA,iBAAK,MAAMC,SAAX,IAAwBpK,KAAxB,EAA+B;AAC7BmK,4BAAc,CAAC5jB,IAAf,CAAoB6jB,SAAS,CAACjB,MAAV,IAAoBxiB,MAAM,CAACoG,MAAP,CAAc3B,WAAd,CAA0BjX,GAA1B,EAA+Bi2B,SAAS,CAACjB,MAAzC,CAAxC;AACD;;AACD,kBAAMkB,OAAO,GAAG,MAAM7pB,OAAO,CAAC6d,GAAR,CAAY8L,cAAZ,CAAtB;AAEA,iBAAKG,wBAAL,CAA8BtK,KAA9B,EAAqCqK,OAArC,EAA8CH,WAA9C,EAA2DhO,OAA3D;AACA,mBAAO,KAAKqO,qBAAL,CAA2BjT,KAA3B,EAAkC0I,KAAlC,EAAyCqK,OAAzC,EAAkDH,WAAlD,CAAP;AACD,WAZD,CAYE,OAAOzB,eAAP,EAAwB;AACxB,mBAAOA,eAAP;AACD;AACF;;AAED,WAAK,YAAL;AAAmB;AACjB,cAAI;AACF,kBAAM+B,oBAAoB,GAAG,MAAM7jB,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsBhX,GAAtB,EAA2B6S,qCAAM,CAACC,MAAP,CAAc2gB,WAAW,CAACoB,iBAA1B,CAA3B,CAAnC;AACA,kBAAMA,iBAAiB,GAAG,MAAMriB,MAAM,CAACoG,MAAP,CAActC,gBAAd,CAA+B+f,oBAA/B,CAAhC;AACA,kBAAMzB,uBAAuB,GAAG,MAAMpiB,MAAM,CAACoG,MAAP,CAAc3C,mBAAd,CAAkC4e,iBAAlC,CAAtC;AACA,kBAAMyB,YAAY,GAAG,MAAM9jB,MAAM,CAACoG,MAAP,CAAc3B,WAAd,CAA0B4d,iBAA1B,EAA6CpB,WAAW,CAAC6C,YAAzD,CAA3B;AAEA,kBAAMlK,MAAM,GAAGkK,YAAY,CAAClK,MAA5B;AACA,kBAAMmK,WAAW,GAAGD,YAAY,CAACd,GAAjC;AACA,kBAAM;AAAEgB,sBAAF;AAAYC,sBAAZ;AAAsBC;AAAtB,gBAAmCJ,YAAzC;AACA,kBAAMxB,MAAM,GAAGrB,WAAW,CAACqB,MAA3B;AACA,kBAAM6B,cAAc,GAAG,KAAKxB,0BAAL,CAAgC1B,WAAhC,CAAvB;AAEA,iBAAKmD,kBAAL,CAAwBxK,MAAxB,EAAgCmK,WAAhC,EAA6CI,cAA7C,EAA6D5O,OAA7D,EAAsE,YAAtE;AACA,mBAAO,KAAK8O,eAAL,CAAqBzK,MAArB,EAA6BuK,cAA7B,EAA6CJ,WAA7C,EAA0D1B,iBAA1D,EAA6ED,uBAA7E,EAAsG4B,QAAtG,EAAgH1B,MAAhH,EAAwH2B,QAAxH,EAAkIC,QAAlI,CAAP;AACD,WAdD,CAcE,OAAOpC,eAAP,EAAwB;AACxB,mBAAOA,eAAP;AACD;AACF;;AAED,WAAK,UAAL;AAAiB;AACf;AACA;AACD;;AAED;AAAS;AACP3rB,iBAAO,CAAC+E,IAAR,4BAAiClI,OAAjC;AACA;AACD;AA5FH;AA8FD;;AAED2vB,4BAA0B,CAAC1B,WAAD,EAAc;AACtC,QAAI,CAAC,KAAKvM,kBAAV,EAA8B,OAAOsF,SAAP;AAC9B,WAAO;AACLsK,eAAS,EAAErD,WAAW,CAACqD,SADlB;AAEL7T,YAAM,EAAEwQ,WAAW,CAACxQ;AAFf,KAAP;AAID;;AAEDoS,gBAAc,CAACjJ,MAAD,EAAS;AACrB,QAAI,KAAKH,KAAL,CAAWG,MAAX,CAAJ,EAAwB;AACtB,YAAM,IAAIriB,MAAM,CAAC9F,iBAAX,EAAN;AACD;AACF;;AAEDwxB,gBAAc,CAACrJ,MAAD,EAASoJ,GAAT,EAAcD,SAAd,EAAyBxN,OAAzB,EAAkCqN,WAAlC,EAA+C5vB,OAA/C,EAAwD;AACpE,SAAKowB,sBAAL,CAA4BxJ,MAA5B,EAAoCoJ,GAApC,EAAyCD,SAAzC,EAAoDxN,OAApD,EAA6DviB,OAA7D,EADoE,CAGpE;;AACA,UAAM;AAAE0vB;AAAF,QAAgB,KAAK5I,sBAAL,CAA4BF,MAA5B,CAAtB;;AAEA,QAAIgJ,WAAW,IAAIA,WAAW,KAAK,KAAnC,EAA0C;AACxC,UAAI,CAACF,SAAL,EAAgB,OADwB,CACjB;;AACvB,YAAM6B,eAAe,GAAG7B,SAAS,CAACjS,MAAlC;AACA,YAAM+T,eAAe,GAAGzB,SAAS,CAACtS,MAAlC;;AAEA,UAAI8T,eAAe,KAAKC,eAApB,IAAuCA,eAAe,KAAKjP,OAA/D,EAAwE;AACtE,cAAM,IAAIhe,MAAM,CAACzD,0BAAX,EAAN;AACD;AACF;AACF;;AAEDsvB,wBAAsB,CAACxJ,MAAD,EAASoJ,GAAT,EAAcO,WAAd,EAA2BhO,OAA3B,EAAoCviB,OAApC,EAA6C;AACjE,UAAMqa,IAAI,GAAG,KAAKoM,KAAL,CAAWG,MAAX,CAAb;AACA,QAAI,CAACvM,IAAL,EAAW,MAAM,IAAI9V,MAAM,CAAC7F,gBAAX,EAAN;AAEX,UAAM+yB,cAAc,GAAG,KAAKC,oBAAL,CAA0B9K,MAA1B,CAAvB;;AACA,QAAIoJ,GAAG,IAAIyB,cAAX,EAA2B;AACzB,YAAM,IAAIltB,MAAM,CAAC5F,kBAAX,EAAN;AACD;;AAED,SAAKgzB,yBAAL,CAA+B/K,MAA/B,EAAuC2J,WAAvC,EAAoDhO,OAApD,EAA6DviB,OAA7D;AACD;;AAEDoxB,oBAAkB,CAACxK,MAAD,EAASoJ,GAAT,EAAcmB,cAAd,EAA8B5O,OAA9B,EAAuCviB,OAAvC,EAAgD;AAChE,UAAMqa,IAAI,GAAG,KAAKoM,KAAL,CAAWG,MAAX,CAAb;AACA,QAAI,CAACvM,IAAL,EAAW,MAAM,IAAI9V,MAAM,CAAC7F,gBAAX,EAAN;AAEX,UAAM+yB,cAAc,GAAG,KAAKG,oBAAL,CAA0BhL,MAA1B,CAAvB;;AAEA,QAAIoJ,GAAG,IAAIyB,cAAX,EAA2B;AACzB,YAAM,IAAIltB,MAAM,CAACxF,kBAAX,EAAN;AACD;;AAED,SAAK4yB,yBAAL,CAA+B/K,MAA/B,EAAuCuK,cAAvC,EAAuD5O,OAAvD,EAAgEviB,OAAhE;AACD;;AAED2xB,2BAAyB,CAAC/K,MAAD,EAAS2J,WAAT,EAAsBhO,OAAtB,EAA+BviB,OAA/B,EAAwC;AAC/D,UAAM;AAAE0vB,eAAF;AAAaE;AAAb,QAA6B,KAAK9I,sBAAL,CAA4BF,MAA5B,CAAnC;;AACA,QAAI8I,SAAS,IAAIa,WAAb,IAA4BX,WAAhC,EAA6C;AAC3C,YAAM2B,eAAe,GAAG7B,SAAS,CAACjS,MAAlC;AACA,YAAMoU,gBAAgB,GAAGtB,WAAW,CAAC9S,MAArC;AAEA,UAAIqU,gBAAgB,GAAG,KAAvB;AACA,YAAM;AAAEC,mBAAF;AAAeC;AAAf,UAAyBpC,WAA/B;;AAEA,UAAIiC,gBAAgB,KAAKtP,OAArB,IAAgCsP,gBAAgB,KAAKN,eAAzD,EAA0E;AACxEO,wBAAgB,GAAG,IAAnB;AACD,OAFD,MAEO,IAAI,CAACC,WAAD,IAAgBC,KAApB,EAA2B;AAChC,aAAK,MAAM;AAAEvU;AAAF,SAAX,IAAyBuU,KAAzB,EAAgC;AAC9BF,0BAAgB,GAAGD,gBAAgB,KAAKpU,MAAxC;AACA,cAAIqU,gBAAJ,EAAsB;AACvB;AACF;;AAED,UAAI,CAACA,gBAAL,EAAuB,MAAM,IAAIvtB,MAAM,CAAC1D,uBAAX,CAAmCb,OAAnC,CAAN;AACxB;AACF;;AAEDiyB,YAAU,CAACrL,MAAD,EAAS;AACjB,WAAOnN,oBAAoB,CAAC,KAAKgN,KAAN,EAAaG,MAAb,CAA3B;AACD;;AAEDkJ,aAAW,CAAClJ,MAAD,EAASjJ,KAAT,EAAgB6R,MAAhB,EAAwBE,SAAxB,EAAmCE,WAAnC,EAAgDlB,cAAhD,EAAgE;AACzE,UAAMrU,IAAI,GAAG;AAAEsD;AAAF,KAAb;AACA,QAAI,OAAO+Q,cAAP,KAA0B,QAA9B,EAAwCrU,IAAI,CAACqU,cAAL,GAAsBA,cAAtB;AAExC,SAAKjI,KAAL,CAAWG,MAAX,wCACKvM,IADL;AAEEmV,YAFF;AAGEQ,SAAG,EAAE;AAHP;AAKA,SAAKlJ,sBAAL,CAA4BF,MAA5B,IAAsC;AACpC8I,eADoC;AAEpCE;AAFoC,KAAtC;AAIA,SAAKlJ,UAAL,CAAgB6I,MAAhB,qCAA4BlV,IAA5B;AAAkCuM;AAAlC;;AAEA,QAAIgJ,WAAW,IAAIA,WAAW,CAACoC,KAA/B,EAAsC;AACpC,WAAK,MAAM;AAAEvU,cAAF;AAAUhkB;AAAV,OAAX,IAAmCm2B,WAAW,CAACoC,KAA/C,EAAsD;AACpD,aAAKrQ,iBAAL,CAAuBpW,GAAvB,CAA2BkS,MAA3B,EAAmChkB,QAAnC;AACD;AACF;;AAED,WAAOkzB,OAAP;AACD;;AAEDuD,aAAW,CAACtJ,MAAD,EAAS4I,MAAT,EAAiBQ,GAAjB,EAAsBD,SAAtB,EAAiCH,WAAjC,EAA8C;AACvD,SAAKnJ,KAAL,CAAWG,MAAX,EAAmB4I,MAAnB,GAA4BA,MAA5B;AACA,SAAK/I,KAAL,CAAWG,MAAX,EAAmBoJ,GAAnB,GAAyBA,GAAzB;AAEA,SAAKlJ,sBAAL,CAA4BF,MAA5B,EAAoCmJ,SAApC,GAAgDA,SAAhD;;AAEA,QAAIH,WAAW,KAAK,KAApB,EAA2B;AACzB,aAAO,KAAK9I,sBAAL,CAA4BF,MAA5B,EAAoCgJ,WAA3C;AACD,KAFD,MAEO,IAAIA,WAAJ,EAAiB;AACtB,WAAK9I,sBAAL,CAA4BF,MAA5B,EAAoCgJ,WAApC,GAAkDA,WAAlD;;AAEA,UAAIA,WAAW,CAACoC,KAAhB,EAAuB;AACrB,aAAK,MAAM;AAAEvU,gBAAF;AAAUhkB;AAAV,SAAX,IAAmCm2B,WAAW,CAACoC,KAA/C,EAAsD;AACpD,eAAKrQ,iBAAL,CAAuBpW,GAAvB,CAA2BkS,MAA3B,EAAmChkB,QAAnC;AACD;AACF;AACF;;AAED,WAAOkzB,OAAP;AACD;;AAED0E,iBAAe,CAACzK,MAAD,EAASuK,cAAT,EAAyBnB,GAAzB,EAA8BX,iBAA9B,EAAiDD,uBAAjD,EAA0E4B,QAA1E,EAAoF1B,MAApF,EAA4F2B,QAA5F,EAAsGC,QAAtG,EAAgH;AAC7H,UAAMgB,YAAY,GAAG,KAAKzL,KAAL,CAAWG,MAAX,EAAmBuI,IAAxC;AACA,QAAI+C,YAAJ,EAAkB,OAAO,KAAK3D,OAAL,CAAa2D,YAAY,CAAC5C,MAA1B,CAAP;AAElB,SAAK7I,KAAL,CAAWG,MAAX,EAAmBuI,IAAnB,GAA0B;AACxB6B,cADwB;AAExB1B,YAFwB;AAGxB2B,cAHwB;AAIxBC,cAJwB;AAKxB7B,uBALwB;AAMxBD,6BANwB;AAOxBY;AAPwB,KAA1B;AASA,SAAKlJ,sBAAL,CAA4BF,MAA5B,EAAoCuK,cAApC,GAAqDA,cAArD;AACA,SAAK5C,OAAL,CAAae,MAAb,IAAuB1I,MAAvB;AACA,WAAO+F,OAAP;AACD;;AAED0D,aAAW,CAACzJ,MAAD,EAAS;AAClB,SAAKF,UAAL,CAAgByL,MAAhB,CAAuB,KAAK1L,KAAL,CAAWG,MAAX,CAAvB;AACA,WAAO,KAAKH,KAAL,CAAWG,MAAX,CAAP;AACA,WAAO,KAAKE,sBAAL,CAA4BF,MAA5B,CAAP;AACA,WAAO+F,OAAP;AACD;;AAEDgE,0BAAwB,CAACtK,KAAD,EAAQqK,OAAR,EAAiBH,WAAjB,EAA8BhO,OAA9B,EAAuC;AAC7D,UAAM6P,aAAa,GAAG,EAAtB;;AAEA,SAAK,IAAI5nB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6b,KAAK,CAACxpB,MAA1B,EAAkC2N,CAAC,EAAnC,EAAuC;AACrC,YAAMimB,SAAS,GAAGpK,KAAK,CAAC7b,CAAD,CAAvB;AACA,YAAM;AAAExK,eAAF;AAAW4vB;AAAX,UAA2Ba,SAAjC;AAEA,YAAM7J,MAAM,GAAG8J,OAAO,CAAClmB,CAAD,CAAP,CAAWilB,EAA1B;AACA,YAAMO,GAAG,GAAGU,OAAO,CAAClmB,CAAD,CAAP,CAAWwlB,GAAvB;AAEA,UAAIoC,aAAa,CAACxL,MAAD,CAAjB,EAA2B,MAAM,IAAIriB,MAAM,CAACtE,kBAAX,EAAN;AAC3BmyB,mBAAa,CAACxL,MAAD,CAAb,GAAwB,IAAxB;;AAEA,cAAQ5mB,OAAR;AACE,aAAK,QAAL;AACE,eAAK6vB,cAAL,CAAoBjJ,MAApB;AACA;;AAEF,aAAK,QAAL;AACE,eAAKqJ,cAAL,CAAoBrJ,MAApB,EAA4BoJ,GAA5B,EAAiCO,WAAjC,EAA8ChO,OAA9C,EAAuDqN,WAAvD,EAAoE5vB,OAApE;AACA;;AAEF,aAAK,QAAL;AACE,eAAKowB,sBAAL,CAA4BxJ,MAA5B,EAAoCoJ,GAApC,EAAyCO,WAAzC,EAAsDhO,OAAtD,EAA+DviB,OAA/D;AACA;AAXJ;AAaD;AACF;;AAED4wB,uBAAqB,CAACjT,KAAD,EAAQ0I,KAAR,EAAeqK,OAAf,EAAwBH,WAAxB,EAAqC;AACxD,SAAK,IAAI/lB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6b,KAAK,CAACxpB,MAA1B,EAAkC2N,CAAC,EAAnC,EAAuC;AACrC,YAAMimB,SAAS,GAAGpK,KAAK,CAAC7b,CAAD,CAAvB;AAEA,YAAMoc,MAAM,GAAG8J,OAAO,CAAClmB,CAAD,CAAP,CAAWilB,EAA1B;AACA,YAAMpV,IAAI,GAAGqW,OAAO,CAAClmB,CAAD,CAAP,CAAW6P,IAAxB;AACA,YAAM2V,GAAG,GAAGU,OAAO,CAAClmB,CAAD,CAAP,CAAWwlB,GAAvB;AACA,YAAMJ,WAAW,GAAGa,SAAS,CAACb,WAA9B;;AAEA,cAAQa,SAAS,CAACzwB,OAAlB;AACE,aAAK,QAAL;AACE,eAAK8vB,WAAL,CAAiBlJ,MAAjB,EAAyBjJ,KAAzB,EAAgCtD,IAAhC,EAAsCkW,WAAtC,EAAmDX,WAAnD,EAAgEplB,CAAhE;AACA;;AAEF,aAAK,QAAL;AACE,eAAK0lB,WAAL,CAAiBtJ,MAAjB,EAAyBvM,IAAzB,EAA+B2V,GAA/B,EAAoCO,WAApC,EAAiDX,WAAjD;AACA;;AAEF,aAAK,QAAL;AACE,eAAKS,WAAL,CAAiBzJ,MAAjB,EAAyBoJ,GAAzB;AACA;AAXJ;AAaD;;AAED,WAAOrD,OAAP;AACD;;AAED0F,+BAA6B,GAAG;AAC9B,UAAMC,qBAAqB,GAAG,IAAIhF,qBAAJ,CAA0B,KAAKjJ,SAA/B,CAA9B;AACA,UAAM7Z,CAAC,GAAG,KAAKokB,sBAAL,CAA4BhiB,IAA5B,CAAiC0lB,qBAAjC,CAAV;AACAA,yBAAqB,CAAC1E,QAAtB,CAA+BpjB,CAAC,GAAG,CAAnC;AACA,WAAO8nB,qBAAP;AACD;;AAEDC,iCAA+B,CAACC,kBAAD,EAAqB;AAClD,WAAO,KAAK5D,sBAAL,CAA4B4D,kBAAkB,CAAC7E,QAAnB,EAA5B,CAAP;AACD;;AAEDsB,UAAQ,GAAG;AACT,UAAM3kB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkc,UAAL,CAAgBpa,KAAhB,CAAsBzP,MAA1C,EAAkD2N,CAAC,EAAnD,EAAuD;AACrD,YAAMoc,MAAM,GAAG,KAAKF,UAAL,CAAgBpa,KAAhB,CAAsB9B,CAAtB,EAAyBoc,MAAxC;AACA,YAAM4I,MAAM,GAAG,KAAK/I,KAAL,CAAWG,MAAX,EAAmB4I,MAAlC;AACA,YAAMnV,IAAI,GAAG;AAAEuM,cAAF;AAAUvM,YAAI,EAAEmV;AAAhB,OAAb,CAHqD,CAKrD;;AACA,UAAI,KAAK/I,KAAL,CAAWG,MAAX,EAAmBuI,IAAvB,EAA6B;AAC3B,cAAM;AAAEG,gBAAF;AAAU0B,kBAAV;AAAoBC;AAApB,YAAiC,KAAKxK,KAAL,CAAWG,MAAX,EAAmBuI,IAA1D;AACA9U,YAAI,CAACiV,MAAL,GAAcA,MAAd;AACAjV,YAAI,CAAC2W,QAAL,GAAgBA,QAAhB;AACA3W,YAAI,CAAC4W,QAAL,GAAgBA,QAAhB;AACD,OAXoD,CAarD;;;AACA,WAAK,MAAMwB,IAAX,IAAmB,CAAC,WAAD,EAAc,WAAd,EAA2B,gBAA3B,CAAnB,EAAiE;AAC/D,YAAI,KAAK3L,sBAAL,CAA4BF,MAA5B,EAAoC6L,IAApC,CAAJ,EAA+C;AAC7C,gBAAM;AAAEnB,qBAAF;AAAa7T;AAAb,cAAwB,KAAKqJ,sBAAL,CAA4BF,MAA5B,EAAoC6L,IAApC,CAA9B;AACA,gBAAMlC,WAAW,GAAG;AAAEe;AAAF,WAApB;AACA,gBAAM73B,QAAQ,GAAG,KAAKkoB,iBAAL,CAAuB+Q,GAAvB,CAA2BjV,MAA3B,CAAjB;;AACA,cAAIhkB,QAAQ,IAAI,IAAhB,EAAsB;AACpB82B,uBAAW,CAACoC,WAAZ,GAA0B,IAA1B;AACD,WAFD,MAEO;AACLpC,uBAAW,CAAC92B,QAAZ,GAAuBA,QAAvB;AACD;;AACD4gB,cAAI,CAACoY,IAAD,CAAJ,GAAalC,WAAb;AACD;AACF,OA1BoD,CA4BrD;;;AACA,UAAI,KAAKzJ,sBAAL,CAA4BF,MAA5B,EAAoCgJ,WAAxC,EAAqD;AACnD,cAAM;AAAEmC,qBAAF;AAAeC;AAAf,YAAyB,KAAKlL,sBAAL,CAA4BF,MAA5B,EAAoCgJ,WAAnE;AACA,cAAMA,WAAW,GAAG,EAApB;AACA,YAAImC,WAAJ,EAAiBnC,WAAW,CAACmC,WAAZ,GAA0BA,WAA1B;;AAEjB,YAAIC,KAAJ,EAAW;AACTpC,qBAAW,CAACoC,KAAZ,GAAoB,EAApB;;AACA,eAAK,MAAM;AAAEvU;AAAF,WAAX,IAAyBuU,KAAzB,EAAgC;AAC9B,kBAAMv4B,QAAQ,GAAG,KAAKkoB,iBAAL,CAAuB+Q,GAAvB,CAA2BjV,MAA3B,CAAjB;AACA,gBAAIhkB,QAAJ,EAAcm2B,WAAW,CAACoC,KAAZ,CAAkBplB,IAAlB,CAAuB;AAAEnT;AAAF,aAAvB;AACf;AACF;;AAED4gB,YAAI,CAACuV,WAAL,GAAmBA,WAAnB;AACD;;AAEDtlB,YAAM,CAACsC,IAAP,CAAYyN,IAAZ;AACD;;AACD,WAAO/P,MAAP;AACD;;AAEDonB,sBAAoB,CAAC9K,MAAD,EAAS;AAC3B,WAAO,KAAKH,KAAL,CAAWG,MAAX,EAAmBoJ,GAA1B;AACD;;AAED4B,sBAAoB,CAAChL,MAAD,EAAS;AAC3B,WAAO,KAAKH,KAAL,CAAWG,MAAX,EAAmBuI,IAAnB,IAA2B,KAAK1I,KAAL,CAAWG,MAAX,EAAmBuI,IAAnB,CAAwBa,GAA1D;AACD;;AAED,QAAMzO,+BAAN,CAAsCF,wBAAtC,EAAgEG,2BAAhE,EAA6F;AAC3F,UAAMoR,uBAAuB,GAAG,MAAM5lB,MAAM,CAACoG,MAAP,CAAclD,mBAAd,CAAkC,KAAKoU,iBAAvC,EAA0DjX,qCAAM,CAACC,MAAP,CAAckU,2BAAd,CAA1D,CAAtC;AACA,UAAMF,WAAW,GAAG,MAAMtU,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BihB,uBAA5B,EAAqDvR,wBAArD,CAA1B;AACA,WAAOC,WAAP;AACD;;AAheY;;AAmef,MAAMgN,iBAAiB,GAAIH,aAAD,IAAmB;AAC3C,SAAQ1H,KAAD,IAAW;AAChB,QAAI;AACF0H,mBAAa,CAAC1H,KAAD,CAAb;AACD,KAFD,CAEE,OAAOvjB,CAAP,EAAU;AACVC,aAAO,CAACT,KAAR,CAAc,+CAAd,EAA+DQ,CAA/D;AACD;AACF,GAND;AAOD,CARD;;AAUA,MAAM2vB,uBAAuB,GAAG,CAAC/R,QAAD,EAAWqN,aAAX,EAA0BC,eAA1B,KAA8C;AAC5E;AACAtN,UAAQ,CAACuN,QAAT,GAAoBC,iBAAiB,CAACH,aAAD,CAArC,CAF4E,CAI5E;;AACA,QAAM2E,sBAAsB,GAAGhS,QAAQ,CAACsN,eAAxC;;AACAtN,UAAQ,CAACsN,eAAT,GAA2B,MAAM;AAC/B0E,0BAAsB;AACtB1E,mBAAe;AAChB,GAHD,CAN4E,CAW5E;;;AACA,MAAItN,QAAQ,CAACpC,IAAb,EAAmB;AACjBoC,YAAQ,CAACuN,QAAT,CAAkBvN,QAAQ,CAACmO,QAAT,EAAlB;AACAnO,YAAQ,CAACsN,eAAT;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAnBD;;AAqBA,MAAM2E,8BAA8B,GAAIC,qBAAD,IAA2B;AAChE,QAAMC,uBAAuB,GAAGD,qBAAqB,CAAC/iB,KAAtB,CAA4B,CAA5B,EAA+B+c,gBAA/B,CAAhC;AACA,QAAMvI,YAAY,GAAGza,mBAAmB,CAACipB,uBAAD,EAA0B,IAA1B,CAAxC;AACA,MAAI,CAACxO,YAAD,IAAiBA,YAAY,CAAC5nB,MAAb,KAAwBmwB,gBAA7C,EAA+D,MAAM,IAAIzoB,MAAM,CAACzH,iBAAX,EAAN;AAC/D,SAAO2nB,YAAP;AACD,CALD;;AAOA,MAAMyO,iCAAiC,GAAIC,gBAAD,IAAsB;AAC9D,QAAMH,qBAAqB,GAAG3lB,qCAAM,CAACC,MAAP,CAAc6lB,gBAAd,CAA9B;;AACA,QAAM1O,YAAY,GAAGsO,8BAA8B,CAACC,qBAAD,CAAnD;;AACA,QAAMI,cAAc,GAAGJ,qBAAqB,CAAC/iB,KAAtB,CAA4B+c,gBAA5B,CAAvB;AACA,SAAO;AAAEvI,gBAAF;AAAgB2O;AAAhB,GAAP;AACD,CALD;;AAOA,MAAMC,yBAAyB,GAAG,OAAOC,UAAP,EAAmBnF,aAAnB,EAAkCC,eAAlC,KAAsD;AACtF,MAAImF,6BAAJ,EAAmCjP,iBAAnC;;AACA,MAAI;AACFiP,iCAA6B,GAAGL,iCAAiC,CAACI,UAAD,CAAjE;AACAhP,qBAAiB,GAAG,MAAMtX,MAAM,CAACuD,IAAP,CAAYvC,aAAZ,CAA0BulB,6BAA6B,CAACH,cAAxD,CAA1B;AACD,GAHD,CAGE,gBAAM;AACN,UAAM,IAAI7uB,MAAM,CAACzH,iBAAX,EAAN;AACD;;AACD,QAAM;AAAE2nB;AAAF,MAAmB8O,6BAAzB;AAEA,QAAM;AAAE7V,cAAF;AAAc6C,qBAAd;AAAiCiI;AAAjC,MAA6D,MAAMtJ,MAAE,CAACsF,sBAAH,CAA0BC,YAA1B,EAAwCH,iBAAxC,CAAzE;AACApF,QAAE,CAACJ,KAAH,CAASe,kBAAT,CAA4B4E,YAA5B,IAA4C/G,UAA5C;AAEA,QAAM8V,yBAAyB,CAAC9V,UAAD,EAAayQ,aAAb,EAA4BC,eAA5B,EAA6C3J,YAA7C,EAA2DH,iBAA3D,EAA8E/D,iBAA9E,EAAiGiI,uBAAjG,CAA/B;AACD,CAdD;;AAgBA,MAAMgL,yBAAyB,GAAG,OAAO9V,UAAP,EAAmByQ,aAAnB,EAAkCC,eAAlC,EAAmD3J,YAAnD,EAAiEH,iBAAjE,EAAoF/D,iBAApF,EAAuGiI,uBAAvG,KAAmI;AACnK,QAAM1H,QAAQ,GAAG5B,MAAE,CAACJ,KAAH,CAASc,eAAT,CAAyBlC,UAAzB,CAAjB;;AAEA,MAAI,CAACoD,QAAL,EAAe;AACb5B,UAAE,CAACJ,KAAH,CAASc,eAAT,CAAyBlC,UAAzB,IAAuC,IAAIwQ,WAAJ,CAAaC,aAAb,EAA4BC,eAA5B,EAA6C3J,YAA7C,EAA2DH,iBAA3D,CAAvC;AACD,GAFD,MAEO;AACL,QAAIuO,uBAAuB,CAAC/R,QAAD,EAAWqN,aAAX,EAA0BC,eAA1B,CAA3B,EAAuE;AACxE;;AAED,QAAM7P,MAAM,GAAG,0BAAf;AACA,QAAMtmB,MAAM,GAAG;AAAEylB,cAAF;AAAc6C,qBAAd;AAAiCiI;AAAjC,GAAf;AACA,QAAMtJ,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAN;AACD,CAZD;;AAcA,MAAMw7B,uBAAuB,GAAG,OAAO5S,UAAP,EAAmB6S,iBAAnB,EAAsCvF,aAAtC,EAAqDC,eAArD,KAAyE;AACvG,QAAMtN,QAAQ,GAAG5B,MAAE,CAACJ,KAAH,CAASa,SAAT,CAAmBkB,UAAnB,CAAjB;;AAEA,MAAI,CAACC,QAAL,EAAe;AACb5B,UAAE,CAACJ,KAAH,CAASa,SAAT,CAAmBkB,UAAnB,IAAiC,IAAIqN,WAAJ,CAAaC,aAAb,EAA4BC,eAA5B,CAAjC;AACD,GAFD,MAEO;AACL,QAAIyE,uBAAuB,CAAC/R,QAAD,EAAWqN,aAAX,EAA0BC,eAA1B,CAA3B,EAAuE;AACxE;;AAED,QAAM7P,MAAM,GAAG,cAAf;AACA,QAAMtmB,MAAM,GAAG;AAAE4oB,cAAF;AAAc6S;AAAd,GAAf;AACA,QAAMxU,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAN;AACD,CAZD;;AAcA,MAAM07B,aAAa,GAAG,OAAOxF,aAAP,EAAsBl2B,MAAtB,KAAiC;AACrD,MAAI;AACF,QAAIm2B,eAAJ;AACA,QAAI1oB,OAAJ;AACA,UAAMkuB,yBAAyB,GAAG,IAAI/sB,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACjEsoB,qBAAe,GAAGvoB,OAAlB;AACAH,aAAO,GAAGua,UAAU,CAAC,MAAMna,MAAM,CAAC,IAAI/N,KAAJ,CAAU,SAAV,CAAD,CAAb,EAAqCs1B,UAArC,CAApB;AACD,KAHiC,CAAlC;AAKA,UAAM;AAAExM,gBAAF;AAAc6S,uBAAd;AAAiChW,gBAAjC;AAA6C4V;AAA7C,QAA4Dr7B,MAAlE;;AACA,QAAI;AAEF,UAAI4oB,UAAJ,EAAgB,MAAM4S,uBAAuB,CAAC5S,UAAD,EAAa6S,iBAAb,EAAgCvF,aAAhC,EAA+CC,eAA/C,CAA7B,CAAhB,KACK,IAAI1Q,UAAJ,EAAgB,MAAM8V,yBAAyB,CAAC9V,UAAD,EAAayQ,aAAb,EAA4BC,eAA5B,CAA/B,CAAhB,KACA,IAAIkF,UAAJ,EAAgB,MAAMD,yBAAyB,CAACC,UAAD,EAAanF,aAAb,EAA4BC,eAA5B,CAA/B;AAErB,YAAMwF,yBAAN;AACD,KAPD,CAOE,OAAO1wB,CAAP,EAAU;AACV+b,kBAAY,CAACvZ,OAAD,CAAZ;;AAEA,UAAIxC,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAA7B,EAAmC;AACjC,cAAMA,IAAI,GAAGpC,CAAC,CAACsC,QAAF,CAAWF,IAAxB;;AAEA,YAAIA,IAAI,KAAK,2BAAb,EAA0C;AACxC,gBAAM,IAAIf,MAAM,CAACvI,sBAAX,EAAN;AACD,SAFD,MAEO,IAAIsJ,IAAI,KAAK,2BAAb,EAA0C;AAC/C,cAAIoY,UAAJ,EAAgB,MAAM,IAAInZ,MAAM,CAAC5H,kCAAX,EAAN,CAAhB,KACK,IAAI22B,UAAJ,EAAgB,MAAM,IAAI/uB,MAAM,CAACrH,kCAAX,EAAN;AACtB,SAHM,MAGA,IAAIoI,IAAI,KAAK,wBAAT,IAAqCA,IAAI,KAAK,oBAAlD,EAAwE;AAC7E,gBAAM,IAAIf,MAAM,CAACjI,gBAAX,EAAN;AACD;;AAED,gBAAQgJ,IAAI,CAACpN,IAAb;AACE,eAAK,sBAAL;AACE,kBAAM,IAAIqM,MAAM,CAACpC,oBAAX,EAAN;;AACF,eAAK,sBAAL;AACE,kBAAM,IAAIoC,MAAM,CAACnC,oBAAX,CAAgCkD,IAAI,CAACjD,kBAArC,CAAN;;AACF,eAAK,cAAL;AACE,kBAAM,IAAIkC,MAAM,CAAC/B,YAAX,EAAN;AANJ;AASD;;AAED,YAAMU,CAAN;AACD;AAEF,GA7CD,CA6CE,OAAOA,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,UAAMA,CAAN;AACD;AACF,CAlDD;;AAoDA,MAAM2wB,eAAe,GAAG,OAAOC,MAAP,EAAe/U,cAAf,KAAkC;AACxD,QAAM6B,IAAI,GAAGvC,YAAM,EAAnB;AAEA,QAAM8C,KAAK,GAAG,MAAMnU,MAAM,CAACoG,MAAP,CAAc5C,WAAd,EAApB;AACA,QAAM8Q,WAAW,GAAG,MAAMtU,MAAM,CAACoG,MAAP,CAAc3C,mBAAd,CAAkC0Q,KAAlC,CAA1B;AAEA,QAAM,CAAC4S,cAAD,EAAiBC,eAAjB,IAAoC,MAAMntB,OAAO,CAAC6d,GAAR,CAAY,CAC1D1X,MAAM,CAACoG,MAAP,CAAc9B,aAAd,CAA4B4N,MAAE,CAAChkB,IAAH,CAAQmV,aAApC,EAAmDiR,WAAnD,CAD0D,EAE1DtU,MAAM,CAACoG,MAAP,CAAc9B,aAAd,CAA4B6P,KAA5B,EAAmC2S,MAAnC,CAF0D,CAAZ,CAAhD;AAKA,QAAMJ,iBAAiB,GAAG;AACxB9S,QADwB;AAExBmT,kBAFwB;AAGxBC,mBAHwB;AAIxBzD,eAAW,EAAE;AAJW,GAA1B;AAOA,MAAIxR,cAAc,KAAK,aAAvB,EAAsC2U,iBAAiB,CAACtS,cAAlB,GAAmCE,WAAnC,CAlBkB,CAoBxD;;AACAoS,mBAAiB,CAACO,WAAlB,GAAgC,MAAMC,iBAAiB,EAAvD;AAEA,SAAOR,iBAAP;AACD,CAxBD;;AA0BA,MAAMS,uBAAuB,GAAIpV,cAAD,IAAoB;AAClD,MAAIA,cAAc,KAAK,aAAnB,IAAoC,CAACnb,UAAM,CAACuB,iCAAP,EAAzC,EAAqF;AACnF,UAAM,IAAIZ,MAAM,CAACnI,sCAAX,EAAN;AACD;AACF,CAJD;;AAMA,MAAMg4B,eAAe,GAAIN,MAAD,IAAY;AAClC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIvvB,MAAM,CAAC5I,wBAAX,EAAN;AAChC,MAAIm4B,MAAM,CAACj3B,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAAC7I,yBAAX,EAAN;AACzB,MAAIo4B,MAAM,CAACj3B,MAAP,GAAgB+vB,uBAApB,EAA6C,MAAM,IAAIroB,MAAM,CAAC3I,mBAAX,CAA+BgxB,uBAA/B,CAAN;AAC9C,CAJD;;AAMA,MAAMyH,aAAa,GAAIzT,IAAD,IAAU;AAC9B,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,MAAM,IAAIrc,MAAM,CAAC/H,sBAAX,EAAN;AAC9B,MAAIokB,IAAI,CAAC/jB,MAAL,KAAgB,CAApB,EAAuB,MAAM,IAAI0H,MAAM,CAAC9H,uBAAX,EAAN;AACvB,MAAImkB,IAAI,CAAC/jB,MAAL,KAAgBmwB,gBAApB,EAAsC,MAAM,IAAIzoB,MAAM,CAAC3H,uBAAX,CAAmCowB,gBAAnC,CAAN;AACvC,CAJD;;AAMA,MAAMsH,gBAAgB,GAAIr8B,MAAD,IAAY;AACnC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;;AAEhC,MAAIqW,oBAAoB,CAACxhB,MAAD,EAAS,cAAT,CAAxB,EAAkD;AAEhDm8B,mBAAe,CAACn8B,MAAM,CAAC8D,YAAR,CAAf;;AACA,QAAI0d,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD,MAAM,IAAIsM,MAAM,CAAC7H,oBAAX,EAAN;AAChD,QAAI+c,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD,MAAM,IAAIsM,MAAM,CAACvH,oBAAX,EAAN,CAJA,CAMhD;AACA;;AACA,QAAI,CAAC/E,MAAM,CAACs8B,0BAAR,IAAsCt8B,MAAM,CAAC8D,YAAP,KAAwBoxB,4BAAlE,EAAgG;AAC9F,YAAM,IAAI5oB,MAAM,CAACzI,sBAAX,CAAkCqxB,4BAAlC,CAAN;AACD;AAEF,GAZD,MAYO,IAAI1T,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD;AAErDo8B,iBAAa,CAACp8B,MAAM,CAACylB,UAAR,CAAb;;AACA,QAAIjE,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD,MAAM,IAAIsM,MAAM,CAACvH,oBAAX,EAAN;AAEjD,GALM,MAKA,IAAIyc,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD;AACrD,QAAI,OAAOA,MAAM,CAACq7B,UAAd,KAA6B,QAAjC,EAA2C,MAAM,IAAI/uB,MAAM,CAACzH,iBAAX,EAAN;AAC5C,GAFM,MAEA;AACL,UAAM,IAAIyH,MAAM,CAAC9I,mBAAX,EAAN;AACD;;AAED,MAAIge,oBAAoB,CAACxhB,MAAD,EAAS,gBAAT,CAApB,IAAkD,CAACm1B,uBAAuB,CAACn1B,MAAM,CAAC8mB,cAAR,CAA9E,EAAuG;AACrG,UAAM,IAAIxa,MAAM,CAACpI,sBAAX,CAAkCixB,uBAAlC,CAAN;AACD;;AAEDpE,uBAAmB;AACpB,CA/BD;;AAiCA,MAAMwL,YAAY,GAAG,MAAOv8B,MAAP,IAAkB;AACrC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AACA,QAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,eAAT,CAAzB,EAAoD,MAAM,IAAIsM,MAAM,CAACtI,oBAAX,EAAN;AAEpD,UAAM;AAAEF,kBAAF;AAAgB2hB,gBAAhB;AAA4B4V,gBAA5B;AAAwCnF,mBAAxC;AAAuDpP,oBAAc,GAAGG,MAAE,CAACH;AAA3E,QAA8F9mB,MAApG;AAEA,QAAI,OAAOk2B,aAAP,KAAyB,UAA7B,EAAyC,MAAM,IAAI5pB,MAAM,CAACrI,2BAAX,EAAN;;AACzCi4B,2BAAuB,CAACpV,cAAD,CAAvB;;AAEA,QAAIhjB,YAAJ,EAAkB;AAChB,YAAM8kB,UAAU,GAAG9B,cAAc,KAAK,aAAnB,GACfhjB,YADe,CACF;AADE,QAEdmjB,MAAE,CAACJ,KAAH,CAASY,YAAT,CAAsB3jB,YAAtB,MAAuC,MAAMiR,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCvb,YAAxC,CAA7C,CAFL;AAIA,UAAIgjB,cAAc,KAAK,YAAvB,EAAqCG,MAAE,CAACJ,KAAH,CAASY,YAAT,CAAsB3jB,YAAtB,IAAsC8kB,UAAtC,CALrB,CAKsE;;AAEtF,YAAM6S,iBAAiB,GAAG,MAAMG,eAAe,CAAC93B,YAAD,EAAegjB,cAAf,CAA/C;AAEA,YAAM0V,sBAAsB,GAAG;AAAE5T,kBAAF;AAAc6S;AAAd,OAA/B;AACA,YAAMC,aAAa,CAACxF,aAAD,EAAgBsG,sBAAhB,CAAnB;AACD,KAXD,MAWO,IAAI/W,UAAJ,EAAgB;AACrB,YAAMgX,gBAAgB,GAAG;AAAEhX;AAAF,OAAzB;AACA,YAAMiW,aAAa,CAACxF,aAAD,EAAgBuG,gBAAhB,CAAnB;AACD,KAHM,MAGA;AACL,YAAMC,gBAAgB,GAAG;AAAErB;AAAF,OAAzB;AACA,YAAMK,aAAa,CAACxF,aAAD,EAAgBwG,gBAAhB,CAAnB;AACD;AACF,GA3BD,CA2BE,OAAOzxB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,0BAAL;AACA,WAAK,qBAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,oCAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,oCAAL;AACA,WAAK,kBAAL;AACA,WAAK,sBAAL;AACA,WAAK,6BAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAjCJ;AAmCD;AACF,CAlED;;AAoEA,MAAM0xB,SAAS,GAAG,CAACd,MAAD,EAASpW,UAAT,EAAqB4V,UAArB,EAAiCvU,cAAc,GAAG,YAAlD,KAAmE;AACnFoV,yBAAuB,CAACpV,cAAD,CAAvB;;AAEA,QAAM0F,YAAY,GAAG6O,UAAU,IAAIP,8BAA8B,CAAC1lB,qCAAM,CAACC,MAAP,CAAcgmB,UAAd,CAAD,CAAjE;;AAEA,QAAMzS,UAAU,GAAG9B,cAAc,KAAK,aAAnB,GAAmC+U,MAAnC,GAA4C5U,MAAE,CAACJ,KAAH,CAASY,YAAT,CAAsBoU,MAAtB,CAA/D;AACA,QAAMhT,QAAQ,GAAGgT,MAAM,GACnB5U,MAAE,CAACJ,KAAH,CAASa,SAAT,CAAmBkB,UAAnB,CADmB,GAEnB3B,MAAE,CAACJ,KAAH,CAASc,eAAT,CAAyBlC,UAAU,IAAIwB,MAAE,CAACJ,KAAH,CAASe,kBAAT,CAA4B4E,YAA5B,CAAvC,CAFJ;AAIA,MAAI,CAAC3D,QAAD,IAAa,CAACA,QAAQ,CAACpC,IAA3B,EAAiC,MAAM,IAAIna,MAAM,CAAClI,eAAX,EAAN;AACjC,SAAOykB,QAAP;AACD,CAZD;;AAcA,MAAM+T,UAAU,GAAG,MAAO58B,MAAP,IAAkB;AACnC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AAEA,UAAM6oB,QAAQ,GAAG8T,SAAS,CAAC38B,MAAM,CAAC8D,YAAR,EAAsB9D,MAAM,CAACylB,UAA7B,EAAyCzlB,MAAM,CAACq7B,UAAhD,EAA4Dr7B,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAxF,CAA1B;AAEA,UAAMR,MAAM,GAAG,QAAf;AACA,UAAMuW,YAAY,GAAG,MAAMC,kBAAkB,CAACjU,QAAD,EAAW7oB,MAAX,CAA7C;AAEA,UAAM+8B,eAAe,CAAClU,QAAD,EAAWvC,MAAX,EAAmBuW,YAAnB,CAArB;AAED,GAVD,CAUE,OAAO5xB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAhCJ;AAmCD;AACF,CAjDD;;AAmDA,MAAM6xB,kBAAkB,GAAG,OAAOjU,QAAP,EAAiB7oB,MAAjB,KAA4B;AACrD,MAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,MAAT,CAAzB,EAA2C,MAAM,IAAIsM,MAAM,CAACtG,WAAX,EAAN;AAE3C,QAAM;AAAEoc,QAAF;AAAQuM,UAAR;AAAgBgJ;AAAhB,MAAgC33B,MAAtC;;AAEA,MAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAxB,EAA4C;AAC1C,QAAI,OAAO2uB,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIriB,MAAM,CAAClG,kBAAX,EAAN;AAChC,QAAIuoB,MAAM,CAAC/pB,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAAC/F,mBAAX,EAAN;AACzB,QAAIooB,MAAM,CAAC/pB,MAAP,GAAgBgwB,uBAApB,EAA6C,MAAM,IAAItoB,MAAM,CAACjG,aAAX,CAAyBuuB,uBAAzB,CAAN;AAC9C;;AAED,QAAMoI,UAAU,GAAGl6B,IAAI,CAACC,SAAL,CAAeqf,IAAf,CAAnB;AACA,MAAI,CAAC4a,UAAL,EAAiB,MAAM,IAAI1wB,MAAM,CAACrG,WAAX,EAAN;AACjB,MAAIqb,gBAAgB,CAAC0b,UAAD,CAAhB,GAA+BlI,cAAnC,EAAmD,MAAM,IAAIxoB,MAAM,CAACpG,YAAX,CAAwB2uB,WAAxB,CAAN;AAEnD,QAAM2C,EAAE,GAAG7I,MAAM,IAAIvI,YAAM,EAA3B;AAEA,QAAM6W,OAAO,GAAG,MAAMloB,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCmY,EAAxC,CAAtB;AACA,QAAM0F,UAAU,GAAG;AAAE1F,MAAF;AAAMpV;AAAN,GAAnB;AACA,QAAM+a,aAAa,GAAG,MAAMpoB,MAAM,CAACoG,MAAP,CAAclC,WAAd,CAA0B4P,QAAQ,CAACK,KAAnC,EAA0CgU,UAA1C,CAA5B;AAEA,SAAO;AAAED,WAAF;AAAWE,iBAAX;AAA0BxF;AAA1B,GAAP;AACD,CAtBD;;AAwBA,MAAMyF,UAAU,GAAG,MAAOp9B,MAAP,IAAkB;AACnC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AAEA,UAAM6oB,QAAQ,GAAG8T,SAAS,CAAC38B,MAAM,CAAC8D,YAAR,EAAsB9D,MAAM,CAACylB,UAA7B,EAAyCzlB,MAAM,CAACq7B,UAAhD,EAA4Dr7B,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAxF,CAA1B;AAEA,UAAMR,MAAM,GAAG,QAAf;AACA,UAAM+W,YAAY,GAAG,MAAMC,kBAAkB,CAACzU,QAAD,EAAW7oB,MAAX,CAA7C;AAEA,UAAM+8B,eAAe,CAAClU,QAAD,EAAWvC,MAAX,EAAmB+W,YAAnB,CAArB;AACD,GATD,CASE,OAAOpyB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,eAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,cAAL;AACA,WAAK,kBAAL;AACA,WAAK,oBAAL;AACA,WAAK,4BAAL;AACA,WAAK,yBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AApCJ;AAuCD;AACF,CApDD;;AAsDA,MAAMqyB,kBAAkB,GAAG,OAAOzU,QAAP,EAAiB7oB,MAAjB,KAA4B;AACrD,MAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,MAAT,CAAzB,EAA2C,MAAM,IAAIsM,MAAM,CAACtG,WAAX,EAAN;AAC3C,MAAI,CAACwb,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAzB,EAA6C,MAAM,IAAIsM,MAAM,CAAChG,aAAX,EAAN;AAE7C,MAAI,CAACtG,MAAM,CAAC23B,WAAR,IAAuBnW,oBAAoB,CAACxhB,MAAD,EAAS,aAAT,CAA/C,EAAwEA,MAAM,CAAC23B,WAAP,GAAqB,KAArB,CAJnB,CAI8C;;AAEnG,QAAM;AAAEvV,QAAF;AAAQuM,UAAR;AAAgBgJ;AAAhB,MAAgC33B,MAAtC;AAEA,MAAI,OAAO2uB,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIriB,MAAM,CAAClG,kBAAX,EAAN;AAChC,MAAIuoB,MAAM,CAAC/pB,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAAC/F,mBAAX,EAAN;AACzB,MAAIooB,MAAM,CAAC/pB,MAAP,GAAgBgwB,uBAApB,EAA6C,MAAM,IAAItoB,MAAM,CAACjG,aAAX,CAAyBuuB,uBAAzB,CAAN;AAE7C,MAAI,CAAC/L,QAAQ,CAACmR,UAAT,CAAoBrL,MAApB,CAAL,EAAkC,MAAM,IAAIriB,MAAM,CAAC7F,gBAAX,EAAN;AAElC,QAAMu2B,UAAU,GAAGl6B,IAAI,CAACC,SAAL,CAAeqf,IAAf,CAAnB;AACA,MAAI,CAAC4a,UAAL,EAAiB,MAAM,IAAI1wB,MAAM,CAACrG,WAAX,EAAN;AACjB,MAAIqb,gBAAgB,CAAC0b,UAAD,CAAhB,GAA+BlI,cAAnC,EAAmD,MAAM,IAAIxoB,MAAM,CAACpG,YAAX,CAAwB2uB,WAAxB,CAAN;AAEnD,QAAM2E,cAAc,GAAG3Q,QAAQ,CAAC4Q,oBAAT,CAA8B9K,MAA9B,CAAvB;AACA,QAAMsO,OAAO,GAAG,MAAMloB,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCsP,MAAxC,CAAtB;AACA,QAAMuO,UAAU,GAAG;AAAE1F,MAAE,EAAE7I,MAAN;AAAcvM,QAAd;AAAoB2V,OAAG,EAAEyB,cAAc,GAAG;AAA1C,GAAnB;AACA,QAAM2D,aAAa,GAAG,MAAMpoB,MAAM,CAACoG,MAAP,CAAclC,WAAd,CAA0B4P,QAAQ,CAACK,KAAnC,EAA0CgU,UAA1C,CAA5B;AAEA,SAAO;AAAED,WAAF;AAAWE,iBAAX;AAA0BxF;AAA1B,GAAP;AACD,CAxBD;;AA0BA,MAAM4F,UAAU,GAAG,MAAOv9B,MAAP,IAAkB;AACnC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AAEA,UAAM6oB,QAAQ,GAAG8T,SAAS,CAAC38B,MAAM,CAAC8D,YAAR,EAAsB9D,MAAM,CAACylB,UAA7B,EAAyCzlB,MAAM,CAACq7B,UAAhD,EAA4Dr7B,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAxF,CAA1B;AAEA,UAAMR,MAAM,GAAG,QAAf;AACA,UAAMkX,YAAY,GAAG,MAAMC,kBAAkB,CAAC5U,QAAD,EAAW7oB,MAAX,CAA7C;AAEA,UAAM+8B,eAAe,CAAClU,QAAD,EAAWvC,MAAX,EAAmBkX,YAAnB,CAArB;AACD,GATD,CASE,OAAOvyB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,eAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,kBAAL;AACA,WAAK,oBAAL;AACA,WAAK,yBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAhCJ;AAmCD;AACF,CAhDD;;AAkDA,MAAMwyB,kBAAkB,GAAG,OAAO5U,QAAP,EAAiB7oB,MAAjB,KAA4B;AACrD,MAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAzB,EAA6C,MAAM,IAAIsM,MAAM,CAAChG,aAAX,EAAN;AAE7C,QAAM;AAAEqoB;AAAF,MAAa3uB,MAAnB;AAEA,MAAI,OAAO2uB,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIriB,MAAM,CAAClG,kBAAX,EAAN;AAChC,MAAIuoB,MAAM,CAAC/pB,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAAC/F,mBAAX,EAAN;AACzB,MAAIooB,MAAM,CAAC/pB,MAAP,GAAgBgwB,uBAApB,EAA6C,MAAM,IAAItoB,MAAM,CAACjG,aAAX,CAAyBuuB,uBAAzB,CAAN;AAE7C,MAAI,CAAC/L,QAAQ,CAACmR,UAAT,CAAoBrL,MAApB,CAAL,EAAkC,MAAM,IAAIriB,MAAM,CAAC7F,gBAAX,EAAN;AAElC,QAAM+yB,cAAc,GAAG3Q,QAAQ,CAAC4Q,oBAAT,CAA8B9K,MAA9B,CAAvB;AACA,QAAMsO,OAAO,GAAG,MAAMloB,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCsP,MAAxC,CAAtB;AACA,QAAMuO,UAAU,GAAG;AAAE1F,MAAE,EAAE7I,MAAN;AAAcoJ,OAAG,EAAEyB,cAAc,GAAG;AAApC,GAAnB;AACA,QAAM2D,aAAa,GAAG,MAAMpoB,MAAM,CAACoG,MAAP,CAAclC,WAAd,CAA0B4P,QAAQ,CAACK,KAAnC,EAA0CgU,UAA1C,CAA5B;AAEA,SAAO;AAAED,WAAF;AAAWE;AAAX,GAAP;AACD,CAjBD;;AAmBA,MAAMO,cAAc,GAAG,MAAO19B,MAAP,IAAkB;AACvC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AACA,QAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAzB,EAAiD,MAAM,IAAIsM,MAAM,CAAC1E,iBAAX,EAAN;AAEjD,UAAM;AAAE9D,kBAAF;AAAgB2hB,gBAAhB;AAA4B4V,gBAA5B;AAAwChD,gBAAxC;AAAoDvR,oBAAc,GAAGG,MAAE,CAACH;AAAxE,QAA2F9mB,MAAjG;AAEA,QAAI,CAAC0jB,KAAK,CAACia,OAAN,CAActF,UAAd,CAAL,EAAgC,MAAM,IAAI/rB,MAAM,CAACzE,qBAAX,EAAN;AAEhC,UAAMghB,QAAQ,GAAG8T,SAAS,CAAC74B,YAAD,EAAe2hB,UAAf,EAA2B4V,UAA3B,EAAuCvU,cAAvC,CAA1B;AAEA,UAAMR,MAAM,GAAG,kBAAf;AAEA,UAAMsX,uBAAuB,GAAG,MAAMhvB,OAAO,CAAC6d,GAAR,CAAY4L,UAAU,CAAC1kB,GAAX,CAAe6kB,SAAS,IAAI;AAC5E,YAAMzwB,OAAO,GAAGywB,SAAS,CAACzwB,OAA1B;;AAEA,cAAQA,OAAR;AACE,aAAK,QAAL;AAAe;AACb,mBAAO+0B,kBAAkB,CAACjU,QAAD,EAAW2P,SAAX,CAAzB;AACD;;AAED,aAAK,QAAL;AAAe;AACb,mBAAO8E,kBAAkB,CAACzU,QAAD,EAAW2P,SAAX,CAAzB;AACD;;AAED,aAAK,QAAL;AAAe;AACb,mBAAOiF,kBAAkB,CAAC5U,QAAD,EAAW2P,SAAX,CAAzB;AACD;;AAED;AAAS,gBAAM,IAAIlsB,MAAM,CAACxE,oBAAX,CAAgCC,OAAhC,CAAN;AAbX;AAeD,KAlBiD,CAAZ,CAAtC;AAmBA,UAAM81B,6BAA6B,GAAG,MAAMjvB,OAAO,CAAC6d,GAAR,CAAYmR,uBAAZ,CAA5C;AAEA,UAAME,eAAe,GAAG;AACtBzF,gBAAU,EAAEA,UAAU,CAAC1kB,GAAX,CAAe,CAAC6kB,SAAD,EAAYjmB,CAAZ;AACzBxK,eAAO,EAAEywB,SAAS,CAACzwB;AADM,SAEtB81B,6BAA6B,CAACtrB,CAAD,CAFP,CAAf;AADU,KAAxB;;AAOA,QAAI;AACF,YAAMwqB,eAAe,CAAClU,QAAD,EAAWvC,MAAX,EAAmBwX,eAAnB,CAArB;AACD,KAFD,CAEE,OAAO7yB,CAAP,EAAU;AACV,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgB5C,KAAhB,KAA0B,uBAA5C,EAAqE;AACnE,cAAM,IAAI6B,MAAM,CAACrE,qBAAX,CAAiCgD,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBnF,KAAjD,CAAN;AACD;;AACD,YAAM+C,CAAN;AACD;AAEF,GAjDD,CAiDE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,mBAAL;AACA,WAAK,uBAAL;AACA,WAAK,oBAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,eAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,kBAAL;AACA,WAAK,oBAAL;AACA,WAAK,4BAAL;AACA,WAAK,yBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AA1CJ;AA4CD;AACF,CAjGD;;AAmGA,MAAM8xB,eAAe,GAAG,OAAOlU,QAAP,EAAiBvC,MAAjB,EAAyBtmB,MAAzB,KAAoC;AAC1D,MAAI;AACF,UAAM+9B,SAAS,GAAGlV,QAAQ,CAACuR,6BAAT,EAAlB;;AAEA,UAAM4D,gBAAgB,GAAG,oCACpBh+B,MADiB;AAEpB2oB,UAAI,EAAEE,QAAQ,CAACF,IAFK;AAGpBC,gBAAU,EAAEC,QAAQ,CAACD;AAHD,MAAtB;;AAMA,UAAMrb,QAAQ,GAAG,MAAM0Z,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB0X,gBAAnB,CAAvB;AACA,UAAMtY,KAAK,GAAGnY,QAAQ,CAACF,IAAT,CAAc4wB,UAA5B;AAEA,UAAMF,SAAS,CAACnI,SAAV,CAAoBlQ,KAApB,CAAN;AAEAmD,YAAQ,CAACyR,+BAAT,CAAyCyD,SAAzC;AAEA,WAAOrY,KAAP;AACD,GAjBD,CAiBE,OAAOza,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,QAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,UAAItC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBpN,IAAhB,KAAyB,oBAA7B,EAAmD;AACjD,cAAM,IAAIqM,MAAM,CAAChI,kBAAX,EAAN;AACD,OAFD,MAEO,IAAI2G,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBnN,OAAhB,KAA4B,cAAhC,EAAgD;AACrD,cAAM,IAAIoM,MAAM,CAACxK,YAAX,CAAwBmJ,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgB7L,QAAxC,CAAN;AACD;AACF;;AAED,UAAMyJ,CAAN;AACD;AACF,CA/BD;;AAiCA,MAAMizB,mBAAmB,GAAG,OAAOrV,QAAP,EAAiBwO,MAAjB,EAAyB4F,OAAzB,EAAkCkB,qBAAlC,EAAyDC,0BAAzD,KAAwF;AAClH,QAAMp+B,MAAM,GAAG;AACb2oB,QAAI,EAAEE,QAAQ,CAACF,IADF;AAEb0O,UAFa;AAGb4F,WAHa;AAIbpE,gBAAY,EAAEsF,qBAJD;AAKb/G,qBAAiB,EAAEhiB,qCAAM,CAACE,MAAP,CAAc8oB,0BAAd;AALN,GAAf;AAQA,QAAM9X,MAAM,GAAG,oBAAf;AACA,QAAMyW,eAAe,CAAClU,QAAD,EAAWvC,MAAX,EAAmBtmB,MAAnB,CAArB;AACD,CAXD;;AAaA,MAAMq+B,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAChC,QAAM7d,MAAM,GAAG,IAAIC,UAAJ,EAAf;AAEA,SAAO,IAAI9R,OAAJ,CAAY,CAAChB,OAAD,EAAUC,MAAV,KAAqB;AACtC4S,UAAM,CAACzS,MAAP,GAAiB/C,CAAD,IAAO;AACrB,UAAI,CAACA,CAAC,CAACszB,MAAF,CAAS9zB,KAAd,EAAqB;AACnBmD,eAAO,CAAC3C,CAAC,CAACszB,MAAF,CAASlsB,MAAV,CAAP;AACD,OAFD,MAEO;AACLxE,cAAM,CAAC5C,CAAC,CAACszB,MAAF,CAAS9zB,KAAV,CAAN;AACD;AACF,KAND;;AAQAgW,UAAM,CAAC+d,iBAAP,CAAyBF,IAAzB;AACD,GAVM,CAAP;AAWD,CAdD;;AAgBA,MAAMG,mBAAmB,GAAG,OAAO1T,OAAP,EAAgB2T,sBAAhB,EAAwCC,eAAxC,EAAyDrsB,SAAzD,KAAuE;AACjG,QAAMyY,OAAN;AACA2T,wBAAsB,CAACE,gBAAvB,IAA2CtsB,SAA3C;AACA,MAAIqsB,eAAJ,EAAqBA,eAAe,CAAC,oBAAKD,sBAAN,EAAf;AACtB,CAJD;;AAMA,MAAMG,YAAY,GAAG,OAAOzQ,KAAP,EAAcxe,KAAd,EAAqB+Y,IAArB,EAA2B0O,MAA3B,EAAmCD,iBAAnC,EAAsDjJ,WAAtD,EAAmEuQ,sBAAnE,EAA2FC,eAA3F,KAA+G;AAClI,QAAMG,cAAc,GAAG,MAAMT,SAAS,CAACzuB,KAAD,CAAtC,CADkI,CAGlI;;AACA,QAAM,CAACmvB,kBAAD,EAAqBC,2BAArB,IAAoD,MAAMjqB,MAAM,CAACoG,MAAP,CAActB,kCAAd,CAAiDud,iBAAjD,CAAhE;AACA,QAAM6H,cAAc,GAAG,MAAMlqB,MAAM,CAACoG,MAAP,CAAcpC,OAAd,CAAsBgmB,kBAAtB,EAA0CD,cAA1C,CAA7B;AAEA,QAAMI,iBAAiB,GAAG;AACxBvW,QADwB;AAExBwF,eAFwB;AAGxBkJ,UAHwB;AAKxB;AACA;AACAznB,SAAK,EAAEmC,mBAAmB,CAAC,IAAII,UAAJ,CAAe8sB,cAAf,CAAD,CAPF;AAQxBF,sBAAkB,EAAEhtB,mBAAmB,CAAC,IAAII,UAAJ,CAAe6sB,2BAAf,CAAD;AARf,GAA1B,CAPkI,CAkBlI;;AACA,QAAM1Y,MAAM,GAAG,iBAAf;;AAEA,QAAM6Y,kBAAkB,GAAGV,mBAAmB,CAACxX,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB4Y,iBAAnB,CAAD,EAAwCR,sBAAxC,EAAgEC,eAAhE,EAAiF/uB,KAAK,CAACwvB,IAAvF,CAA9C;;AAEAhR,OAAK,CAACzZ,IAAN,CAAWwqB,kBAAX,EAvBkI,CAyBlI;;AACA,MAAI/Q,KAAK,CAACxpB,MAAN,KAAiBqwB,qBAArB,EAA4C;AAC1C,UAAMrmB,OAAO,CAAC6d,GAAR,CAAY2B,KAAZ,CAAN;AACAA,SAAK,CAACxpB,MAAN,GAAe,CAAf;AACD;AACF,CA9BD;;AAgCA,MAAMy6B,kBAAkB,GAAG,OAAOr/B,MAAP,EAAe6oB,QAAf,KAA4B;AACrD,MAAI,CAACrH,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAzB,EAA6C,MAAM,IAAIsM,MAAM,CAAChG,aAAX,EAAN;AAC7C,MAAI,CAACkb,oBAAoB,CAACxhB,MAAD,EAAS,MAAT,CAAzB,EAA2C,MAAM,IAAIsM,MAAM,CAAC3F,WAAX,EAAN;AAE3C,QAAM;AAAEgoB,UAAF;AAAUuI;AAAV,MAAmBl3B,MAAzB;AAEA,MAAI,OAAO2uB,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIriB,MAAM,CAAClG,kBAAX,EAAN;AAChC,MAAIuoB,MAAM,CAAC/pB,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAAC/F,mBAAX,EAAN;AACzB,MAAIooB,MAAM,CAAC/pB,MAAP,GAAgBgwB,uBAApB,EAA6C,MAAM,IAAItoB,MAAM,CAACjG,aAAX,CAAyBuuB,uBAAzB,CAAN;AAE7C,MAAI,CAAC/L,QAAQ,CAACmR,UAAT,CAAoBrL,MAApB,CAAL,EAAkC,MAAM,IAAIriB,MAAM,CAAC7F,gBAAX,EAAN;AAElC,MAAI,EAAEywB,IAAI,YAAYoI,IAAlB,CAAJ,EAA6B,MAAM,IAAIhzB,MAAM,CAAC1F,cAAX,EAAN;AAC7B,MAAIswB,IAAI,CAACkI,IAAL,KAAc,CAAlB,EAAqB,MAAM,IAAI9yB,MAAM,CAACzF,iBAAX,EAAN;AAErB,QAAMo2B,OAAO,GAAG,MAAMloB,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCsP,MAAxC,CAAtB;AACA,QAAM6K,cAAc,GAAG3Q,QAAQ,CAAC8Q,oBAAT,CAA8BhL,MAA9B,CAAvB;AACA,QAAMkK,YAAY,GAAG;AACnBlK,UADmB;AAEnBoJ,OAAG,EAAEyB,cAAc,KAAKzK,SAAnB,GAA+B,CAA/B,GAAmCyK,cAAc,GAAG,CAFtC;AAGnBT,YAAQ,EAAE7B,IAAI,CAACj3B,IAHI;AAInB+4B,YAAQ,EAAE9B,IAAI,CAACkI,IAJI;AAKnBnG,YAAQ,EAAE/B,IAAI,CAACxsB;AALI,GAArB;AAOA,SAAO;AAAEuyB,WAAF;AAAWpE;AAAX,GAAP;AACD,CAzBD;;AA2BA,MAAM0G,mBAAmB,GAAIv/B,MAAD,IAAY;AACtCq8B,kBAAgB,CAACr8B,MAAD,CAAhB;;AACA,MAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,iBAAT,CAApB,IAAmD,OAAOA,MAAM,CAAC2+B,eAAd,KAAkC,UAAzF,EAAqG;AACnG,UAAM,IAAIryB,MAAM,CAAC3D,6BAAX,EAAN;AACD;AACF,CALD;;AAOA,MAAM62B,UAAU,GAAG,MAAOx/B,MAAP,IAAkB;AACnC,MAAI;AACFu/B,uBAAmB,CAACv/B,MAAD,CAAnB;;AAEA,UAAM6oB,QAAQ,GAAG8T,SAAS,CAAC38B,MAAM,CAAC8D,YAAR,EAAsB9D,MAAM,CAACylB,UAA7B,EAAyCzlB,MAAM,CAACq7B,UAAhD,EAA4Dr7B,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAxF,CAA1B;AACA,UAAM;AAAE6B;AAAF,QAAWE,QAAjB;;AAEA,QAAI;AACF,YAAM;AAAEoU,eAAF;AAAWpE;AAAX,UAA4B,MAAMwG,kBAAkB,CAACr/B,MAAD,EAAS6oB,QAAT,CAA1D,CADE,CAGF;;AACA,YAAM,CAACuO,iBAAD,EAAoBgH,0BAApB,IAAkD,MAAMrpB,MAAM,CAACoG,MAAP,CAActB,kCAAd,CAAiDgP,QAAQ,CAACK,KAA1D,CAA9D;AACA,YAAMiV,qBAAqB,GAAG,MAAMppB,MAAM,CAACoG,MAAP,CAAclC,WAAd,CAA0Bme,iBAA1B,EAA6CyB,YAA7C,CAApC,CALE,CAOF;;AACA,YAAM;AAAExrB,YAAI,EAAE;AAAEgqB;AAAF;AAAR,UAAuB,MAAMpQ,MAAE,CAAC8D,OAAH,CAAW,gBAAX,EAA6B;AAAEpC,YAAI,EAAEE,QAAQ,CAACF;AAAjB,OAA7B,CAAnC,CARE,CAUF;;AACA,YAAMuO,IAAI,GAAGl3B,MAAM,CAACk3B,IAApB;AACA,UAAItS,QAAQ,GAAG,CAAf;AACA,UAAIuJ,WAAW,GAAG,CAAlB;AACA,UAAIC,KAAK,GAAG,EAAZ,CAdE,CAca;;AACf,YAAMsQ,sBAAsB,GAAG;AAC7BE,wBAAgB,EAAE;AADW,OAA/B;;AAIA,aAAOha,QAAQ,GAAGsS,IAAI,CAACkI,IAAvB,EAA6B;AAC3B;AACA,cAAMxvB,KAAK,GAAGsnB,IAAI,CAAClf,KAAL,CAAW4M,QAAX,EAAqBA,QAAQ,GAAGoQ,eAAhC,CAAd;AACA,cAAM6J,YAAY,CAACzQ,KAAD,EAAQxe,KAAR,EAAe+Y,IAAf,EAAqB0O,MAArB,EAA6BD,iBAA7B,EAAgDjJ,WAAhD,EAA6DuQ,sBAA7D,EAAqF1+B,MAAM,CAAC2+B,eAA5F,CAAlB;AAEAxQ,mBAAW,IAAI,CAAf;AACAvJ,gBAAQ,IAAIoQ,eAAZ;AACD;;AAED,YAAMpmB,OAAO,CAAC6d,GAAR,CAAY2B,KAAZ,CAAN;AACA,YAAM8P,mBAAmB,CAACrV,QAAD,EAAWwO,MAAX,EAAmB4F,OAAnB,EAA4BkB,qBAA5B,EAAmDC,0BAAnD,CAAzB;AACD,KA9BD,CA8BE,OAAOnzB,CAAP,EAAU;AACV+lB,2BAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,oBAAtC,EAA4D;AAC1D,cAAM,IAAIf,MAAM,CAAChI,kBAAX,EAAN;AACD;;AAED,YAAM2G,CAAN;AACD;AACF,GA7CD,CA6CE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,eAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,kBAAL;AACA,WAAK,yBAAL;AACA,WAAK,gBAAL;AACA,WAAK,mBAAL;AACA,WAAK,aAAL;AACA,WAAK,oBAAL;AACA,WAAK,+BAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnCJ;AAsCD;AACF,CAvFD;;AAyFA,MAAMw0B,SAAS,GAAG,OAAO9W,IAAP,EAAa0O,MAAb,EAAqBlJ,WAArB,EAAkCiJ,iBAAlC,KAAwD;AACxE,MAAI;AACF,UAAM9Q,MAAM,GAAG,UAAf;AACA,UAAMtmB,MAAM,GAAG;AACb2oB,UADa;AAEb0O,YAFa;AAGblJ;AAHa,KAAf;AAKA,UAAM5gB,QAAQ,GAAG,MAAM0Z,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAvB;AACA,UAAMqN,IAAI,GAAGE,QAAQ,CAACF,IAAtB;AAEA,UAAMqyB,cAAc,GAAG,IAAIvtB,UAAJ,CAAe,IAAIC,WAAJ,CAAgBQ,mBAAmB,CAACvF,IAAI,CAACuC,KAAN,CAAnC,CAAf,EAAiE2D,MAAxF;AACA,UAAMosB,2BAA2B,GAAG,IAAIxtB,UAAJ,CAAe,IAAIC,WAAJ,CAAgBQ,mBAAmB,CAACvF,IAAI,CAAC0xB,kBAAN,CAAnC,CAAf,EAA8ExrB,MAAlH;AAEA,UAAMqsB,qBAAqB,GAAG,MAAM7qB,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsB6d,iBAAtB,EAAyCuI,2BAAzC,CAApC;AACA,UAAMZ,kBAAkB,GAAG,MAAMhqB,MAAM,CAACoG,MAAP,CAActC,gBAAd,CAA+B+mB,qBAA/B,CAAjC;AAEA,UAAMhwB,KAAK,GAAG,MAAMmF,MAAM,CAACoG,MAAP,CAAc5B,OAAd,CAAsBwlB,kBAAtB,EAA0CW,cAA1C,CAApB;AACA,WAAO9vB,KAAP;AACD,GAlBD,CAkBE,OAAO3E,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AACA,UAAMA,CAAN;AACD;AACF,CAvBD;;AAyBA,MAAM40B,aAAa,GAAG,OAAOlX,IAAP,EAAa0O,MAAb,EAAqBD,iBAArB,EAAwC0I,KAAxC,KAAkD;AACtE,QAAM;AAAEC,SAAF;AAASC;AAAT,MAAiBF,KAAvB;AAEA,QAAMG,MAAM,GAAG,EAAf;AACA,QAAMC,gBAAgB,GAAG30B,IAAI,CAACC,KAAL,CAAWu0B,KAAK,GAAG/K,eAAnB,CAAzB;AACA,QAAMmL,cAAc,GAAG50B,IAAI,CAACC,KAAL,CAAWw0B,GAAG,GAAGhL,eAAjB,KAAqCgL,GAAG,GAAGhL,eAAN,KAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAvE,CAAvB;AAEA,MAAI7G,WAAW,GAAG+R,gBAAlB;;AACA,SAAO/R,WAAW,IAAIgS,cAAtB,EAAsC;AACpC,QAAIvwB,KAAK,GAAG,MAAM6vB,SAAS,CAAC9W,IAAD,EAAO0O,MAAP,EAAelJ,WAAf,EAA4BiJ,iBAA5B,CAA3B;;AAEA,QAAIjJ,WAAW,KAAK+R,gBAAhB,IAAoC/R,WAAW,KAAKgS,cAApD,IAAsEH,GAAG,GAAGhL,eAAhF,EAAiG;AAC/FplB,WAAK,GAAGA,KAAK,CAACoI,KAAN,CAAY+nB,KAAK,GAAG/K,eAApB,EAAqCgL,GAAG,GAAGhL,eAA3C,CAAR;AACD,KAFD,MAEO,IAAI7G,WAAW,KAAK+R,gBAApB,EAAsC;AAC3CtwB,WAAK,GAAGA,KAAK,CAACoI,KAAN,CAAY+nB,KAAK,GAAG/K,eAApB,CAAR;AACD,KAFM,MAEA,IAAI7G,WAAW,KAAKgS,cAAhB,IAAkCH,GAAG,GAAGhL,eAA5C,EAA6D;AAClEplB,WAAK,GAAGA,KAAK,CAACoI,KAAN,CAAY,CAAZ,EAAegoB,GAAG,GAAGhL,eAArB,CAAR;AACD;;AAEDiL,UAAM,CAACtrB,IAAP,CAAY/E,KAAZ;AACAue,eAAW,IAAI,CAAf;AACD;;AAED,SAAO8R,MAAP;AACD,CAxBD;;AA0BA,MAAMG,QAAQ,GAAG,OAAOzX,IAAP,EAAa0O,MAAb,EAAqBD,iBAArB,EAAwC4B,QAAxC,KAAqD;AACpE,QAAMiH,MAAM,GAAG,EAAf;AACA,MAAI9R,WAAW,GAAG,CAAlB;AAEA,QAAMkS,gBAAgB,GAAGrH,QAAQ,GAAGhE,eAAX,GACrB,CADqB,GAErBzpB,IAAI,CAACC,KAAL,CAAWwtB,QAAQ,GAAGhE,eAAtB,KAA0CgE,QAAQ,GAAGhE,eAAX,KAA+B,CAA/B,GAAmC,CAAnC,GAAuC,CAAjF,CAFJ;;AAIA,SAAO7G,WAAW,IAAIkS,gBAAtB,EAAwC;AACtC,UAAMzwB,KAAK,GAAG,MAAM6vB,SAAS,CAAC9W,IAAD,EAAO0O,MAAP,EAAelJ,WAAf,EAA4BiJ,iBAA5B,CAA7B;AACA6I,UAAM,CAACtrB,IAAP,CAAY/E,KAAZ;AACAue,eAAW,IAAI,CAAf;AACD;;AAED,SAAO8R,MAAP;AACD,CAfD;;AAiBA,MAAMK,sBAAsB,GAAItgC,MAAD,IAAY;AACzCq8B,kBAAgB,CAACr8B,MAAD,CAAhB;;AAEA,MAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAzB,EAA6C,MAAM,IAAIsM,MAAM,CAACtF,aAAX,EAAN;AAE7C,QAAM;AAAEqwB,UAAF;AAAUyI;AAAV,MAAoB9/B,MAA1B;AAEA,MAAI,OAAOq3B,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAI/qB,MAAM,CAACrF,kBAAX,EAAN;AAChC,MAAIowB,MAAM,CAACzyB,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAI0H,MAAM,CAACpF,mBAAX,EAAN;AACzB,MAAImwB,MAAM,CAACzyB,MAAP,GAAgBgwB,uBAApB,EAA6C,MAAM,IAAItoB,MAAM,CAACnF,aAAX,CAAyBytB,uBAAzB,CAAN;;AAE7C,MAAIpT,oBAAoB,CAACxhB,MAAD,EAAS,OAAT,CAAxB,EAA2C;AACzC,QAAI,OAAO8/B,KAAP,KAAiB,QAArB,EAA+B,MAAM,IAAIxzB,MAAM,CAAClF,iBAAX,EAAN;AAE/B,QAAI,CAACoa,oBAAoB,CAACse,KAAD,EAAQ,OAAR,CAAzB,EAA2C,MAAM,IAAIxzB,MAAM,CAACjF,iBAAX,EAAN;AAC3C,QAAI,CAACma,oBAAoB,CAACse,KAAD,EAAQ,KAAR,CAAzB,EAAyC,MAAM,IAAIxzB,MAAM,CAAChF,eAAX,EAAN;AAEzC,UAAM;AAAEy4B,WAAF;AAASC;AAAT,QAAiBF,KAAvB;AAEA,QAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B,MAAM,IAAIzzB,MAAM,CAAC/E,sBAAX,EAAN;AAC/B,QAAI,OAAOy4B,GAAP,KAAe,QAAnB,EAA6B,MAAM,IAAI1zB,MAAM,CAAC9E,oBAAX,EAAN;AAE7B,QAAIu4B,KAAK,GAAG,CAAZ,EAAe,MAAM,IAAIzzB,MAAM,CAAC7E,+BAAX,EAAN;AACf,QAAIu4B,GAAG,IAAID,KAAX,EAAkB,MAAM,IAAIzzB,MAAM,CAAC5E,mCAAX,EAAN;AACnB;AACF,CAzBD;;AA2BA,MAAM64B,OAAO,GAAG,MAAOvgC,MAAP,IAAkB;AAChC,MAAI;AACFsgC,0BAAsB,CAACtgC,MAAD,CAAtB;;AAEA,UAAM6oB,QAAQ,GAAG8T,SAAS,CAAC38B,MAAM,CAAC8D,YAAR,EAAsB9D,MAAM,CAACylB,UAA7B,EAAyCzlB,MAAM,CAACq7B,UAAhD,EAA4Dr7B,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAxF,CAA1B;AACA,UAAM;AAAE6B;AAAF,QAAWE,QAAjB;AACA,UAAM;AAAEwO,YAAF;AAAUyI;AAAV,QAAoB9/B,MAA1B;AAEA,UAAM2uB,MAAM,GAAG9F,QAAQ,CAACyN,OAAT,CAAiBe,MAAjB,CAAf;AACA,UAAMjV,IAAI,GAAGyG,QAAQ,CAAC2F,KAAT,CAAeG,MAAf,CAAb;AAEA,QAAI,CAACvM,IAAD,IAAS,CAACA,IAAI,CAAC8U,IAAnB,EAAyB,MAAM,IAAI5qB,MAAM,CAACvF,YAAX,EAAN;AAEzB,UAAM;AAAEmwB,UAAI,EAAE;AAAE6B,gBAAF;AAAYC,gBAAZ;AAAsBC,gBAAtB;AAAgC7B;AAAhC;AAAR,QAAgEhV,IAAtE;AAEA,QAAI0d,KAAK,IAAIA,KAAK,CAACE,GAAN,GAAYhH,QAAzB,EAAmC,MAAM,IAAI1sB,MAAM,CAAC3E,8BAAX,EAAN;AAEnC,UAAMs4B,MAAM,GAAGH,KAAK,GAChB,MAAMD,aAAa,CAAClX,IAAD,EAAO0O,MAAP,EAAeD,iBAAf,EAAkC0I,KAAlC,CADH,GAEhB,MAAMM,QAAQ,CAACzX,IAAD,EAAO0O,MAAP,EAAeD,iBAAf,EAAkC4B,QAAlC,CAFlB;AAIA,WAAO;AACL9B,UAAI,EAAE,IAAIoI,IAAJ,CAASW,MAAT,EAAiBlH,QAAjB,EAA2B;AAAEruB,YAAI,EAAEuuB;AAAR,OAA3B;AADD,KAAP;AAGD,GAvBD,CAuBE,OAAOhuB,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,iBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,mBAAL;AACA,WAAK,oBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,eAAL;AACA,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,mBAAL;AACA,WAAK,iBAAL;AACA,WAAK,wBAAL;AACA,WAAK,sBAAL;AACA,WAAK,iCAAL;AACA,WAAK,qCAAL;AACA,WAAK,gCAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAtCJ;AAyCD;AACF,CApED;;AAsEA,MAAMu1B,kBAAkB,GAAG,OAAOtX,KAAP,EAAcuX,aAAd,EAA6BC,YAA7B,KAA8C;AACvE,QAAM;AAAEl/B,YAAF;AAAYm/B,kBAAZ;AAA4BC;AAA5B,MAAmDF,YAAzD;AACA,QAAM;AAAEG,iBAAF;AAAiBC,qBAAjB;AAAoCC;AAApC,MAA6DH,kBAAnE;AAEA,QAAMI,mBAAmB,GAAGP,aAAa,CAACj/B,QAAD,CAAb,IAA2Bi/B,aAAa,CAACj/B,QAAD,CAAb,CAAwB+1B,MAAxB,CAA+ByE,WAAtF;AAEA,QAAMiF,uBAAuB,GAAG7rB,qCAAM,CAACC,MAAP,CAAc0rB,oBAAd,CAAhC;AACA,QAAMG,iBAAiB,GAAIT,aAAa,CAACE,cAAD,CAAb,IAAiCF,aAAa,CAACE,cAAD,CAAb,CAA8BpJ,MAA9B,CAAqCyE,WAAvE,KACrB,MAAMmF,eAAe,CAACF,uBAAD,CADA,CAA1B;AAEA,QAAMG,oBAAoB,GAAG,MAAMrsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0C2kB,uBAA1C,CAAnC,CATuE,CAWvE;;AACA,QAAMI,qBAAqB,GAAG,MAAMC,yBAAyB,CAACpY,KAAD,EAAQ8X,mBAAR,CAA7D;AACA,QAAMO,kBAAkB,GAAG,MAAMxsB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0BsjB,oBAA1B,EAAgDP,aAAhD,EAA+DQ,qBAA/D,CAAjC,CAbuE,CAevE;;AACA,QAAMG,uBAAuB,GAAG,MAAMzsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0ClH,qCAAM,CAACC,MAAP,CAAcurB,kBAAkB,CAACY,uBAAjC,CAA1C,CAAtC;AACA,QAAMC,yBAAyB,GAAG,MAAMH,yBAAyB,CAACpY,KAAD,EAAQgY,iBAAR,CAAjE;AACA,QAAMQ,0BAA0B,GAAG,MAAM3sB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0B0jB,uBAA1B,EAAmDV,iBAAnD,EAAsEW,yBAAtE,CAAzC;AAEA,SAAOF,kBAAkB,IAAIG,0BAA7B;AACD,CArBD;;AAuBA,MAAMC,+BAA+B,GAAG,OAAOzY,KAAP,EAAc8X,mBAAd,EAAmCY,aAAnC,EAAkDC,gBAAlD,EAAoEjB,kBAApE,KAA2F;AACjI,QAAM;AAAEkB,mBAAF;AAAmBC;AAAnB,MAA2CnB,kBAAjD,CADiI,CAGjI;;AACA,QAAMa,yBAAyB,GAAG,MAAMH,yBAAyB,CAACpY,KAAD,EAAQ8X,mBAAR,CAAjE;AACA,QAAMgB,gBAAgB,GAAG,MAAMjtB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0B+jB,gBAA1B,EAA4CE,mBAA5C,EAAiEN,yBAAjE,CAA/B;AAEA,MAAI,CAACO,gBAAL,EAAuB,OAAOA,gBAAP,CAP0G,CASjI;;AACA,QAAMX,qBAAqB,GAAG,MAAMC,yBAAyB,CAACpY,KAAD,EAAQ0Y,aAAR,CAA7D;AACA,QAAMb,oBAAoB,GAAG,MAAMhsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0ClH,qCAAM,CAACC,MAAP,CAAcurB,kBAAkB,CAACqB,sBAAjC,CAA1C,CAAnC;AACA,QAAMC,YAAY,GAAG,MAAMntB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0BijB,oBAA1B,EAAgDe,eAAhD,EAAiET,qBAAjE,CAA3B;AAEA,SAAOa,YAAY,IAAIF,gBAAvB;AACD,CAfD;;AAiBA,MAAMG,yBAAyB,GAAG,OAAOjZ,KAAP,EAAc8X,mBAAd,EAAmCY,aAAnC,EAAkDC,gBAAlD,EAAoEjB,kBAApE,KAA2F;AAC3H,QAAM;AAAEC,iBAAF;AAAiBC;AAAjB,MAAuCF,kBAA7C,CAD2H,CAG3H;;AACA,QAAMS,qBAAqB,GAAG,MAAMC,yBAAyB,CAACpY,KAAD,EAAQ8X,mBAAR,CAA7D;AACA,QAAMkB,YAAY,GAAG,MAAMntB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0B+jB,gBAA1B,EAA4ChB,aAA5C,EAA2DQ,qBAA3D,CAA3B;AAEA,MAAI,CAACa,YAAL,EAAmB,OAAOA,YAAP,CAPwG,CAS3H;;AACA,QAAMT,yBAAyB,GAAG,MAAMH,yBAAyB,CAACpY,KAAD,EAAQ0Y,aAAR,CAAjE;AACA,QAAMJ,uBAAuB,GAAG,MAAMzsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0ClH,qCAAM,CAACC,MAAP,CAAcurB,kBAAkB,CAACY,uBAAjC,CAA1C,CAAtC;AACA,QAAMQ,gBAAgB,GAAG,MAAMjtB,MAAM,CAAC4J,KAAP,CAAab,YAAb,CAA0B0jB,uBAA1B,EAAmDV,iBAAnD,EAAsEW,yBAAtE,CAA/B;AAEA,SAAOS,YAAY,IAAIF,gBAAvB;AACD,CAfD;;AAiBA,MAAMI,wBAAwB,GAAG,OAAOlZ,KAAP,EAAcmZ,aAAd,EAA6B5B,aAA7B,EAA4C6B,UAA5C,EAAwDC,gBAAxD,KAA6E;AAC5G,QAAMV,gBAAgB,GAAG,MAAM9sB,MAAM,CAAC4J,KAAP,CAAa/B,0BAAb,CAAwCqK,MAAE,CAAChkB,IAAH,CAAQqa,eAAhD,CAA/B;AACA,QAAMskB,aAAa,GAAG,MAAM3F,iBAAiB,EAA7C,CAF4G,CAI5G;;AACA,OAAK,IAAI1pB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8vB,aAAa,CAACz9B,MAAlC,EAA0C2N,CAAC,EAA3C,EAA+C;AAC7C,UAAMmuB,YAAY,GAAG2B,aAAa,CAAC9vB,CAAD,CAAlC;AACA,UAAM;AAAE/Q,cAAF;AAAYsnB,aAAZ;AAAqB6X,oBAArB;AAAqCC;AAArC,QAA4DF,YAAlE;;AAEA,QAAI;AACF,YAAMM,mBAAmB,GAAGP,aAAa,CAACj/B,QAAD,CAAb,IAA2Bi/B,aAAa,CAACj/B,QAAD,CAAb,CAAwB+1B,MAAxB,CAA+ByE,WAAtF;AAEA,YAAMwG,kBAAkB,GAAG5B,kBAAkB,CAAC6B,OAA9C;AACA,YAAMC,wBAAwB,GAAGH,gBAAgB,KAAK/gC,QAAtD;;AAEA,UAAIw/B,mBAAJ,EAAyB;AACvB,YAAIwB,kBAAJ,EAAwB;AACtBH,uBAAa,CAAC9vB,CAAD,CAAb,CAAiBowB,QAAjB,GAA4B,MAAMR,yBAAyB,CAACjZ,KAAD,EAAQ8X,mBAAR,EAA6BY,aAA7B,EAA4CC,gBAA5C,EAA8DjB,kBAA9D,CAA3D;AACD,SAFD,MAEO,IAAI8B,wBAAJ,EAA8B;AACnC,gBAAME,gCAAgC,GAAG,MAAMjB,+BAA+B,CAACzY,KAAD,EAAQ8X,mBAAR,EAA6BY,aAA7B,EAA4CC,gBAA5C,EAA8DjB,kBAA9D,CAA9E,CADmC,CAGnC;;AACA,cAAIgC,gCAAgC,IAAIjC,cAAxC,EAAwD;AACtD,kBAAMkC,mBAAmB,GAAG,MAAMrC,kBAAkB,CAACtX,KAAD,EAAQuX,aAAR,EAAuBC,YAAvB,CAApD;AACA2B,yBAAa,CAAC9vB,CAAD,CAAb,CAAiBowB,QAAjB,GAA4BE,mBAA5B;AACD,WAHD,MAGO;AACLR,yBAAa,CAAC9vB,CAAD,CAAb,CAAiBowB,QAAjB,GAA4BC,gCAA5B;AACD;AAEF,SAXM,MAWA,IAAI,CAAC9Z,OAAL,EAAc;AACnB;AACA,gBAAMga,mBAAmB,GAAG,MAAMtC,kBAAkB,CAACtX,KAAD,EAAQuX,aAAR,EAAuBC,YAAvB,CAApD;AACA2B,uBAAa,CAAC9vB,CAAD,CAAb,CAAiBowB,QAAjB,GAA4BG,mBAA5B;AACD,SAJM,MAIA;AACL;AACAT,uBAAa,CAAC9vB,CAAD,CAAb,CAAiBowB,QAAjB,GAA4B7Z,OAA5B;AACD;AACF;AACF,KA7BD,CA6BE,iBAAM,CACN;AACD,KAnC4C,CAqC7C;;;AACA,WAAOuZ,aAAa,CAAC9vB,CAAD,CAAb,CAAiBouB,cAAxB;;AACA,QAAI,CAAC7X,OAAL,EAAc;AACZ,UAAI8X,kBAAkB,IAAIA,kBAAkB,CAAC6B,OAA7C,EAAsDJ,aAAa,CAAC9vB,CAAD,CAAb,CAAiBwwB,oBAAjB,GAAwCT,UAAxC,CAAtD,KACK,IAAI3B,cAAJ,EAAoB0B,aAAa,CAAC9vB,CAAD,CAAb,CAAiBwwB,oBAAjB,GAAwCpC,cAAxC;AAC1B,KA1C4C,CA4C7C;;;AACA,WAAO0B,aAAa,CAAC9vB,CAAD,CAAb,CAAiBquB,kBAAxB;AACD;;AAED,SAAOyB,aAAP;AACD,CAtDD;;AAwDA,MAAMW,iBAAiB,GAAIX,aAAD,IAAmB;AAC3C,OAAK,IAAI9vB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8vB,aAAa,CAACz9B,MAAlC,EAA0C2N,CAAC,EAA3C,EAA+C;AAC7C,UAAMsd,IAAI,GAAGwS,aAAa,CAAC9vB,CAAD,CAA1B;AACA,QAAIsd,IAAI,CAAC/G,OAAT,EAAkB,OAAO,IAAP;AACnB;;AAED,SAAO,KAAP;AACD,CAPD;;AASA,MAAMma,iBAAiB,GAAG,OAAOxd,UAAP,EAAmByd,gBAAnB,EAAqCha,KAArC,EAA4CuX,aAA5C,EAA2Dj/B,QAA3D,EAAqEm/B,cAArE,KAAwF;AAChH,QAAM5G,KAAK,GAAG,EAAd;AACA,QAAMzT,MAAM,GAAG,kBAAf;AACA,QAAMtmB,MAAM,GAAG;AAAEylB,cAAF;AAAcyd;AAAd,GAAf;AACA,MAAIC,qBAAqB,GAAG,MAAMlc,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAlC;AAEA+5B,OAAK,CAACplB,IAAN,CAAW,IAAG,MAAMytB,wBAAwB,CAAClZ,KAAD,EAAQia,qBAAqB,CAAC91B,IAAtB,CAA2B0sB,KAAnC,EAA0C0G,aAA1C,EAAyDj/B,QAAzD,EAAmEm/B,cAAnE,CAAjC,CAAX;;AAEA,SAAOwC,qBAAqB,CAAC91B,IAAtB,CAA2B+1B,2BAA3B,IAA0DD,qBAAqB,CAAC91B,IAAtB,CAA2Bg2B,2BAA5F,EAAyH;AACvHrjC,UAAM,CAACojC,2BAAP,GAAqCD,qBAAqB,CAAC91B,IAAtB,CAA2B+1B,2BAAhE;AACApjC,UAAM,CAACqjC,2BAAP,GAAqCF,qBAAqB,CAAC91B,IAAtB,CAA2Bg2B,2BAAhE;AACAF,yBAAqB,GAAG,MAAMlc,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAA9B;AACA+5B,SAAK,CAACplB,IAAN,CAAW,IAAG,MAAMytB,wBAAwB,CAAClZ,KAAD,EAAQia,qBAAqB,CAAC91B,IAAtB,CAA2B0sB,KAAnC,EAA0C0G,aAA1C,EAAyDj/B,QAAzD,EAAmEm/B,cAAnE,CAAjC,CAAX;AACD;;AAED,SAAO5G,KAAP;AACD,CAhBD;;AAkBA,MAAMuJ,oBAAoB,GAAG,OAAO53B,EAAP,EAAW0M,aAAX,EAA0BwG,cAA1B,EAA0C6hB,aAA1C,EAAyDj/B,QAAzD,KAAsE;AACjG,QAAM;AAAEikB,cAAF;AAAcyd,oBAAd;AAAgCpa,WAAhC;AAAyCya,YAAzC;AAAmDC,oBAAnD;AAAqE7C;AAArE,MAAwFj1B,EAA9F;AAEA,MAAIwd,KAAJ,EAAWplB,YAAX;;AACA,MAAI4H,EAAE,CAACowB,cAAH,IAAqBpwB,EAAE,CAACyd,cAA5B,EAA4C;AAC1C;AACA,UAAME,WAAW,GAAG3d,EAAE,CAACyd,cAAH,KAAqB,MAAMpU,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BtB,aAA5B,EAA2C1M,EAAE,CAACowB,cAA9C,CAA3B,CAApB;AACA5S,SAAK,GAAG,MAAMnU,MAAM,CAACoG,MAAP,CAAcvC,mBAAd,CAAkCyQ,WAAlC,CAAd;AACAvlB,gBAAY,GAAG,MAAMiR,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BwP,KAA5B,EAAmCxd,EAAE,CAAC5H,YAAtC,CAArB,CAJ0C,CAM1C;;AACA,QAAIglB,OAAO,IAAIhlB,YAAY,KAAKoxB,4BAAhC,EAA8D,OAAO,IAAP;AAC/D,GARD,MAQO,IAAIxpB,EAAE,CAAC+3B,YAAP,EAAqB;AAC1B;AACA;AACA,WAAO,IAAP;AACD,GAJM,MAIA;AACL;AACA,QAAIC,uBAAJ;;AACA,QAAI;AACF,YAAM;AAAEC,0BAAF;AAAsBC,gCAAtB;AAAgDC;AAAhD,UAAyEn4B,EAA/E,CADE,CAGF;;AACAg4B,6BAAuB,GAAGtuB,qCAAM,CAACC,MAAP,CAAc3J,EAAE,CAACq1B,oBAAjB,CAA1B;AACA,YAAMA,oBAAoB,GAAG,MAAMhsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0ConB,uBAA1C,CAAnC;AACA,YAAMI,8BAA8B,GAAG,MAAM/uB,MAAM,CAAC4J,KAAP,CAAaf,MAAb,CAAoBmjB,oBAApB,EAA0C3rB,qCAAM,CAACC,MAAP,CAAcuuB,wBAAd,CAA1C,EAAmFxuB,qCAAM,CAACC,MAAP,CAAcsuB,kBAAd,CAAnF,CAA7C;AACA,UAAI,CAACG,8BAAL,EAAqC,MAAM,IAAIx3B,MAAM,CAAC1B,kBAAX,EAAN,CAPnC,CASF;;AACA,YAAMm5B,4BAA4B,GAAG,MAAMhvB,MAAM,CAACsL,IAAP,CAAY/D,4BAAZ,CAAyClH,qCAAM,CAACC,MAAP,CAAcsuB,kBAAd,CAAzC,CAA3C;AACA,YAAM5kB,sBAAsB,GAAG,MAAMhK,MAAM,CAACsL,IAAP,CAAYxB,6BAAZ,CAA0CklB,4BAA1C,EAAwEnlB,cAAxE,CAArC;AACA,YAAMyK,WAAW,GAAG,MAAMtU,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BqF,sBAA5B,EAAoD8kB,oBAApD,CAA1B;AACA3a,WAAK,GAAG,MAAMnU,MAAM,CAACoG,MAAP,CAAcvC,mBAAd,CAAkCyQ,WAAlC,CAAd,CAbE,CAeF;;AACAvlB,kBAAY,GAAG,MAAMiR,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BwP,KAA5B,EAAmCxd,EAAE,CAAC5H,YAAtC,CAArB;AACD,KAjBD,CAiBE,OAAOmH,CAAP,EAAU;AACV;AACA;AACA,aAAO,IAAP;AACD,KAxBI,CA0BL;;;AACA,UAAM+4B,iBAAiB,GAAG,MAAM7C,eAAe,CAACuC,uBAAD,CAA/C;AACA,UAAM5C,iBAAiB,GAAG,MAAMmD,wBAAwB,CAAC/a,KAAD,EAAQ8a,iBAAR,CAAxD,CA5BK,CA8BL;;AACA,UAAM3a,WAAW,GAAG,MAAMtU,MAAM,CAACoG,MAAP,CAAc3C,mBAAd,CAAkC0Q,KAAlC,CAA1B;AACA,UAAM4S,cAAc,GAAG,MAAM/mB,MAAM,CAACoG,MAAP,CAAc9B,aAAd,CAA4BjB,aAA5B,EAA2CiR,WAA3C,CAA7B;AAEA,UAAM/C,MAAM,GAAG,cAAf;AACA,UAAMtmB,MAAM,GAAG;AAAEkjC,sBAAF;AAAoBpH,oBAApB;AAAoCgF;AAApC,KAAf;AACA7Z,UAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB;AACD;;AAED,QAAMqS,MAAM,GAAG;AACbvO,gBADa;AAEb2hB,cAFa;AAGbqD,WAHa;AAIbya,YAJa;AAKbC,oBALa;AAMb1c,kBAAc,EAAEpb,EAAE,CAACyd,cAAH,GAAoB,aAApB,GAAoC;AANvC,GAAf;AASA,QAAM4Q,KAAK,GAAG,MAAMkJ,iBAAiB,CAACxd,UAAD,EAAayd,gBAAb,EAA+Bha,KAA/B,EAAsCuX,aAAtC,EAAqDj/B,QAArD,EAA+Dm/B,cAA/D,CAArC,CAhEiG,CAkEjG;;AACA,MAAI7X,OAAO,IAAIka,iBAAiB,CAACjJ,KAAD,CAAhC,EAAyC1nB,MAAM,CAAC0nB,KAAP,GAAeA,KAAf,CAAzC,KACK,OAAO,IAAP;AAEL,MAAI,CAACjR,OAAD,IAAY6X,cAAhB,EAAgCtuB,MAAM,CAAC0wB,oBAAP,GAA8BpC,cAA9B;AAEhC,SAAOtuB,MAAP;AACD,CAzED;;AA2EA,MAAM6xB,YAAY,GAAG,MAAOlkC,MAAP,IAAkB;AACrC,MAAI;AACF,QAAIA,MAAM,KAAK+uB,SAAf,EAA0BsN,gBAAgB,CAACr8B,MAAD,CAAhB;;AAC1B+wB,yBAAmB;;AAEnB,UAAM;AAAE3Y,mBAAF;AAAiBwG;AAAjB,QAAoCqI,MAAE,CAAChkB,IAA7C;AACA,UAAMzB,QAAQ,GAAGylB,MAAE,CAACzW,OAAH,CAAWhP,QAA5B;AAEA,QAAIxB,MAAM,IAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAlC,EAA0D,MAAM,IAAIsM,MAAM,CAACvH,oBAAX,EAAN;AAE1D,UAAM+hB,cAAc,GAAI9mB,MAAM,IAAIA,MAAM,CAAC8mB,cAAlB,IAAqCG,MAAE,CAACH,cAA/D;;AACAoV,2BAAuB,CAACpV,cAAD,CAAvB;;AAEA,QAAI;AACF,YAAMY,SAAS,GAAG,EAAlB;AACA,YAAMpB,MAAM,GAAG,cAAf;AACA,YAAM6d,aAAa,GAAGnkC,MAAM,IAAI;AAC9BylB,kBAAU,EAAEzlB,MAAM,CAACylB,UADW;AAE9BmD,kBAAU,EAAE9B,cAAc,KAAK,aAAnB,GACR9mB,MAAM,CAAC8D,YADC,GAER9D,MAAM,CAAC8D,YAAP,KAAuB,MAAMiR,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCrf,MAAM,CAAC8D,YAA/C,CAA7B;AAJ0B,OAAhC;AAOA,UAAI,CAACsgC,iBAAD,EAAoB3D,aAApB,IAAqC,MAAM7xB,OAAO,CAAC6d,GAAR,CAAY,CAACxF,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB6d,aAAnB,CAAD,EAAoCE,0BAA0B,EAA9D,CAAZ,CAA/C;AACA,UAAIC,eAAe,GAAG,MAAM11B,OAAO,CAAC6d,GAAR,CAAY2X,iBAAiB,CAAC/2B,IAAlB,CAAuBqa,SAAvB,CAAiC/T,GAAjC,CAAqCjI,EAAE,IAAI43B,oBAAoB,CAAC53B,EAAD,EAAK0M,aAAL,EAAoBwG,cAApB,EAAoC6hB,aAApC,EAAmDj/B,QAAnD,CAA/D,CAAZ,CAA5B;AACAkmB,eAAS,CAAC/S,IAAV,CAAe,GAAG2vB,eAAlB;;AAEA,aAAOF,iBAAiB,CAAC/2B,IAAlB,CAAuBk3B,aAA9B,EAA6C;AAC3C,cAAMvkC,MAAM,GAAG;AAAEukC,uBAAa,EAAEH,iBAAiB,CAAC/2B,IAAlB,CAAuBk3B;AAAxC,SAAf;AACAH,yBAAiB,GAAG,MAAMnd,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAA1B;AACAskC,uBAAe,GAAG,MAAM11B,OAAO,CAAC6d,GAAR,CAAY2X,iBAAiB,CAAC/2B,IAAlB,CAAuBqa,SAAvB,CAAiC/T,GAAjC,CAAqCjI,EAAE,IAAI43B,oBAAoB,CAAC53B,EAAD,EAAK0M,aAAL,EAAoBwG,cAApB,EAAoC6hB,aAApC,EAAmDj/B,QAAnD,CAA/D,CAAZ,CAAxB;AACAkmB,iBAAS,CAAC/S,IAAV,CAAe,GAAG2vB,eAAlB;AACD;;AAED,aAAO;AAAE5c,iBAAS,EAAEA,SAAS,CAAC8c,MAAV,CAAiB3b,QAAQ,IAAIA,QAAQ,KAAK,IAA1C;AAAb,OAAP;AACD,KAtBD,CAsBE,OAAO5d,CAAP,EAAU;AACV+lB,2BAAmB,CAAC/lB,CAAD,CAAnB;;AACA,YAAMA,CAAN;AACD;AAEF,GAvCD,CAuCE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnBJ;AAqBD;AACF,CAhED;;AAkEA,MAAMw5B,YAAY,GAAG,OAAO3gC,YAAP,EAAqB2hB,UAArB,EAAiCqB,cAAc,GAAG,YAAlD,KAAmE;AACtFoV,yBAAuB,CAACpV,cAAD,CAAvB;;AAEA,MAAI+B,QAAJ;;AACA,MAAI;AACF;AACAA,YAAQ,GAAG8T,SAAS,CAAC74B,YAAD,EAAe2hB,UAAf,EAA2B,IAA3B,EAAiCqB,cAAjC,CAApB;AACD,GAHD,CAGE,iBAAM;AACN;AACA,UAAMR,MAAM,GAAG,cAAf;AACA,UAAM6d,aAAa,GAAGrgC,YAAY,GAC9B;AAAE8kB,gBAAU,EAAE9B,cAAc,KAAK,aAAnB,GAAmChjB,YAAnC,GAAkD,MAAMiR,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuBuJ,MAAE,CAAChkB,IAAH,CAAQoc,OAA/B,EAAwCvb,YAAxC;AAAtE,KAD8B,GAE9B;AAAE2hB;AAAF,KAFJ;AAIA,UAAMif,gBAAgB,GAAG,MAAMzd,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB6d,aAAnB,CAA/B;AAEA,UAAMzc,SAAS,GAAGgd,gBAAgB,CAACr3B,IAAjB,CAAsBqa,SAAxC;AACA,QAAI,CAACA,SAAD,IAAc,CAACA,SAAS,CAAC9iB,MAA7B,EAAqC,MAAM,IAAI0H,MAAM,CAACjI,gBAAX,EAAN;AACrCwkB,YAAQ,GAAGnB,SAAS,CAAC,CAAD,CAApB,CAXM,CAaN;;AACAmB,YAAQ,CAACD,UAAT,GAAsBC,QAAQ,CAACqa,gBAA/B;AACAra,YAAQ,CAACF,IAAT,GAAgBE,QAAQ,CAACpD,UAAzB;AACD;;AACD,SAAOoD,QAAP;AACD,CAzBD;;AA2BA,MAAMyY,yBAAyB,GAAG,OAAOpY,KAAP,EAAc8S,WAAd,KAA8B;AAC9D;AACA,QAAM2I,QAAQ,GAAG,MAAM5vB,MAAM,CAACoG,MAAP,CAAcrC,gBAAd,CAA+BoQ,KAA/B,CAAvB;AACA,QAAM0b,SAAS,GAAG,MAAM7vB,MAAM,CAACmB,MAAP,CAAcpB,IAAd,CAAmB6vB,QAAnB,CAAxB;AACA,QAAMtlB,OAAO,GAAG,MAAMtK,MAAM,CAACuL,IAAP,CAAYhB,oBAAZ,CAAiCslB,SAAjC,CAAtB,CAJ8D,CAM9D;;AACA,QAAMC,iBAAiB,GAAG,MAAM9vB,MAAM,CAACuL,IAAP,CAAY5C,UAAZ,CAAuB2B,OAAvB,EAAgC2c,WAAhC,CAAhC;AACA,SAAO6I,iBAAP;AACD,CATD;;AAWA,MAAMZ,wBAAwB,GAAG,OAAO/a,KAAP,EAAc8S,WAAd,KAA8B;AAC7D,QAAM6I,iBAAiB,GAAG,MAAMvD,yBAAyB,CAACpY,KAAD,EAAQ8S,WAAR,CAAzD,CAD6D,CAG7D;AACA;;AACA,QAAM8I,yBAAyB,GAAG,MAAM/vB,MAAM,CAAC4J,KAAP,CAAajB,UAAb,CAAwBuJ,MAAE,CAAChkB,IAAH,CAAQqa,eAAhC,EAAiDunB,iBAAjD,CAAxC;AACA,SAAOC,yBAAP;AACD,CAPD;;AASA,MAAMC,mCAAmC,GAAG,OAAOvjC,QAAP,EAAiBwjC,oBAAjB,EAAuCvE,aAAvC,KAAyD;AACnG;AACA,MAAIwE,4BAAJ,EAAkCC,mBAAlC;AACA,QAAMC,kBAAkB,GAAGniC,MAAM,CAACC,IAAP,CAAYw9B,aAAZ,CAA3B;;AACA,OAAK,IAAIluB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4yB,kBAAkB,CAACvgC,MAAvC,EAA+C2N,CAAC,EAAhD,EAAoD;AAClD,UAAM6yB,gBAAgB,GAAGD,kBAAkB,CAAC5yB,CAAD,CAA3C;AACA,UAAMyuB,mBAAmB,GAAGP,aAAa,CAAC2E,gBAAD,CAAb,CAAgC7N,MAAhC,CAAuCyE,WAAnE;;AACA,QAAIx6B,QAAQ,KAAK4jC,gBAAb,IAAiCJ,oBAAoB,KAAKhE,mBAA9D,EAAmF;AACjFiE,kCAA4B,GAAGjE,mBAA/B;AACA;AACD,KAHD,MAGO,IAAIA,mBAAmB,KAAKgE,oBAA5B,EAAkD;AACvDE,yBAAmB,GAAG,IAAtB;AACD;AACF,GAbkG,CAenG;;;AACA,MAAI,CAACD,4BAAD,IAAiCC,mBAArC,EAA0D,MAAM,IAAI54B,MAAM,CAAClE,oBAAX,EAAN;AAC1D,MAAI,CAAC68B,4BAAL,EAAmC,MAAM,IAAI34B,MAAM,CAACnE,eAAX,EAAN;AACpC,CAlBD;;AAoBA,MAAMk9B,yBAAyB,GAAG,MAAOxc,QAAP,IAAoB;AACpD,MAAIQ,WAAJ;;AACA,MAAI,CAACR,QAAQ,CAACK,KAAd,EAAqB;AACnBG,eAAW,GAAGR,QAAQ,CAACM,cAAT,KAA2B,MAAMpU,MAAM,CAACoG,MAAP,CAAczB,aAAd,CAA4BuN,MAAE,CAAChkB,IAAH,CAAQmV,aAApC,EAAmDyQ,QAAQ,CAACiT,cAA5D,CAAjC,CAAd;AACAjT,YAAQ,CAACK,KAAT,GAAiB,MAAMnU,MAAM,CAACoG,MAAP,CAAcvC,mBAAd,CAAkCyQ,WAAlC,CAAvB;AACD,GAHD,MAGO;AACLA,eAAW,GAAG,MAAMtU,MAAM,CAACoG,MAAP,CAAc3C,mBAAd,CAAkCqQ,QAAQ,CAACK,KAA3C,CAApB;AACD;;AACD,SAAOG,WAAP;AACD,CATD;;AAWA,MAAMic,cAAc,GAAG,OAAOtlC,MAAP,EAAeujC,QAAf,EAAyBzc,cAAzB,KAA4C;AACjE,MAAI;AACF,UAAM;AAAEhjB,kBAAF;AAAgB2hB;AAAhB,QAA+BzlB,MAArC;AAEA,QAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,iBAAT,CAAxB,EAAqD,MAAM,IAAIsM,MAAM,CAACxG,gCAAX,EAAN;AACrD,QAAI0b,oBAAoB,CAACxhB,MAAD,EAAS,kBAAT,CAAxB,EAAsD,MAAM,IAAIsM,MAAM,CAAClH,+BAAX,CAA2C,+BAA3C,CAAN,CAJpD,CAMF;;AACA,UAAM+1B,cAAc,GAAGpmB,MAAM,CAACqL,YAAP,EAAvB;AACA,UAAMiM,iBAAiB,GAAG,MAAMtX,MAAM,CAACuD,IAAP,CAAYvC,aAAZ,CAA0BolB,cAA1B,CAAhC,CARE,CAUF;;AACA,UAAM5R,2BAA2B,GAAGxU,MAAM,CAACuD,IAAP,CAAYnC,YAAZ,EAApC;AACA,UAAMwkB,uBAAuB,GAAG,MAAM5lB,MAAM,CAACoG,MAAP,CAAclD,mBAAd,CAAkCoU,iBAAlC,EAAqD9C,2BAArD,CAAtC,CAZE,CAcF;;AACA,UAAMV,QAAQ,GAAG,MAAM4b,YAAY,CAAC3gC,YAAD,EAAe2hB,UAAf,EAA2BqB,cAA3B,CAAnC;AACA,UAAMuC,WAAW,GAAG,MAAMgc,yBAAyB,CAACxc,QAAD,CAAnD;AACA,UAAM0c,8BAA8B,GAAG,MAAMxwB,MAAM,CAACoG,MAAP,CAAc9B,aAAd,CAA4BshB,uBAA5B,EAAqDtR,WAArD,CAA7C,CAjBE,CAmBF;;AACA,UAAM;AAAE9L,oBAAF;AAAkBF,8BAAlB;AAA4CH;AAA5C,QAA0E,MAAMnI,MAAM,CAAC4J,KAAP,CAAa3B,oBAAb,CAAkCqP,iBAAlC,CAAtF;AAEA,UAAM/F,MAAM,GAAG,oBAAf;AACA,UAAM6d,aAAa,GAAG;AACpB1e,gBAAU,EAAEoD,QAAQ,CAACF,IADD;AAEpBua,sBAAgB,EAAEra,QAAQ,CAACD,UAFP;AAGpB2a,cAHoB;AAIpBiC,aAAO,EAAE;AACPpc,gCAAwB,EAAEmc,8BADnB;AAEPhc,mCAA2B,EAAEnU,qCAAM,CAACE,MAAP,CAAciU,2BAAd,CAFtB;AAGPkc,2BAAmB,EAAEloB,cAHd;AAIP8S,0CAAkC,EAAEhT,wBAJ7B;AAKP8S,2CAAmC,EAAEjT;AAL9B;AAJW,KAAtB;AAYA,UAAMwoB,kBAAkB,GAAG,MAAMze,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB6d,aAAnB,CAAjC,CAnCE,CAqCF;;AACA,UAAM;AAAE3X;AAAF,QAAmBkZ,kBAAkB,CAACr4B,IAA5C,CAtCE,CAwCF;;AACA,UAAM2tB,uBAAuB,GAAGpoB,mBAAmB,CAAC4Z,YAAD,EAAe,IAAf,CAAnD;AACA,UAAM6O,UAAU,GAAGjmB,qCAAM,CAACE,MAAP,CAAcrC,YAAY,CAAC+nB,uBAAD,EAA0BG,cAA1B,CAA1B,CAAnB;AACA,WAAOE,UAAP;AACD,GA5CD,CA4CE,OAAOpwB,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,QAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAA7B,EAAmC;AACjC,cAAQpC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBnN,OAAxB;AACE,aAAK,kBAAL;AAAyB,gBAAM,IAAIoM,MAAM,CAACjI,gBAAX,EAAN;;AACzB,aAAK,qBAAL;AAA4B,gBAAM,IAAIiI,MAAM,CAAChH,mBAAX,CAA+B,2CAA/B,CAAN;AAF9B;AAID;;AAED,UAAM2F,CAAN;AACD;AACF,CAzDD;;AA2DA,MAAM06B,0BAA0B,GAAG,OAAO3lC,MAAP,EAAeujC,QAAf,EAAyBC,gBAAzB,EAA2CoC,eAA3C,EAA4D9e,cAA5D,KAA+E;AAChH,QAAM;AAAEhjB,gBAAF;AAAgB2hB;AAAhB,MAA+BzlB,MAArC;AACA,QAAMwB,QAAQ,GAAGxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAjB;;AAEA,MAAI;AACF;AACA,UAAM,CAACoT,kBAAD,EAAqBpF,aAArB,EAAoC5X,QAApC,IAAgD,MAAMja,OAAO,CAAC6d,GAAR,CAAY,CACtEpS,QAAO,CAAC3K,YAAR,CAAqBlO,QAArB,CADsE,EAEtEokC,eAAe,IAAIvB,0BAA0B,EAFyB,EAGtEI,YAAY,CAAC3gC,YAAD,EAAe2hB,UAAf,EAA2BqB,cAA3B,CAH0D,CAAZ,CAA5D,CAFE,CAQF;;AACA,QAAI,CAAC+e,kBAAkB,CAACpnB,aAApB,IAAqC,CAAConB,kBAAkB,CAACtoB,cAA7D,EAA6E,MAAM,IAAIjR,MAAM,CAACjE,2BAAX,EAAN,CAT3E,CAWF;;AACA,UAAMy9B,0BAA0B,GAAG1wB,qCAAM,CAACC,MAAP,CAAcwwB,kBAAkB,CAACtoB,cAAjC,CAAnC;AACA,UAAMynB,oBAAoB,GAAG,MAAM7D,eAAe,CAAC2E,0BAAD,CAAlD,CAbE,CAeF;;AACA,QAAIF,eAAJ,EAAqB,MAAMb,mCAAmC,CAACvjC,QAAD,EAAWwjC,oBAAX,EAAiCvE,aAAjC,CAAzC,CAhBnB,CAkBF;;AACA,UAAMe,uBAAuB,GAAG,MAAMzsB,MAAM,CAAC4J,KAAP,CAAarC,4BAAb,CAA0CwpB,0BAA1C,CAAtC;AACA,UAAM;AAAEpnB,yBAAF;AAAuBD;AAAvB,QAAyConB,kBAA/C;AACA,UAAMhoB,UAAU,GAAG,MAAM9I,MAAM,CAAC4J,KAAP,CAAaf,MAAb,CAAoB4jB,uBAApB,EAA6CpsB,qCAAM,CAACC,MAAP,CAAcqJ,mBAAd,CAA7C,EAAiFtJ,qCAAM,CAACC,MAAP,CAAcoJ,aAAd,CAAjF,CAAzB,CArBE,CAuBF;;AACA,QAAI,CAACZ,UAAL,EAAiB,MAAM,IAAIvR,MAAM,CAAC1B,kBAAX,EAAN;AAEjB,UAAMm7B,sBAAsB,GAAG,MAAMhxB,MAAM,CAACsL,IAAP,CAAY/D,4BAAZ,CAAyClH,qCAAM,CAACC,MAAP,CAAcwwB,kBAAkB,CAACpnB,aAAjC,CAAzC,CAArC,CA1BE,CA4BF;;AACA,UAAMunB,oBAAoB,GAAG,MAAMjxB,MAAM,CAACsL,IAAP,CAAYpE,eAAZ,EAAnC;AACA,UAAMgqB,yBAAyB,GAAG,MAAMlxB,MAAM,CAACsL,IAAP,CAAY5D,4BAAZ,CAAyCupB,oBAAoB,CAACxpB,SAA9D,CAAxC;AACA,UAAM0pB,4BAA4B,GAAG,MAAMnxB,MAAM,CAAC4J,KAAP,CAAanB,IAAb,CAAkByJ,MAAE,CAAChkB,IAAH,CAAQqa,eAA1B,EAA2C2oB,yBAA3C,CAA3C,CA/BE,CAiCF;;AACA,UAAMlnB,sBAAsB,GAAG,MAAMhK,MAAM,CAACsL,IAAP,CAAYxB,6BAAZ,CAA0CknB,sBAA1C,EAAkEC,oBAAoB,CAACxrB,UAAvF,CAArC,CAlCE,CAoCF;;AACA,UAAM6O,WAAW,GAAG,MAAMgc,yBAAyB,CAACxc,QAAD,CAAnD;AACA,UAAMsd,0BAA0B,GAAG,MAAMpxB,MAAM,CAACoG,MAAP,CAAc9B,aAAd,CAA4B0F,sBAA5B,EAAoDsK,WAApD,CAAzC;AAEA,UAAM/C,MAAM,GAAG,eAAf;AACA,UAAM6d,aAAa,GAAG;AACpB1e,gBAAU,EAAEoD,QAAQ,CAACF,IADD;AAEpBua,sBAAgB,EAAEra,QAAQ,CAACD,UAFP;AAGpBpnB,cAHoB;AAIpB+hC,cAJoB;AAKpBC,sBALoB;AAMpBK,0BAAoB,EAAEsC,0BANF;AAOpBxC,wBAAkB,EAAEvuB,qCAAM,CAACE,MAAP,CAAc2wB,yBAAd,CAPA;AAQpBrC,8BAAwB,EAAExuB,qCAAM,CAACE,MAAP,CAAc4wB,4BAAd,CARN;AASpBrF,mBAAa,EAAE,MAAMoD,wBAAwB,CAACpb,QAAQ,CAACK,KAAV,EAAiB8b,oBAAjB,CATzB;AAUpBxD,6BAAuB,EAAEqE,kBAAkB,CAACtoB;AAVxB,KAAtB;AAYA,UAAM0J,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB6d,aAAnB,CAAN;AACD,GAtDD,CAsDE,OAAOl5B,CAAP,EAAU;AACV+lB,yBAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,QAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAA7B,EAAmC;AACjC,cAAQpC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBnN,OAAxB;AACE,aAAK,2BAAL;AACE,gBAAM,IAAIoM,MAAM,CAAC9G,yBAAX,EAAN;;AACF,aAAK,kBAAL;AACE,gBAAM,IAAI8G,MAAM,CAACjI,gBAAX,EAAN;;AACF,aAAK,qBAAL;AACE,gBAAM,IAAIiI,MAAM,CAAChH,mBAAX,CAA+B,gEAA/B,CAAN;;AACF,aAAK,oCAAL;AACE,gBAAM,IAAIgH,MAAM,CAAC/G,kCAAX,EAAN;;AACF,aAAK,cAAL;AACE,gBAAM,IAAI+G,MAAM,CAACxK,YAAX,EAAN;;AACF,aAAK,uBAAL;AACE;AACA;AAbJ;AAeD;;AAED,UAAMmJ,CAAN;AACD;AACF,CAjFD;;AAmFA,MAAMwmB,mBAAiB,GAAIjwB,QAAD,IAAc;AACtC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,MAAM,IAAI8K,MAAM,CAAC7L,oBAAX,EAAN;AAClC,MAAIe,QAAQ,CAACoD,MAAT,KAAoB,CAAxB,EAA2B,MAAM,IAAI0H,MAAM,CAAChM,qBAAX,EAAN;AAC5B,CAHD;;AAKA,MAAM8lC,uBAAuB,GAAIpmC,MAAD,IAAY;AAC1C,MAAIwhB,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAxB,EAAgD,MAAM,IAAIsM,MAAM,CAACvH,oBAAX,EAAN;AAEhD,MAAIyc,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAxB,EAA8CyxB,mBAAiB,CAACzxB,MAAM,CAACwB,QAAR,CAAjB;;AAE9C,MAAIggB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAApB,IAA4C,OAAOA,MAAM,CAACujC,QAAd,KAA2B,SAA3E,EAAsF;AACpF,UAAM,IAAIj3B,MAAM,CAACpH,qBAAX,EAAN;AACD;;AAED,MAAIsc,oBAAoB,CAACxhB,MAAD,EAAS,kBAAT,CAApB,IAAoD,OAAOA,MAAM,CAACwjC,gBAAd,KAAmC,SAA3F,EAAsG;AACpG,UAAM,IAAIl3B,MAAM,CAACjH,6BAAX,EAAN;AACD;;AAED,MAAImc,oBAAoB,CAACxhB,MAAD,EAAS,iBAAT,CAApB,IAAmD,OAAOA,MAAM,CAAC4lC,eAAd,KAAkC,SAAzF,EAAoG;AAClG,UAAM,IAAIt5B,MAAM,CAACzG,4BAAX,EAAN;AACD;AACF,CAhBD;;AAkBA,MAAMwgC,aAAa,GAAG,MAAOrmC,MAAP,IAAkB;AACtC,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AACAomC,2BAAuB,CAACpmC,MAAD,CAAvB;;AAEA,UAAMujC,QAAQ,GAAG/hB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAApB,GAA2CA,MAAM,CAACujC,QAAlD,GAA6D,IAA9E;AACA,UAAMC,gBAAgB,GAAGhiB,oBAAoB,CAACxhB,MAAD,EAAS,kBAAT,CAApB,GAAmDA,MAAM,CAACwjC,gBAA1D,GAA6E,KAAtG;AACA,UAAMoC,eAAe,GAAGpkB,oBAAoB,CAACxhB,MAAD,EAAS,iBAAT,CAApB,GAAkDA,MAAM,CAAC4lC,eAAzD,GAA2E,IAAnG;AAEA,UAAM9e,cAAc,GAAG9mB,MAAM,CAAC8mB,cAAP,IAAyBG,MAAE,CAACH,cAAnD;;AACAoV,2BAAuB,CAACpV,cAAD,CAAvB;;AAEA,QAAIzU,MAAM,GAAG,EAAb;AACA,QAAImP,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAxB,EAA8C,MAAM2lC,0BAA0B,CAAC3lC,MAAD,EAASujC,QAAT,EAAmBC,gBAAnB,EAAqCoC,eAArC,EAAsD9e,cAAtD,CAAhC,CAA9C,KACKzU,MAAM,CAACgpB,UAAP,GAAoB,MAAMiK,cAAc,CAACtlC,MAAD,EAASujC,QAAT,EAAmBzc,cAAnB,CAAxC;AAEL,WAAOzU,MAAP;AACD,GAhBD,CAgBE,OAAOpH,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,kBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,+BAAL;AACA,WAAK,qBAAL;AACA,WAAK,oCAAL;AACA,WAAK,iCAAL;AACA,WAAK,8BAAL;AACA,WAAK,kCAAL;AACA,WAAK,2BAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,6BAAL;AACA,WAAK,cAAL;AACA,WAAK,iBAAL;AACA,WAAK,sBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnCJ;AAqCD;AACF,CAzDD;;AA2DA,MAAMq7B,yBAAyB,GAAG,MAAOtmC,MAAP,IAAkB;AAClD,MAAI;AACFq8B,oBAAgB,CAACr8B,MAAD,CAAhB;;AACAomC,2BAAuB,CAACpmC,MAAD,CAAvB;;AAEA,QAAI,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAzB,EAA+C,MAAM,IAAIsM,MAAM,CAACjM,eAAX,EAAN;;AAE/C,QAAImhB,oBAAoB,CAACxhB,MAAD,EAAS,QAAT,CAAxB,EAA4C;AAC1C,UAAI,OAAOA,MAAM,CAACumC,MAAd,KAAyB,SAA7B,EAAwC,MAAM,IAAIj6B,MAAM,CAACvG,mBAAX,EAAN,CADE,CAG1C;;AACA,UAAI/F,MAAM,CAACumC,MAAX,EAAmB;AACjB,YAAI/kB,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAAxB,EAA8C,MAAM,IAAIsM,MAAM,CAACnH,uBAAX,EAAN;AAC9C,YAAIqc,oBAAoB,CAACxhB,MAAD,EAAS,kBAAT,CAAxB,EAAsD,MAAM,IAAIsM,MAAM,CAAClH,+BAAX,CAA2C,oCAA3C,CAAN;AACvD;AACF,KARD,MAQO,IAAI,CAACoc,oBAAoB,CAACxhB,MAAD,EAAS,UAAT,CAArB,IAA6C,CAACwhB,oBAAoB,CAACxhB,MAAD,EAAS,kBAAT,CAAtE,EAAoG;AACzG,YAAM,IAAIsM,MAAM,CAACpJ,aAAX,EAAN;AACD;;AAED,UAAM;AAAEY,kBAAF;AAAgB2hB,gBAAhB;AAA4B8d,cAA5B;AAAsCC,sBAAtC;AAAwD+C,YAAxD;AAAgEzf,oBAAc,GAAGG,MAAE,CAACH;AAApF,QAAuG9mB,MAA7G;AACA,UAAMwB,QAAQ,GAAGxB,MAAM,CAACwB,QAAP,CAAgBixB,WAAhB,EAAjB;;AAEA,QAAI;AACF,YAAM5J,QAAQ,GAAG,MAAM4b,YAAY,CAAC3gC,YAAD,EAAe2hB,UAAf,EAA2BqB,cAA3B,CAAnC;AAEA,YAAMR,MAAM,GAAG,2BAAf;AACA,YAAM6d,aAAa,GAAG;AACpB1e,kBAAU,EAAEoD,QAAQ,CAACF,IADD;AAEpBua,wBAAgB,EAAEra,QAAQ,CAACD,UAFP;AAGpBpnB,gBAHoB;AAIpB+hC,gBAJoB;AAKpBC,wBALoB;AAMpB+C;AANoB,OAAtB;AAQA,YAAMtf,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmB6d,aAAnB,CAAN;AACD,KAbD,CAaE,OAAOl5B,CAAP,EAAU;AACV+lB,2BAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAA7B,EAAmC;AACjC,gBAAQpC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBnN,OAAxB;AACE,eAAK,2BAAL;AACE,kBAAM,IAAIoM,MAAM,CAAC7G,iCAAX,EAAN;;AACF,eAAK,qCAAL;AACE,kBAAM,IAAI6G,MAAM,CAAC5G,mCAAX,EAAN;;AACF,eAAK,qBAAL;AACE,kBAAM,IAAI4G,MAAM,CAAC3G,8BAAX,EAAN;;AACF,eAAK,oCAAL;AACE,kBAAM,IAAI2G,MAAM,CAAC1G,6BAAX,EAAN;;AACF,eAAK,kBAAL;AACE,kBAAM,IAAI0G,MAAM,CAACjI,gBAAX,EAAN;;AACF,eAAK,cAAL;AACE,kBAAM,IAAIiI,MAAM,CAACxK,YAAX,EAAN;AAZJ;AAcD;;AAED,YAAMmJ,CAAN;AACD;AAEF,GAzDD,CAyDE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,eAAL;AACA,WAAK,qBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,qBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,yBAAL;AACA,WAAK,yBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,kBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wCAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,sBAAL;AACA,WAAK,uBAAL;AACA,WAAK,yBAAL;AACA,WAAK,+BAAL;AACA,WAAK,iCAAL;AACA,WAAK,qBAAL;AACA,WAAK,mCAAL;AACA,WAAK,qCAAL;AACA,WAAK,gCAAL;AACA,WAAK,+BAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnCJ;AAqCD;AACF,CAlGD;;AAoGA,MAAMu7B,wBAAwB,GAAG,CAAChlC,QAAD,EAAWw6B,WAAX,KAA2B;AAC1D,SAAOyK,IAAI,CAAC3jC,IAAI,CAACC,SAAL,CAAe;AAAEvB,YAAF;AAAYw6B;AAAZ,GAAf,CAAD,CAAX;AACD,CAFD;;AAIA,MAAM0K,0BAA0B,GAAIC,mBAAD,IAAyB;AAC1D,MAAI;AACF,UAAM;AAAEnlC,cAAF;AAAYw6B;AAAZ,QAA4Bl5B,IAAI,CAACgL,KAAL,CAAW84B,IAAI,CAACD,mBAAD,CAAf,CAAlC;;AAEAlV,uBAAiB,CAACjwB,QAAD,CAAjB;;AACA,QAAI,CAACw6B,WAAL,EAAkB,MAAM,IAAI1vB,MAAM,CAAC7D,0BAAX,EAAN;AAElB,WAAO;AAAEjH,cAAF;AAAYw6B;AAAZ,KAAP;AACD,GAPD,CAOE,iBAAM;AACN,UAAM,IAAI1vB,MAAM,CAAC7D,0BAAX,EAAN;AACD;AACF,CAXD;;AAaA,MAAM04B,eAAe,GAAG,MAAO0F,iBAAP,IAA6B;AACnD,QAAMC,kBAAkB,GAAG,MAAM/xB,MAAM,CAACmB,MAAP,CAAcpB,IAAd,CAAmB+xB,iBAAnB,CAAjC;AACA,QAAM7K,WAAW,GAAG5mB,qCAAM,CAACE,MAAP,CAAcwxB,kBAAd,CAApB;AACA,SAAO9K,WAAP;AACD,CAJD;;AAMA,MAAMC,iBAAiB,GAAG,YAAY;AACpC,QAAM1e,cAAc,GAAG,MAAMxI,MAAM,CAAC4J,KAAP,CAAa/B,0BAAb,CAAwCqK,MAAE,CAAChkB,IAAH,CAAQqa,eAAhD,CAA7B;AACA,QAAMupB,iBAAiB,GAAG,MAAM9xB,MAAM,CAAC4J,KAAP,CAAalC,4BAAb,CAA0Cc,cAA1C,CAAhC;AACA,QAAMye,WAAW,GAAG,MAAMmF,eAAe,CAAC0F,iBAAD,CAAzC;AACA,SAAO7K,WAAP;AACD,CALD;;AAOA,MAAM+K,sBAAsB,GAAG,YAAY;AACzC,MAAI;AACFhW,yBAAmB;;AAEnB,UAAMvvB,QAAQ,GAAGylB,MAAE,CAACzW,OAAH,CAAWhP,QAA5B;AACA,UAAMw6B,WAAW,GAAG,MAAMC,iBAAiB,EAA3C;;AAEA,UAAM0K,mBAAmB,GAAGH,wBAAwB,CAAChlC,QAAD,EAAWw6B,WAAX,CAApD;;AACA,WAAO;AAAE2K;AAAF,KAAP;AACD,GARD,CAQE,OAAO17B,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAPJ;AASD;AACF,CArBD;;AAuBA,MAAMo5B,0BAA0B,GAAG,YAAY;AAC7C,QAAMvgC,YAAY,GAAGoxB,4BAArB;;AACA,QAAMgB,aAAa,GAAG,MAAM,CAAG,CAA/B,CAF6C,CAEb;;;AAChC,QAAMoG,0BAA0B,GAAG,IAAnC;AACA,QAAMxV,cAAc,GAAG,YAAvB,CAJ6C,CAIT;;AACpC,QAAMyV,YAAY,CAAC;AAAEz4B,gBAAF;AAAgBoyB,iBAAhB;AAA+BoG,8BAA/B;AAA2DxV;AAA3D,GAAD,CAAlB;AACA,QAAM8B,UAAU,GAAG3B,MAAE,CAACJ,KAAH,CAASY,YAAT,CAAsB3jB,YAAtB,CAAnB;AACA,QAAM28B,aAAa,GAAGxZ,MAAE,CAACJ,KAAH,CAASa,SAAT,CAAmBkB,UAAnB,EAA+B4F,KAArD;AACA,SAAOiS,aAAP;AACD,CATD;;AAWA,MAAMuG,UAAU,GAAG,MAAOhnC,MAAP,IAAkB;AACnC,MAAI;AACF,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;;AAChC4lB,yBAAmB;;AAEnB,QAAI,CAACvP,oBAAoB,CAACxhB,MAAD,EAAS,qBAAT,CAAzB,EAA0D,MAAM,IAAIsM,MAAM,CAAChE,0BAAX,EAAN;AAC1D,UAAM;AAAEq+B;AAAF,QAA0B3mC,MAAhC;AACA,QAAI,OAAO2mC,mBAAP,KAA+B,QAAnC,EAA6C,MAAM,IAAIr6B,MAAM,CAAC9D,+BAAX,EAAN;AAC7C,QAAIm+B,mBAAmB,CAAC/hC,MAApB,KAA+B,CAAnC,EAAsC,MAAM,IAAI0H,MAAM,CAAC/D,gCAAX,EAAN;;AAEtC,UAAM;AAAE/G,cAAF;AAAYw6B;AAAZ,QAA4B0K,0BAA0B,CAACC,mBAAD,CAA5D;;AAEA,QAAInlC,QAAQ,KAAKylB,MAAE,CAACzW,OAAH,CAAWhP,QAAxB,IAAoCw6B,WAAW,MAAK,MAAMC,iBAAiB,EAA5B,CAAnD,EAAmF,MAAM,IAAI3vB,MAAM,CAAC5D,uBAAX,EAAN,CAXjF,CAaF;;AACA,UAAM27B,0BAA0B,EAAhC;AAEA,UAAMvgC,YAAY,GAAGoxB,4BAArB;AACA,UAAMoH,0BAA0B,GAAG,IAAnC;AACA,UAAM3N,MAAM,GAAGntB,QAAf;AACA,UAAM4gB,IAAI,GAAG;AAAE4Z;AAAF,KAAb;;AACA,QAAI;AACF,YAAMY,UAAU,CAAC;AAAE94B,oBAAF;AAAgB6qB,cAAhB;AAAwBvM,YAAxB;AAA8Bka;AAA9B,OAAD,CAAhB;AACD,KAFD,CAEE,OAAOrxB,CAAP,EAAU;AACV,UAAIA,CAAC,CAAChL,IAAF,KAAW,mBAAf,EAAoC,MAAMm9B,UAAU,CAAC;AAAEt5B,oBAAF;AAAgB6qB,cAAhB;AAAwBvM,YAAxB;AAA8Bka;AAA9B,OAAD,CAAhB,CAApC,KACK,MAAMrxB,CAAN;AACN;AACF,GA1BD,CA0BE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,4BAAL;AACA,WAAK,iCAAL;AACA,WAAK,kCAAL;AACA,WAAK,4BAAL;AACA,WAAK,yBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAbJ;AAeD;AACF,CA7CD;;AA+Ce;AACbsxB,cADa;AAEb2H,cAFa;AAIbtH,YAJa;AAKbQ,YALa;AAMbG,YANa;AAObG,gBAPa;AASb8B,YATa;AAUbe,SAVa;AAYb8F,eAZa;AAabC,2BAba;AAebS,wBAfa;AAgBbC;AAhBa,CAAf,E;;ACr2EA;AACA;AACA;AACA;AACA;;AAEA,MAAMjW,2BAAmB,GAAG,MAAM;AAChC,MAAI9J,MAAE,CAACgB,YAAP,EAAqB,MAAM,IAAI3b,MAAM,CAACvB,YAAX,EAAN;AACrB,MAAI,CAACkc,MAAE,CAAChkB,IAAH,CAAQwjB,IAAT,IAAiBQ,MAAE,CAACL,cAAxB,EAAwC,MAAM,IAAIta,MAAM,CAACtK,sBAAX,EAAN;AACxC,MAAI,CAACilB,MAAE,CAAChkB,IAAH,CAAQwjB,IAAb,EAAmB,MAAM,IAAIna,MAAM,CAACzK,eAAX,EAAN;AACpB,CAJD;;AAMA,MAAMmvB,2BAAmB,GAAI/lB,CAAD,IAAO;AACjC,MAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,QAAItC,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,uBAAD,CAArC,EAAgE;AAC9D,YAAM,IAAIkM,MAAM,CAACzB,mBAAX,EAAN;AACD,KAFD,MAEO,IAAII,CAAC,CAACsC,QAAF,CAAWpN,MAAX,KAAsBC,WAAW,CAAC,iBAAD,CAArC,EAA0D;AAC/D,YAAM,IAAIkM,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,GAND,MAMO,IAAIG,CAAC,CAAC/K,OAAF,IAAa+K,CAAC,CAAC/K,OAAF,CAAUixB,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAnD,EAAsD;AAC3D,UAAM,IAAI7kB,MAAM,CAACxB,OAAX,EAAN;AACD;AACF,CAVD;;AAYA,MAAMm8B,yBAAyB,GAAIjnC,MAAD,IAAY;AAC5C+wB,6BAAmB;;AAEnB,QAAMxJ,UAAU,GAAGN,MAAE,CAACK,QAAH,CAAYC,UAA/B;AACA,MAAI,CAACA,UAAU,CAAC2f,eAAhB,EAAiC,MAAM,IAAI56B,MAAM,CAACrC,yBAAX,EAAN;AACjC,MAAIsd,UAAU,CAACkI,YAAX,KAA4B,UAAhC,EAA4C,MAAM,IAAInjB,MAAM,CAACzC,gBAAX,EAAN;AAE5C,MAAI,CAAC2X,oBAAoB,CAAC/U,MAAD,EAAS,QAAT,CAAzB,EAA6C,MAAM,IAAIH,MAAM,CAAC1C,sBAAX,EAAN;AAE7C,MAAI,OAAO5J,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIsM,MAAM,CAACnB,kBAAX,EAAN;AAEhC,MAAI,CAACqW,oBAAoB,CAACxhB,MAAD,EAAS,YAAT,CAAzB,EAAiD,MAAM,IAAIsM,MAAM,CAACjD,iBAAX,EAAN;AACjD,MAAI,OAAOrJ,MAAM,CAACmnC,UAAd,KAA6B,QAAjC,EAA2C,MAAM,IAAI76B,MAAM,CAAChD,sBAAX,EAAN;AAC3C,QAAM89B,kBAAkB,GAAGnmB,uBAAuB,CAACjhB,MAAM,CAACmnC,UAAR,CAAlD;;AACA,MAAIC,kBAAkB,KAAK,MAAvB,IAAiCA,kBAAkB,KAAK,OAA5D,EAAqE;AACnE,UAAM59B,eAAe,GAAG,IAAxB;AACA,UAAM,IAAI8C,MAAM,CAAC/C,iBAAX,CAA6BC,eAA7B,CAAN;AACD;;AAED,MAAI,CAACgY,oBAAoB,CAACxhB,MAAD,EAAS,WAAT,CAAzB,EAAgD,MAAM,IAAIsM,MAAM,CAAC7C,gBAAX,EAAN;AAChD,MAAI,OAAOzJ,MAAM,CAACqnC,SAAd,KAA4B,QAAhC,EAA0C,MAAM,IAAI/6B,MAAM,CAAC5C,qBAAX,EAAN;AAC1C,QAAM49B,iBAAiB,GAAGrmB,uBAAuB,CAACjhB,MAAM,CAACqnC,SAAR,CAAjD;;AACA,MAAIC,iBAAiB,KAAK,MAAtB,IAAgCA,iBAAiB,KAAK,OAA1D,EAAmE;AACjE,UAAM99B,eAAe,GAAG,IAAxB;AACA,UAAM,IAAI8C,MAAM,CAAC3C,gBAAX,CAA4BH,eAA5B,CAAN;AACD;AACF,CA1BD;;AA4BA,MAAM+9B,oBAAoB,GAAG,MAAOvnC,MAAP,IAAkB;AAC7C,MAAI;AACF,UAAMunB,UAAU,GAAGN,MAAE,CAACK,QAAH,CAAYC,UAA/B;;AACA,QAAI,CAACA,UAAU,CAACmI,oBAAZ,IAAoCnI,UAAU,CAACnd,kBAA/C,IAAqEmd,UAAU,CAACnd,kBAAX,KAAkC,UAA3G,EAAuH;AACrH,YAAM,IAAIkC,MAAM,CAACtC,gCAAX,EAAN;AACD;;AACDi9B,6BAAyB,CAACjnC,MAAD,CAAzB;;AAEA,QAAI;AACF,YAAMsmB,MAAM,GAAG,sBAAf;AACA,YAAMkhB,iBAAiB,GAAG,MAAMvgB,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAhC;AACA,YAAMynC,eAAe,GAAGD,iBAAiB,CAACn6B,IAA1C;AAEA,YAAMq6B,QAAQ,GAAG/7B,UAAM,CAACmB,uBAAP,CAA+Bya,UAAU,CAACkI,YAAX,KAA4B,MAA3D,CAAjB;AAEA,YAAMpd,MAAM,GAAG,MAAM5F,MAAM,CACxBk7B,MADkB,CACXD,QADW,EACD;AAAEE,qBAAa,EAAErgB,UAAU,CAAC2f;AAA5B,OADC,EAElBW,kBAFkB,CAEC;AAAEt4B,iBAAS,EAAEk4B;AAAb,OAFD,CAArB;AAIA,UAAIp1B,MAAM,CAAC5H,KAAX,EAAkB,MAAM4H,MAAM,CAAC5H,KAAb;AAEnB,KAbD,CAaE,OAAOQ,CAAP,EAAU;AACV+lB,iCAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,gBAAQtC,CAAC,CAACsC,QAAF,CAAWF,IAAnB;AACE,eAAK,wBAAL;AAA+B,kBAAM,IAAIf,MAAM,CAACxC,sBAAX,EAAN;;AAC/B,eAAK,wBAAL;AAA+B,kBAAM,IAAIwC,MAAM,CAACvC,sBAAX,EAAN;;AAC/B,eAAK,kCAAL;AAAyC,kBAAM,IAAIuC,MAAM,CAACtC,gCAAX,EAAN;;AACzC,eAAK,mBAAL;AAA0B,kBAAM,IAAIsC,MAAM,CAAC/C,iBAAX,EAAN;;AAC1B,eAAK,kBAAL;AAAyB,kBAAM,IAAI+C,MAAM,CAAC3C,gBAAX,EAAN;;AACzB;AAAS;AACP,kBAAIsB,CAAC,CAACsC,QAAF,CAAWF,IAAX,IAAmBpC,CAAC,CAACsC,QAAF,CAAWF,IAAX,CAAgBpN,IAAhB,KAAyB,aAAhD,EAA+D;AAC7D,sBAAM,IAAIqM,MAAM,CAAC9B,WAAX,CAAuBS,CAAC,CAACsC,QAAF,CAAWF,IAAlC,CAAN;AACD;AACF;AAVH;AAYD;;AAED,YAAMpC,CAAN;AACD;AAEF,GAzCD,CAyCE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,mBAAL;AACA,WAAK,wBAAL;AACA,WAAK,mBAAL;AACA,WAAK,kBAAL;AACA,WAAK,uBAAL;AACA,WAAK,kBAAL;AACA,WAAK,aAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,wBAAL;AACA,WAAK,kCAAL;AACA,WAAK,2BAAL;AACA,WAAK,kBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAtBJ;AAwBD;AACF,CArED;;AAuEA,MAAM68B,qCAAqC,GAAG,MAAM;AAClD/W,6BAAmB;;AAEnB,QAAMxJ,UAAU,GAAGN,MAAE,CAACK,QAAH,CAAYC,UAA/B;AACA,MAAI,CAACA,UAAU,CAAC2f,eAAhB,EAAiC,MAAM,IAAI56B,MAAM,CAACrC,yBAAX,EAAN;AACjC,MAAIsd,UAAU,CAACkI,YAAX,KAA4B,UAAhC,EAA4C,MAAM,IAAInjB,MAAM,CAACzC,gBAAX,EAAN;AAE5C,MAAI0d,UAAU,CAACnd,kBAAX,KAAkC,UAAtC,EAAkD,MAAM,IAAIkC,MAAM,CAAChC,2BAAX,EAAN;AACnD,CARD;;AAUA,MAAMy9B,kBAAkB,GAAG,YAAY;AACrC,MAAI;AACFD,yCAAqC;;AAErC,QAAI;AACF,YAAMxhB,MAAM,GAAG,oBAAf;AACA,YAAM0hB,cAAc,GAAG,MAAM/gB,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,CAA7B;AACA,YAAMoJ,oBAAoB,GAAGsY,cAAc,CAAC36B,IAA5C;AAEA4Z,YAAE,CAACK,QAAH,CAAYC,UAAZ,CAAuBmI,oBAAvB,GAA8CA,oBAA9C;AACA,aAAO;AAAEA;AAAF,OAAP;AACD,KAPD,CAOE,OAAOzkB,CAAP,EAAU;AACV+lB,iCAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,sBAAtC,EAA8D;AAC5D,cAAM,IAAIf,MAAM,CAACpC,oBAAX,EAAN;AACD;;AAED,YAAMe,CAAN;AACD;AAEF,GApBD,CAoBE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,sBAAL;AACA,WAAK,2BAAL;AACA,WAAK,kBAAL;AACA,WAAK,6BAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAZJ;AAcD;AACF,CAtCD;;AAwCA,MAAMg9B,kBAAkB,GAAG,YAAY;AACrC,MAAI;AACFH,yCAAqC;;AAErC,QAAI;AACF,YAAMxhB,MAAM,GAAG,oBAAf;AACA,YAAMW,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,CAAN;AAEA,aAAOW,MAAE,CAACK,QAAH,CAAYC,UAAZ,CAAuBmI,oBAA9B;AACD,KALD,CAKE,OAAOzkB,CAAP,EAAU;AACV+lB,iCAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAF,IAActC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,sBAAtC,EAA8D;AAC5D,cAAM,IAAIf,MAAM,CAACpC,oBAAX,EAAN;AACD;;AAED,YAAMe,CAAN;AACD;AAEF,GAlBD,CAkBE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,sBAAL;AACA,WAAK,2BAAL;AACA,WAAK,kBAAL;AACA,WAAK,6BAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAZJ;AAcD;AACF,CApCD;;AAsCA,MAAMi9B,mBAAmB,GAAG,MAAOloC,MAAP,IAAkB;AAC5C,MAAI;AACFinC,6BAAyB,CAACjnC,MAAD,CAAzB;;AAEA,UAAMunB,UAAU,GAAGN,MAAE,CAACK,QAAH,CAAYC,UAA/B;AACA,QAAI,CAACA,UAAU,CAACnd,kBAAhB,EAAoC,MAAM,IAAIkC,MAAM,CAACjC,wBAAX,EAAN;;AAEpC,QAAI;AACF,YAAMic,MAAM,GAAG,qBAAf;AACA,YAAMkhB,iBAAiB,GAAG,MAAMvgB,MAAE,CAAC8D,OAAH,CAAWzE,MAAX,EAAmBtmB,MAAnB,CAAhC;AACA,YAAMynC,eAAe,GAAGD,iBAAiB,CAACn6B,IAA1C;AAEA,YAAMq6B,QAAQ,GAAG/7B,UAAM,CAACmB,uBAAP,CAA+Bya,UAAU,CAACkI,YAAX,KAA4B,MAA3D,CAAjB;AAEA,YAAMpd,MAAM,GAAG,MAAM5F,MAAM,CACxBk7B,MADkB,CACXD,QADW,EACD;AAAEE,qBAAa,EAAErgB,UAAU,CAAC2f;AAA5B,OADC,EAElBW,kBAFkB,CAEC;AAAEt4B,iBAAS,EAAEk4B;AAAb,OAFD,CAArB;AAIA,UAAIp1B,MAAM,CAAC5H,KAAX,EAAkB,MAAM4H,MAAM,CAAC5H,KAAb;AAEnB,KAbD,CAaE,OAAOQ,CAAP,EAAU;AACV+lB,iCAAmB,CAAC/lB,CAAD,CAAnB;;AAEA,UAAIA,CAAC,CAACsC,QAAN,EAAgB;AACd,YAAItC,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,mBAAxB,EAA6C;AAC3C,gBAAM,IAAIf,MAAM,CAAC/C,iBAAX,EAAN;AACD,SAFD,MAEO,IAAI0B,CAAC,CAACsC,QAAF,CAAWF,IAAX,KAAoB,kBAAxB,EAA4C;AACjD,gBAAM,IAAIf,MAAM,CAAC3C,gBAAX,EAAN;AACD;AACF;;AAED,YAAMsB,CAAN;AACD;AAEF,GAjCD,CAiCE,OAAOA,CAAP,EAAU;AAEV,YAAQA,CAAC,CAAChL,IAAV;AACE,WAAK,oBAAL;AACA,WAAK,mBAAL;AACA,WAAK,wBAAL;AACA,WAAK,mBAAL;AACA,WAAK,kBAAL;AACA,WAAK,uBAAL;AACA,WAAK,kBAAL;AACA,WAAK,wBAAL;AACA,WAAK,0BAAL;AACA,WAAK,2BAAL;AACA,WAAK,kBAAL;AACA,WAAK,wBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,oBAAL;AACE,cAAMgL,CAAN;;AAEF;AACE,cAAM,IAAIqB,MAAM,CAACtB,yBAAX,CAAqCC,CAArC,CAAN;AAnBJ;AAqBD;AACF,CA1DD;;AA4De;AACbs8B,sBADa;AAEbQ,oBAFa;AAGbE,oBAHa;AAIbC;AAJa,CAAf,E;;AC/QA;AACA;AACA;AAEe;AACbzhB,MAAI,EAAEhb,QAAI,CAACgb,IADE;AAGbtY,QAAM,EAAE1C,QAAI,CAAC0C,MAHA;AAIbkB,QAAM,EAAE5D,QAAI,CAAC4D,MAJA;AAKbsd,SAAO,EAAElhB,QAAI,CAACkhB,OALD;AAMboH,YAAU,EAAEtoB,QAAI,CAACsoB,UANJ;AAObG,YAAU,EAAEzoB,QAAI,CAACyoB,UAPJ;AAQbE,gBAAc,EAAE3oB,QAAI,CAAC2oB,cARR;AAUbmI,cAAY,EAAE7wB,MAAE,CAAC6wB,YAVJ;AAYbK,YAAU,EAAElxB,MAAE,CAACkxB,UAZF;AAabQ,YAAU,EAAE1xB,MAAE,CAAC0xB,UAbF;AAcbG,YAAU,EAAE7xB,MAAE,CAAC6xB,UAdF;AAebG,gBAAc,EAAEhyB,MAAE,CAACgyB,cAfN;AAiBb8B,YAAU,EAAE9zB,MAAE,CAAC8zB,UAjBF;AAkBbe,SAAO,EAAE70B,MAAE,CAAC60B,OAlBC;AAoBb2D,cAAY,EAAEx4B,MAAE,CAACw4B,YApBJ;AAqBbmC,eAAa,EAAE36B,MAAE,CAAC26B,aArBL;AAsBbC,2BAAyB,EAAE56B,MAAE,CAAC46B,yBAtBjB;AAuBbS,wBAAsB,EAAEr7B,MAAE,CAACq7B,sBAvBd;AAwBbC,YAAU,EAAEt7B,MAAE,CAACs7B,UAxBF;AA0BbO,sBAAoB,EAAE37B,YAAQ,CAAC27B,oBA1BlB;AA2BbQ,oBAAkB,EAAEn8B,YAAQ,CAACm8B,kBA3BhB;AA4BbE,oBAAkB,EAAEr8B,YAAQ,CAACq8B,kBA5BhB;AA6BbC,qBAAmB,EAAEt8B,YAAQ,CAACs8B;AA7BjB,CAAf,E","file":"userbase.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"base64-arraybuffer\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"diffie-hellman\");","module.exports = require(\"scrypt-js\");","module.exports = require(\"sorted-array\");","export default {\n  'Success': 200,\n\n  'Bad Request': 400,\n  'Unauthorized': 401,\n  'Payment Required': 402,\n  'Forbidden': 403,\n  'Not Found': 404,\n  'Conflict': 409,\n  'Too Many Requests': 429,\n\n  'Internal Server Error': 500,\n  'Service Unavailable': 503,\n  'Gateway Timeout': 504,\n\n  // WebSocket close event codes\n  'Service Restart': 1012,\n\n  // Custom ws close event codes\n  'No Pong Received': 3000,\n  'Client Already Connected': 3001\n}\n","import statusCodes from '../statusCodes'\n\nclass UsernameAlreadyExists extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UsernameAlreadyExists'\n    this.message = 'Username already exists.'\n    this.status = statusCodes['Conflict']\n  }\n}\n\nclass UsernameMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UsernameMissing'\n    this.message = 'Username missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UsernameCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UsernameCannotBeBlank'\n    this.message = 'Username cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UsernameTooLong extends Error {\n  constructor(maxLen, ...params) {\n    super(maxLen, ...params)\n\n    this.name = 'UsernameTooLong'\n    this.message = `Username too long. Must be a max of ${maxLen} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UsernameMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UsernameMustBeString'\n    this.message = 'Username must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PasswordMissing'\n    this.message = 'Password missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PasswordCannotBeBlank'\n    this.message = 'Password cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordTooShort extends Error {\n  constructor(minLen, ...params) {\n    super(minLen, ...params)\n\n    this.name = 'PasswordTooShort'\n    this.message = `Password too short. Must be a minimum of ${minLen} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordTooLong extends Error {\n  constructor(maxLen, ...params) {\n    super(maxLen, ...params)\n\n    this.name = 'PasswordTooLong'\n    this.message = `Password too long. Must be a max of ${maxLen} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PasswordMustBeString'\n    this.message = 'Password must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PasswordAttemptLimitExceeded extends Error {\n  constructor(delay, ...params) {\n    super(delay, ...params)\n\n    this.name = 'PasswordAttemptLimitExceeded'\n    this.message = `Password attempt limit exceeded. Must wait ${delay} to attempt to use password again.`\n    this.status = statusCodes['Unauthorized']\n  }\n}\n\nclass UsernameOrPasswordMismatch extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UsernameOrPasswordMismatch'\n    this.message = 'Username or password mismatch.'\n    this.status = statusCodes['Unauthorized']\n  }\n}\n\nclass SessionLengthMustBeNumber extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SessionLengthMustBeNumber'\n    this.message = 'Session length must be a number.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass SessionLengthTooShort extends Error {\n  constructor(minLen, ...params) {\n    super(minLen, ...params)\n\n    this.name = 'SessionLengthTooShort'\n    this.message = `Session length cannot be shorter than ${minLen}.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass SessionLengthTooLong extends Error {\n  constructor(maxLen, ...params) {\n    super(maxLen, ...params)\n\n    this.name = 'SessionLengthTooLong'\n    this.message = `Session length cannot be longer than ${maxLen}.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass AllowServerSideEncryptionMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AllowServerSideEncryptionMustBeBoolean'\n    this.message = 'Allow server-side encryption value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UserAlreadySignedIn extends Error {\n  constructor(username, ...params) {\n    super(...params)\n\n    this.name = 'UserAlreadySignedIn'\n    this.message = 'Already signed in.'\n    this.status = statusCodes['Bad Request']\n    this.username = username\n  }\n}\n\nclass UserPendingDeletion extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserPendingDeletion'\n    this.message = 'User is pending deletion.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass AppIdNotValid extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AppIdNotValid'\n    this.message = 'App ID not valid.'\n    this.status = statusCodes['Unauthorized']\n  }\n}\n\nclass DomainNotWhitelisted extends Error {\n  constructor(domain, ...params) {\n    super(domain, ...params)\n\n    this.name = 'DomainNotWhitelisted'\n    this.message = `Domain not whitelisted. Whitelist the domain ${domain ? `'${domain}' ` : ''}in your admin panel.`\n    this.status = statusCodes['Unauthorized']\n  }\n}\n\nclass UserNotSignedIn extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserNotSignedIn'\n    this.message = 'Not signed in.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UserNotFound extends Error {\n  constructor(username, ...params) {\n    super(username, ...params)\n\n    if (username) this.username = username\n\n    this.name = 'UserNotFound'\n    this.message = 'User not found.'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass UserEmailNotFound extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserEmailNotFound'\n    this.message = 'User does not have an email saved.'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass UserMustChangePassword extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserMustChangePassword'\n    this.message = 'Must change password first.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass EmailNotValid extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'EmailNotValid'\n    this.message = 'Email not valid.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ProfileMustBeObject extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ProfileMustBeObject'\n    this.message = 'Profile must be a flat JSON object.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ProfileCannotBeEmpty extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ProfileCannotBeEmpty'\n    this.message = 'Profile cannot be empty.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ProfileHasTooManyKeys extends Error {\n  constructor(maxKeys, ...params) {\n    super(maxKeys, ...params)\n\n    this.name = 'ProfileHasTooManyKeys'\n    this.message = `Profile has too many keys. Must have a max of ${maxKeys} keys.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ProfileKeyTooLong extends Error {\n  constructor(maxLen, key, ...params) {\n    super(maxLen, key, ...params)\n\n    this.name = 'ProfileKeyTooLong'\n    this.message = `Profile key too long. Must be a max of ${maxLen} characters.`\n    this.status = statusCodes['Bad Request']\n    this.key = key\n  }\n}\n\nclass ProfileValueMustBeString extends Error {\n  constructor(key, value, ...params) {\n    super(key, value, ...params)\n\n    this.name = 'ProfileValueMustBeString'\n    this.message = 'Profile value must be a string.'\n    this.status = statusCodes['Bad Request']\n    this.key = key\n    this.value = value\n  }\n}\n\nclass ProfileValueCannotBeBlank extends Error {\n  constructor(key, ...params) {\n    super(key, ...params)\n\n    this.name = 'ProfileValueCannotBeBlank'\n    this.message = 'Profile value cannot be blank.'\n    this.status = statusCodes['Bad Request']\n    this.key = key\n  }\n}\n\nclass ProfileValueTooLong extends Error {\n  constructor(maxLen, key, value, ...params) {\n    super(maxLen, key, value, ...params)\n\n    this.name = 'ProfileValueTooLong'\n    this.message = `Profile value too long. Must be a max of ${maxLen} characters.`\n    this.status = statusCodes['Bad Request']\n    this.key = key\n    this.value = value\n  }\n}\n\nclass RememberMeValueNotValid extends Error {\n  constructor(options, ...params) {\n    super(options, ...params)\n\n    this.name = 'RememberMeValueNotValid'\n    this.message = `Remember me value must be one of ${JSON.stringify(Object.keys(options))}.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ParamsMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ParamsMissing'\n    this.message = 'Parameters expected are missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass TrialExceededLimit extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'TrialExceededLimit'\n    this.message = 'Trial exceeded limit of users.'\n    this.status = statusCodes['Payment Required']\n  }\n}\n\nclass CurrentPasswordMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'CurrentPasswordMissing'\n    this.message = 'Current password missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass CurrentPasswordIncorrect extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'CurrentPasswordIncorrect'\n    this.message = 'Current password is incorrect.'\n    this.status = statusCodes['Unauthorized']\n  }\n}\n\nclass KeyNotFound extends Error {\n  constructor(message, ...params) {\n    super(message, ...params)\n\n    this.name = 'KeyNotFound'\n    this.message = message\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass DeleteEndToEndEncryptedDataMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DeleteEndToEndEncryptedDataMustBeBoolean'\n    this.message = 'Delete end-to-end encrypted data value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nexport default {\n  UsernameAlreadyExists,\n  UsernameMissing,\n  UsernameCannotBeBlank,\n  UsernameTooLong,\n  UsernameMustBeString,\n  PasswordMissing,\n  PasswordCannotBeBlank,\n  PasswordTooShort,\n  PasswordTooLong,\n  PasswordMustBeString,\n  PasswordAttemptLimitExceeded,\n  UsernameOrPasswordMismatch,\n  SessionLengthMustBeNumber,\n  SessionLengthTooShort,\n  SessionLengthTooLong,\n  AllowServerSideEncryptionMustBeBoolean,\n  UserAlreadySignedIn,\n  UserPendingDeletion,\n  AppIdNotValid,\n  DomainNotWhitelisted,\n  UserNotSignedIn,\n  UserNotFound,\n  UserEmailNotFound,\n  UserMustChangePassword,\n  EmailNotValid,\n  ProfileMustBeObject,\n  ProfileCannotBeEmpty,\n  ProfileHasTooManyKeys,\n  ProfileKeyTooLong,\n  ProfileValueMustBeString,\n  ProfileValueCannotBeBlank,\n  ProfileValueTooLong,\n  RememberMeValueNotValid,\n  ParamsMissing,\n  TrialExceededLimit,\n  CurrentPasswordMissing,\n  CurrentPasswordIncorrect,\n  KeyNotFound,\n  DeleteEndToEndEncryptedDataMustBeBoolean,\n}\n","import statusCodes from '../statusCodes'\n\nclass DatabaseNameMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseNameMissing'\n    this.message = 'Database name missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseNameCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseNameCannotBeBlank'\n    this.message = 'Database name cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseNameMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseNameMustBeString'\n    this.message = 'Database name must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseNameTooLong extends Error {\n  constructor(maxLength, ...params) {\n    super(maxLength, ...params)\n\n    this.name = 'DatabaseNameTooLong'\n    this.message = `Database name cannot be more than ${maxLength} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseNameRestricted extends Error {\n  constructor(databaseName, ...params) {\n    super(databaseName, ...params)\n\n    this.name = 'DatabaseNameRestricted'\n    this.message = `Database name '${databaseName}' is restricted. It is used internally by userbase-js.`\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass DatabaseAlreadyOpening extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseAlreadyOpening'\n    this.message = 'Already attempting to open database.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ChangeHandlerMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ChangeHandlerMissing'\n    this.message = 'Change handler missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ChangeHandlerMustBeFunction extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ChangeHandlerMustBeFunction'\n    this.message = 'Change handler must be a function.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass EncryptionModeNotValid extends Error {\n  constructor(options, ...params) {\n    super(options, ...params)\n\n    this.name = 'EncryptionModeNotValid'\n    this.message = `Encryption mode must be one of ${JSON.stringify(Object.keys(options))}.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ServerSideEncryptionNotEnabledInClient extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ServerSideEncryptionNotEnabledInClient'\n    this.message = 'Server-side encryption must be enabled in the client to use it. To enable it, set allowServerSideEncryption to true in init().'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass DatabaseNotOpen extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseNotOpen'\n    this.message = 'Database is not open.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseNotFound extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseNotFound'\n    this.message = 'Database not found. Find available databases using getDatabases().'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass DatabaseIsReadOnly extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseIsReadOnly'\n    this.message = 'Database is read only. Must have permission to write to database.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass DatabaseIdMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseIdMustBeString'\n    this.message = 'Database id must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseIdCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseIdCannotBeBlank'\n    this.message = 'Database id cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseIdNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseIdNotAllowed'\n    this.message = 'Database id not allowed. Cannot provide both databaseName and databaseId, can only provide one.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass DatabaseIdNotAllowedForOwnDatabase extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'DatabaseIdNotAllowedForOwnDatabase'\n    this.message = \"Tried to open the user's own database using its databaseId rather than its databaseName. The databaseId should only be used to open databases shared from other users.\"\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass DatabaseIdInvalidLength extends Error {\n  constructor(length, ...params) {\n    super(length, ...params)\n\n    this.name = 'DatabaseIdInvalidLength'\n    this.message = `Database id invalid length. Must be ${length} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ShareTokenInvalid extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ShareTokenInvalid'\n    this.message = 'Share token invalid.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ShareTokenNotFound extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ShareTokenNotFound'\n    this.message = 'Share token not found. Perhaps the database owner has generated a new share token.'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass ShareTokenNotAllowed extends Error {\n  constructor(reason, ...params) {\n    super(reason, ...params)\n\n    this.name = 'ShareTokenNotAllowed'\n    this.message = 'Share token not allowed.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ShareTokenNotAllowedForOwnDatabase extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ShareTokenNotAllowedForOwnDatabase'\n    this.message = \"Tried to open the user's own database using its shareToken rather than its databaseName. The shareToken should only be used to open databases shared from other users.\"\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass ReadOnlyMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ReadOnlyMustBeBoolean'\n    this.message = 'Read only value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ReadOnlyParamNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ReadOnlyParamNotAllowed'\n    this.message = 'Read only parameter not allowed when revoking access to a database.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ResharingAllowedParamNotAllowed extends Error {\n  constructor(reason, ...params) {\n    super(reason, ...params)\n\n    this.name = 'ResharingAllowedParamNotAllowed'\n    this.message = `Resharing allowed parameter not allowed ${reason}.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ResharingAllowedMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ResharingAllowedMustBeBoolean'\n    this.message = 'Resharing allowed value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ResharingNotAllowed extends Error {\n  constructor(reason, ...params) {\n    super(reason, ...params)\n\n    this.name = 'ResharingNotAllowed'\n    this.message = `Resharing not allowed. ${reason}.`\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass ResharingWithWriteAccessNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ResharingWithWriteAccessNotAllowed'\n    this.message = 'Resharing with write access not allowed. Must have permission to write to the database to reshare the database with write access another user.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass SharingWithSelfNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SharingWithSelfNotAllowed'\n    this.message = 'Sharing database with self is not allowed. Must share database with another user.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ModifyingOwnPermissionsNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ModifyingOwnPermissionsNotAllowed'\n    this.message = \"Modifying own database permissions not allowed. Must modify another user's permissions.\"\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ModifyingOwnerPermissionsNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ModifyingOwnerPermissionsNotAllowed'\n    this.message = \"Modifying the owner of a database's permissions is not allowed.\"\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass ModifyingPermissionsNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ModifyingPermissionsNotAllowed'\n    this.message = \"Modifying another user's permissions is not allowed. Must have permission to reshare the database with another user.\"\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass GrantingWriteAccessNotAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'GrantingWriteAccessNotAllowed'\n    this.message = 'Granting write access not allowed. Must have permission to write to the database to grant write access to another user.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass RequireVerifiedMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RequireVerifiedMustBeBoolean'\n    this.message = 'Require verified value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RequireVerifiedParamNotNecessary extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RequireVerifiedParamNotNecessary'\n    this.message = 'Require verified parameter not necessary when sharing database without a username.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RevokeMustBeBoolean extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RevokeMustBeBoolean'\n    this.message = 'Revoke value must be a boolean.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemMissing'\n    this.message = 'Item missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemInvalid extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemInvalid'\n    this.message = 'Item must be serializable to JSON.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemTooLarge extends Error {\n  constructor(maxKb, ...params) {\n    super(maxKb, ...params)\n\n    this.name = 'ItemTooLarge'\n    this.message = `Item must be less than ${maxKb} KB.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemIdMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemIdMustBeString'\n    this.message = 'Item id must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemIdTooLong extends Error {\n  constructor(maxLength, ...params) {\n    super(maxLength, ...params)\n\n    this.name = 'ItemIdTooLong'\n    this.message = `Item id cannot be more than ${maxLength} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemIdMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemIdMissing'\n    this.message = 'Item id missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemIdCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemIdCannotBeBlank'\n    this.message = 'Item id cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ItemAlreadyExists extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemAlreadyExists'\n    this.message = 'Item with the same id already exists.'\n    this.status = statusCodes['Conflict']\n  }\n}\n\nclass ItemDoesNotExist extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemDoesNotExist'\n    this.message = 'Item with the provided id does not exist.'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass ItemUpdateConflict extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ItemUpdateConflict'\n    this.message = 'Item update conflict.'\n    this.status = statusCodes['Conflict']\n  }\n}\n\nclass FileMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileMissing'\n    this.message = 'File missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileMustBeFile extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileMustBeFile'\n    this.message = 'File must be a file.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileCannotBeEmpty extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileCannotBeEmpty'\n    this.message = 'File cannot be empty.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileUploadConflict extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileUploadConflict'\n    this.message = 'File upload conflict.'\n    this.status = statusCodes['Conflict']\n  }\n}\n\nclass FileNotFound extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileNotFound'\n    this.message = 'File not found.'\n    this.status = statusCodes['Not Found']\n  }\n}\n\nclass FileIdMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileIdMissing'\n    this.message = 'File id missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileIdMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileIdMustBeString'\n    this.message = 'File id must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileIdCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'FileIdCannotBeBlank'\n    this.message = 'File id cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass FileIdTooLong extends Error {\n  constructor(maxLength, ...params) {\n    super(maxLength, ...params)\n\n    this.name = 'FileIdTooLong'\n    this.message = `File id cannot be more than ${maxLength} characters.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeMustBeObject extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeMustBeObject'\n    this.message = 'Range param provided must be object.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeMissingStart extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeMissingStart'\n    this.message = 'Range param missing start.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeMissingEnd extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeMissingEnd'\n    this.message = 'Range param missing end.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeStartMustBeNumber extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeStartMustBeNumber'\n    this.message = 'Range start provided must be a number.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeEndMustBeNumber extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeEndMustBeNumber'\n    this.message = 'Range end provided must be a number.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeStartMustBeGreaterThanZero extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeStartMustBeGreaterThanZero'\n    this.message = 'Range start provided must be greater than 0.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeEndMustBeGreaterThanRangeStart extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeEndMustBeGreaterThanRangeStart'\n    this.message = 'Range end provided must be greater than range start.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass RangeEndMustBeLessThanFileSize extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'RangeEndMustBeLessThanFileSize'\n    this.message = 'Range end provided must be less than file size.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass OperationsMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'OperationsMissing'\n    this.message = 'Operations missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass OperationsMustBeArray extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'OperationsMustBeArray'\n    this.message = 'Operations provided must be an array.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass CommandNotRecognized extends Error {\n  constructor(command, ...params) {\n    super(command, ...params)\n\n    this.name = 'CommandNotRecognized'\n    this.message = `Command '${command}' not recognized.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass OperationsConflict extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'OperationsConflict'\n    this.message = 'Operations conflict. Only allowed 1 operation per item.'\n    this.status = statusCodes['Conflict']\n  }\n}\n\nclass OperationsExceedLimit extends Error {\n  constructor(limit, ...params) {\n    super(limit, ...params)\n\n    this.name = 'OperationsExceedLimit'\n    this.message = `Operations exceed limit. Only allowed ${limit} operations.`\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UserNotVerified extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserNotVerified'\n    this.message = 'User not verified. Either verify user before sharing database, or set requireVerified to false.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass UserMustBeReverified extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserMustBeReverified'\n    this.message = 'User must be reverified.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass UserUnableToReceiveDatabase extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UserUnableToReceiveDatabase'\n    this.message = 'User unable to receive database. User must sign in with an updated userbase-js client to be able to receive database.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass VerificationMessageMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'VerificationMessageMissing'\n    this.message = 'Verification message missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass VerificationMessageCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'VerificationMessageCannotBeBlank'\n    this.message = 'Verification message cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass VerificationMessageMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'VerificationMessageMustBeString'\n    this.message = 'Verification message must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass VerificationMessageInvalid extends Error {\n  constructor(maxLength, ...params) {\n    super(maxLength, ...params)\n\n    this.name = 'VerificationMessageInvalid'\n    this.message = 'Verification message invalid.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass VerifyingSelfNotAllowed extends Error {\n  constructor(maxLength, ...params) {\n    super(maxLength, ...params)\n\n    this.name = 'VerifyingSelfNotAllowed'\n    this.message = 'Verifying self not allowed. Can only verify other users.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ProgressHandlerMustBeFunction extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ProgressHandlerMustBeFunction'\n    this.message = 'Progress handler must be a function.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass TransactionUnauthorized extends Error {\n  constructor(command, ...params) {\n    super(command, ...params)\n\n    this.name = 'TransactionUnauthorized'\n    this.message = `Calling '${command}' on this item is unauthorized.`\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass WriteAccessParamNotAllowed extends Error {\n  constructor(command, ...params) {\n    super(command, ...params)\n\n    this.name = 'WriteAccessParamNotAllowed'\n    this.message = `Write access parameter not allowed. Only the item creator or database owner can change an item's write access settings.`\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nexport default {\n  DatabaseNameMissing,\n  DatabaseNameCannotBeBlank,\n  DatabaseNameMustBeString,\n  DatabaseNameTooLong,\n  DatabaseNameRestricted,\n  DatabaseNotFound,\n  DatabaseIsReadOnly,\n  DatabaseAlreadyOpening,\n  DatabaseIdMustBeString,\n  DatabaseIdCannotBeBlank,\n  DatabaseIdNotAllowed,\n  DatabaseIdNotAllowedForOwnDatabase,\n  DatabaseIdInvalidLength,\n  ShareTokenInvalid,\n  ShareTokenNotFound,\n  ShareTokenNotAllowed,\n  ShareTokenNotAllowedForOwnDatabase,\n  ReadOnlyMustBeBoolean,\n  ReadOnlyParamNotAllowed,\n  ResharingAllowedMustBeBoolean,\n  ResharingNotAllowed,\n  ResharingWithWriteAccessNotAllowed,\n  ResharingAllowedParamNotAllowed,\n  SharingWithSelfNotAllowed,\n  ModifyingOwnPermissionsNotAllowed,\n  ModifyingOwnerPermissionsNotAllowed,\n  ModifyingPermissionsNotAllowed,\n  GrantingWriteAccessNotAllowed,\n  RequireVerifiedMustBeBoolean,\n  RequireVerifiedParamNotNecessary,\n  RevokeMustBeBoolean,\n  ChangeHandlerMissing,\n  ChangeHandlerMustBeFunction,\n  EncryptionModeNotValid,\n  ServerSideEncryptionNotEnabledInClient,\n  DatabaseNotOpen,\n  ItemMissing,\n  ItemInvalid,\n  ItemTooLarge,\n  ItemIdMustBeString,\n  ItemIdTooLong,\n  ItemIdMissing,\n  ItemIdCannotBeBlank,\n  ItemAlreadyExists,\n  ItemDoesNotExist,\n  ItemUpdateConflict,\n  FileMissing,\n  FileMustBeFile,\n  FileCannotBeEmpty,\n  FileUploadConflict,\n  FileNotFound,\n  FileIdMissing,\n  FileIdMustBeString,\n  FileIdCannotBeBlank,\n  FileIdTooLong,\n  RangeMustBeObject,\n  RangeMissingStart,\n  RangeMissingEnd,\n  RangeStartMustBeNumber,\n  RangeEndMustBeNumber,\n  RangeStartMustBeGreaterThanZero,\n  RangeEndMustBeGreaterThanRangeStart,\n  RangeEndMustBeLessThanFileSize,\n  OperationsMissing,\n  OperationsMustBeArray,\n  OperationsConflict,\n  OperationsExceedLimit,\n  CommandNotRecognized,\n  UserNotVerified,\n  UserMustBeReverified,\n  UserUnableToReceiveDatabase,\n  VerificationMessageMissing,\n  VerificationMessageMustBeString,\n  VerificationMessageCannotBeBlank,\n  VerificationMessageInvalid,\n  VerifyingSelfNotAllowed,\n  ProgressHandlerMustBeFunction,\n  TransactionUnauthorized,\n  WriteAccessParamNotAllowed,\n}\n","import statusCodes from '../statusCodes'\n\nclass AppIdAlreadySet extends Error {\n  constructor(appId, ...params) {\n    super(appId, ...params)\n\n    this.name = 'AppIdAlreadySet'\n    this.message = 'Application ID already set.'\n    this.status = statusCodes['Conflict']\n    this.appId = appId\n  }\n}\n\nclass AppIdMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AppIdMustBeString'\n    this.message = 'Application ID must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass AppIdMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AppIdMissing'\n    this.message = 'Application ID missing.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nclass AppIdCannotBeBlank extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AppIdCannotBeBlank'\n    this.message = 'Application ID cannot be blank.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass WebCryptoUnavailable extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'WebCryptoUnavailable'\n    this.message = 'The WebCrypto API is unavailable. Please make sure your website uses https.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass UpdateUserHandlerMustBeFunction extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'UpdateUserHandlerMustBeFunction'\n    this.message = 'Update user handler must be a function.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nexport default {\n  AppIdAlreadySet,\n  AppIdMustBeString,\n  AppIdMissing,\n  AppIdCannotBeBlank,\n  WebCryptoUnavailable,\n  UpdateUserHandlerMustBeFunction,\n}\n","import statusCodes from '../statusCodes'\n\nclass SuccessUrlMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SuccessUrlMissing'\n    this.message = 'Success url missing to let Stripe know where to redirect users on successful payment.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nclass SuccessUrlMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SuccessUrlMustBeString'\n    this.message = 'Success url must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nclass SuccessUrlInvalid extends Error {\n  constructor(invalidProtocol, ...params) {\n    super(invalidProtocol, ...params)\n\n    this.name = 'SuccessUrlInvalid'\n    this.message = invalidProtocol ? 'Success url must start with http or https.' : 'Success url invalid.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nclass CancelUrlMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'CancelUrlMissing'\n    this.message = 'Cancel url missing to let Stripe know where to redirect users on canceled payment.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass CancelUrlMustBeString extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'CancelUrlMustBeString'\n    this.message = 'Cancel url must be a string.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass CancelUrlInvalid extends Error {\n  constructor(invalidProtocol, ...params) {\n    super(invalidProtocol, ...params)\n\n    this.name = 'CancelUrlInvalid'\n    this.message = invalidProtocol ? 'Cancel url must start with http or https.' : 'Cancel url invalid.'\n    this.status = statusCodes['Bad Request']\n  }\n}\nclass StripeJsLibraryMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'StripeLibraryMissing'\n    this.message = 'Stripe.js library missing. Be sure to include the script in your html file (https://stripe.com/docs/stripe-js#setup).'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PaymentsDisabled extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PaymentsDisabled'\n    this.message = 'Payments on this app are disabled. Enable payments in the admin panel.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass PriceIdOrPlanIdAllowed extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PriceIdOrPlanIdAllowed'\n    this.message = 'Only one of priceId or planId allowed.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass PriceIdOrPlanIdMissing extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'PriceIdOrPlanIdMissing'\n    this.message = 'Please provide a priceId or planId. You can create a product in the Stripe dashboard and find its priceId there.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass SubscriptionPlanAlreadyPurchased extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SubscriptionPlanAlreadyPurchased'\n    this.message = 'Subscription plan already purchased. Cancel subscription to purchase another.'\n    this.status = statusCodes['Conflict']\n  }\n}\nclass StripeAccountNotConnected extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'StripeAccountNotConnected'\n    this.message = 'Stripe account not connected. Connect a Stripe account in the admin panel.'\n    this.status = statusCodes['Forbidden']\n  }\n}\n\nclass SubscriptionNotFound extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SubscriptionNotFound'\n    this.message = 'Subscription not found. User must purchase a subscription.'\n    this.status = statusCodes['Payment Required']\n  }\n}\n\nclass SubscriptionInactive extends Error {\n  constructor(subscriptionStatus, ...params) {\n    super(...params)\n\n    this.name = 'SubscriptionInactive'\n    this.message = \"The user's subscription is inactive.\"\n    this.subscriptionStatus = subscriptionStatus\n    this.status = statusCodes['Payment Required']\n  }\n}\n\nclass SubscriptionNotPurchased extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SubscriptionNotPurchased'\n    this.message = 'Subscription not purchased. User must purchase a subscription.'\n    this.status = statusCodes['Payment Required']\n  }\n}\n\nclass SubscriptionAlreadyCanceled extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'SubscriptionAlreadyCanceled'\n    this.message = 'Subscription already canceled. User must purchase a new subscription.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass TrialExpired extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'TrialExpired'\n    this.message = 'Trial expired. User must purchase a subscription.'\n    this.status = statusCodes['Payment Required']\n  }\n}\n\nclass StripeError extends Error {\n  constructor(error, ...params) {\n    super(error, ...params)\n\n    const { status, type, message } = error\n\n    this.name = 'StripeError'\n    this.message = message\n    this.type = type\n    this.status = status\n  }\n}\n\nexport default {\n  SuccessUrlMissing,\n  SuccessUrlMustBeString,\n  SuccessUrlInvalid,\n  CancelUrlMissing,\n  CancelUrlMustBeString,\n  CancelUrlInvalid,\n  StripeJsLibraryMissing,\n  PaymentsDisabled,\n  PriceIdOrPlanIdAllowed,\n  PriceIdOrPlanIdMissing,\n  SubscriptionPlanAlreadyPurchased,\n  StripeAccountNotConnected,\n  SubscriptionNotFound,\n  SubscriptionInactive,\n  SubscriptionNotPurchased,\n  SubscriptionAlreadyCanceled,\n  TrialExpired,\n  StripeError,\n}\n","import auth from './auth'\nimport db from './db'\nimport config from './config'\nimport payments from './payments'\nimport statusCodes from '../statusCodes'\n\nclass AppIdNotSet extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'AppIdNotSet'\n    this.message = 'App ID not set yet. Make sure to configure app ID.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass ServiceUnavailable extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ServiceUnavailable'\n    this.message = 'Service unavailable.'\n    this.status = statusCodes['Service Unavailable']\n  }\n}\n\nclass InternalServerError extends ServiceUnavailable {\n  constructor(...params) {\n    super(...params)\n\n    this.status = statusCodes['Internal Server Error']\n  }\n}\n\nclass Timeout extends ServiceUnavailable {\n  constructor(...params) {\n    super(...params)\n\n    this.status = statusCodes['Gateway Timeout']\n  }\n}\n\nclass Reconnecting extends ServiceUnavailable {\n  constructor(...params) {\n    super(...params)\n\n    this.message = 'Reconnecting.'\n  }\n}\n\nclass UnknownServiceUnavailable extends ServiceUnavailable {\n  constructor(e, ...params) {\n    super(e, ...params)\n\n    console.error('Userbase error. Please report this to support@userbase.com.\\n\\n', e)\n  }\n}\n\nclass ParamsMustBeObject extends Error {\n  constructor(...params) {\n    super(...params)\n\n    this.name = 'ParamsMustBeObject'\n    this.message = 'Parameters passed to function must be placed inside an object.'\n    this.status = statusCodes['Bad Request']\n  }\n}\n\nclass TooManyRequests extends Error {\n  constructor(retryDelay, ...params) {\n    super(retryDelay, ...params)\n\n    const retryDelaySeconds = Math.floor(retryDelay / 1000)\n\n    this.name = 'TooManyRequests'\n    this.message = `Too many requests in a row. Please try again in ${retryDelaySeconds} second${retryDelaySeconds !== 1 ? 's' : ''}.`\n    this.status = statusCodes['Too Many Requests']\n  }\n}\n\nexport default {\n  ...auth,\n  ...db,\n  ...config,\n  ...payments,\n  AppIdNotSet,\n  InternalServerError,\n  ServiceUnavailable,\n  Timeout,\n  Reconnecting,\n  UnknownServiceUnavailable,\n  ParamsMustBeObject,\n  TooManyRequests\n}\n","import errors from './errors'\n\nconst USERBASE_JS_VERSION = '2.8.0'\n\nconst VERSION = '/v1'\nconst DEFAULT_ENDPOINT = 'https://v1.userbase.com' + VERSION\n\nconst STRIPE_PRODUCTION_PUBLISHABLE_KEY = 'pk_live_jI6lbsAIQlu2u4uTkDXFrSEW'\nconst STRIPE_TEST_PUBLISHABLE_KEY = 'pk_test_rYANrLdNfdJXJ2d808wW4pqY'\n\nlet userbaseAppId = null\nlet userbaseUpdateUserHandler = null\nlet userbaseAllowServerSideEncryptionMode = false\n\nconst getAppId = () => {\n  if (!userbaseAppId) throw new errors.AppIdNotSet\n  return userbaseAppId\n}\n\nconst getUpdateUserHandler = () => userbaseUpdateUserHandler\n\nconst getEndpoint = () => {\n  return window._userbaseEndpoint || DEFAULT_ENDPOINT\n}\n\nconst configure = ({ appId, updateUserHandler, allowServerSideEncryption }) => {\n  if (userbaseAppId && userbaseAppId !== appId) throw new errors.AppIdAlreadySet(userbaseAppId)\n  userbaseAppId = appId\n  userbaseUpdateUserHandler = updateUserHandler\n  userbaseAllowServerSideEncryptionMode = allowServerSideEncryption\n}\n\nconst getStripePublishableKey = (isProduction) => {\n  return isProduction\n    ? (window._USERBASE_STRIPE_PRODUCTION_PUBLISHABLE_KEY || STRIPE_PRODUCTION_PUBLISHABLE_KEY)\n    : (window._USERBASE_STRIPE_TEST_PUBLISHABLE_KEY || STRIPE_TEST_PUBLISHABLE_KEY)\n}\n\nconst isServerSideEncryptionModeAllowed = () => userbaseAllowServerSideEncryptionMode\n\nexport default {\n  USERBASE_JS_VERSION,\n  getAppId,\n  getUpdateUserHandler,\n  getEndpoint,\n  configure,\n  getStripePublishableKey,\n  isServerSideEncryptionModeAllowed,\n}\n","import errors from '../errors'\n\nconst TEN_SECONDS_MS = 10 * 1000\n\nclass RequestError extends Error {\n  constructor(data, status, statusText, ...params) {\n    super(data, status, statusText, ...params)\n\n    this.response = {\n      data,\n      status,\n      statusText,\n    }\n\n    this.message = 'Request failed with status code ' + status\n  }\n}\n\nclass TimeoutError extends Error {\n  constructor(timeout, ...params) {\n    super(timeout, ...params)\n\n    this.message = `timeout of ${timeout}ms exceeded`\n  }\n}\n\nconst handleResponse = (xhr, resolve, reject) => {\n  let response\n  try {\n    response = JSON.parse(xhr.response)\n  } catch {\n    response = xhr.response\n  }\n\n  if (xhr.status >= 200 && xhr.status < 300) {\n    resolve(response)\n  } else {\n    reject(new RequestError(response, xhr.status, xhr.statusText))\n  }\n}\n\nexport const processXhr = (xhr, resolve, reject, timeout = TEN_SECONDS_MS) => {\n  xhr.timeout = timeout\n  xhr.onload = () => handleResponse(xhr, resolve, reject)\n  xhr.onerror = () => reject(new errors.ServiceUnavailable)\n  xhr.ontimeout = () => reject(new TimeoutError(timeout))\n}\n","import config from '../config'\nimport { processXhr } from './utils'\n\nconst signUp = (username, passwordToken, ecKeyData, passwordSalts, keySalts, email, profile, passwordBasedBackup, sessionLength) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'POST'\n    const url = `${config.getEndpoint()}/api/auth/sign-up?appId=${config.getAppId()}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n    const data = JSON.stringify({\n      username,\n      passwordToken,\n      ecKeyData,\n      passwordSalts,\n      keySalts,\n      email,\n      profile,\n      passwordBasedBackup,\n      sessionLength,\n    })\n\n    xhr.open(method, url)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.send(data)\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst getPasswordSalts = (username) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'GET'\n    const url = `${config.getEndpoint()}/api/auth/get-password-salts?appId=${config.getAppId()}&username=${encodeURIComponent(username)}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n\n    xhr.open(method, url)\n    xhr.send()\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst signIn = async (username, passwordToken, sessionLength) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'POST'\n    const url = `${config.getEndpoint()}/api/auth/sign-in?appId=${config.getAppId()}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n    const data = JSON.stringify({\n      username,\n      passwordToken,\n      sessionLength,\n    })\n\n    xhr.open(method, url)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.send(data)\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst signInWithSession = (sessionId, sessionLength) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'POST'\n    const url = `${config.getEndpoint()}/api/auth/sign-in-with-session?appId=${config.getAppId()}&sessionId=${sessionId}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n    const data = JSON.stringify({\n      sessionLength,\n    })\n\n    xhr.open(method, url)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.send(data)\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst getServerPublicKey = async () => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'GET'\n    const url = `${config.getEndpoint()}/api/auth/server-public-key?&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n    const responseType = 'arraybuffer'\n\n    xhr.open(method, url)\n    xhr.responseType = responseType\n    xhr.send()\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst getPublicKey = (username) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'GET'\n    const url = `${config.getEndpoint()}/api/public-key?appId=${config.getAppId()}&username=${encodeURIComponent(username)}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n\n    xhr.open(method, url)\n    xhr.send()\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nconst uploadBundleChunk = async (chunk, token) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'POST'\n    const url = `${config.getEndpoint()}/api/bundle-chunk?userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n\n    xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n\n    xhr.open(method, url)\n    xhr.send(chunk)\n\n    processXhr(xhr, resolve, reject)\n  })\n}\n\nexport default {\n  signUp,\n  getPasswordSalts,\n  signIn,\n  signInWithSession,\n  getServerPublicKey,\n  getPublicKey,\n  uploadBundleChunk,\n}\n","const tryCatchWrapper = (func) => (...args) => {\n  try {\n    return func(...args)\n  } catch (e) {\n    // ok to swallow error\n    //\n    // local/sessionStorage are non-critical benefits. If they happen to be available,\n    // they're helpful, but if not, the SDK functions totally fine.\n    //\n    // If a function fails, behavior is functionally the same as if rememberMe is 'none'.\n    console.warn('Error accessing browser storage. Defaulting to memory.\\n\\n', e)\n  }\n}\n\nconst _getSeedName = (appId, username) => `userbaseSeed.${appId}.${username}`\n\nconst setCurrentSession = tryCatchWrapper((rememberMe, username, signedIn, sessionId, creationDate, expirationDate) => {\n  const session = { username, signedIn, sessionId, creationDate, expirationDate }\n  const sessionString = JSON.stringify(session)\n\n  if (rememberMe === 'local') {\n    localStorage.setItem('userbaseCurrentSession', sessionString)\n  } else if (rememberMe === 'session') {\n    sessionStorage.setItem('userbaseCurrentSession', sessionString)\n  }\n})\n\nconst getCurrentSession = tryCatchWrapper(() => {\n  const sessionStorageCurrentSessionString = sessionStorage.getItem('userbaseCurrentSession')\n\n  if (sessionStorageCurrentSessionString) {\n    const currentSession = JSON.parse(sessionStorageCurrentSessionString)\n\n    if (!currentSession.signedIn) {\n      const localCurrentSessionString = localStorage.getItem('userbaseCurrentSession')\n\n      if (localCurrentSessionString) {\n        const localCurrentSession = JSON.parse(localCurrentSessionString)\n\n        // allows session from localStorage to override sessionStorage if signed in\n        // to localStorage session and not signed in to sessionStorage session\n        if (localCurrentSession.signedIn) {\n          return {\n            ...localCurrentSession,\n            rememberMe: 'local'\n          }\n        }\n      }\n    }\n\n    return {\n      ...JSON.parse(sessionStorageCurrentSessionString),\n      rememberMe: 'session'\n    }\n  }\n\n  const localSessionString = localStorage.getItem('userbaseCurrentSession')\n  return localSessionString && {\n    ...JSON.parse(localSessionString),\n    rememberMe: 'local'\n  }\n})\n\nconst saveSeedString = tryCatchWrapper((rememberMe, appId, username, seedString) => {\n  if (rememberMe === 'local') {\n    localStorage.setItem(_getSeedName(appId, username), seedString)\n  } else if (rememberMe === 'session') {\n    sessionStorage.setItem(_getSeedName(appId, username), seedString)\n  }\n})\n\nconst removeSeedString = tryCatchWrapper((appId, username) => {\n  const seedName = _getSeedName(appId, username)\n  sessionStorage.removeItem(seedName)\n  localStorage.removeItem(seedName)\n})\n\nconst getSeedString = tryCatchWrapper((appId, username) => {\n  const seedName = _getSeedName(appId, username)\n  return sessionStorage.getItem(seedName) || localStorage.getItem(seedName)\n})\n\nconst signInSession = (rememberMe, username, sessionId, creationDate, expirationDate) => {\n  const signedIn = true\n  setCurrentSession(rememberMe, username, signedIn, sessionId, creationDate, expirationDate)\n}\n\nconst signOutSession = (rememberMe, username) => {\n  const signedIn = false\n  setCurrentSession(rememberMe, username, signedIn)\n}\n\nconst removeCurrentSession = tryCatchWrapper(() => {\n  sessionStorage.removeItem('userbaseCurrentSession')\n  localStorage.removeItem('userbaseCurrentSession')\n})\n\nexport default {\n  signInSession,\n  signOutSession,\n  getCurrentSession,\n  saveSeedString,\n  removeSeedString,\n  getSeedString,\n  removeCurrentSession,\n}\n","const ONE_KB = 1024\nconst TEN_KB = 10 * ONE_KB\n\n// https://stackoverflow.com/a/20604561/11601853\nexport const arrayBufferToString = (buf, minified) => {\n  const bufView = minified ? new Uint8Array(buf) : new Uint16Array(buf)\n  const length = bufView.length\n  let result = ''\n  let chunkSize = TEN_KB // using chunks prevents stack from blowing up\n\n  for (var i = 0; i < length; i += chunkSize) {\n    if (i + chunkSize > length) {\n      chunkSize = length - i\n    }\n    const chunk = bufView.subarray(i, i + chunkSize)\n    result += String.fromCharCode.apply(null, chunk)\n  }\n\n  return result\n}\n\n// https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\nexport const stringToArrayBuffer = (str, minified = false) => {\n  let buf = new ArrayBuffer(str.length * (minified ? 1 : 2)) // 2 bytes for each char, unless using minified. minified only safe for known input\n  let bufView = minified ? new Uint8Array(buf) : new Uint16Array(buf)\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i)\n  }\n  return buf\n}\n\n/**\n* Creates a new Uint8Array based on two different ArrayBuffers\n*\n* Source: https://gist.github.com/72lions/4528834\n*\n* @param {ArrayBuffers} buffer1 The first buffer.\n* @param {ArrayBuffers} buffer2 The second buffer.\n* @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n*\n*/\nexport const appendBuffer = (buffer1, buffer2) => {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength)\n  tmp.set(new Uint8Array(buffer1), 0)\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength)\n  return tmp.buffer\n}\n\nexport const appendBuffers = (buffers) => {\n  const bufferByteLengths = buffers.map(buffer => buffer.byteLength)\n  const totalByteLength = bufferByteLengths.reduce((byteLengthSum, bufferByteLength) => byteLengthSum + bufferByteLength)\n\n  const tmp = new Uint8Array(totalByteLength)\n  let currentByteLength = 0\n  for (let i = 0; i < buffers.length; i++) {\n    tmp.set(new Uint8Array(buffers[i]), currentByteLength)\n    currentByteLength += bufferByteLengths[i]\n  }\n\n  return {\n    buffer: tmp.buffer,\n    byteLengths: bufferByteLengths\n  }\n}\n\nexport const hexStringToArrayBuffer = (hexString) => {\n  if (hexString.length % 2 !== 0) throw new Error('Hex string must be even length')\n  const halfHexStringLen = hexString.length / 2\n  const array = []\n  for (let i = 0; i < halfHexStringLen; i++) {\n    const byteStartIndex = i * 2\n    const byte = hexString.substring(byteStartIndex, byteStartIndex + 2)\n    const byteAsInt = parseInt(byte, 16)\n    array.push(byteAsInt)\n  }\n  return new Uint8Array(array)\n}\n","import base64 from 'base64-arraybuffer'\nimport { stringToArrayBuffer } from './utils'\n\nconst BYTE_SIZE = 32 // 256 / 8\nconst HASH_ALGORITHM_NAME = 'SHA-256'\n\n/**\n *\n * @param {ArrayBuffer} data\n */\nconst hash = async (data) => {\n  const result = await window.crypto.subtle.digest(\n    {\n      name: HASH_ALGORITHM_NAME,\n    },\n    data\n  )\n  return result\n}\n\nconst hashBase64String = async (dataString) => {\n  const data = base64.decode(dataString)\n  const result = await hash(data)\n  return base64.encode(result)\n}\n\nconst hashString = async (dataString) => {\n  const data = stringToArrayBuffer(dataString)\n  const result = await hash(data)\n  return base64.encode(result)\n}\n\nexport default {\n  BYTE_SIZE,\n  HASH_ALGORITHM_NAME,\n  hash,\n  hashBase64String,\n  hashString\n}\n","import base64 from 'base64-arraybuffer'\nimport sha256 from './sha-256'\nimport { stringToArrayBuffer } from './utils'\n\nconst HKDF_ALGORITHM_NAME = 'HKDF'\nconst RAW_KEY_TYPE = 'raw'\nconst KEY_IS_NOT_EXTRACTABLE = false\nconst KEY_WILL_BE_USED_TO = ['deriveKey', 'deriveBits']\n\nconst importHkdfKeyFromString = async (seedString) => {\n  const seed = stringToArrayBuffer(seedString)\n  const hkdfKey = await importHkdfKey(seed)\n  return hkdfKey\n}\n\nconst importHkdfKey = async (seed) => {\n  const hkdfKey = await window.crypto.subtle.importKey(\n    RAW_KEY_TYPE,\n    seed,\n    {\n      name: HKDF_ALGORITHM_NAME\n    },\n    KEY_IS_NOT_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return hkdfKey\n}\n\n/**\n *  RFC 5869:\n *\n *  \"the use of salt adds significantly to the strength of HKDF...\n *  Ideally, the salt value is a random (or pseudorandom) string of the\n *  length HashLen\"\n *\n *  https://tools.ietf.org/html/rfc5869#section-3.1\n *\n **/\nconst SALT_BYTE_SIZE = sha256.BYTE_SIZE\nconst generateSalt = () => window.crypto.getRandomValues(new Uint8Array(SALT_BYTE_SIZE))\n\nconst getParams = (keyName, salt) => ({\n  name: HKDF_ALGORITHM_NAME,\n  info: stringToArrayBuffer(keyName),\n  hash: sha256.HASH_ALGORITHM_NAME,\n  salt\n})\n\nconst PASSWORD_TOKEN_NAME = 'password-token'\nconst PASSWORD_TOKEN_NUM_BITS = 256\n\nconst getPasswordToken = async (hkdfKey, salt) => {\n  const passwordTokenBits = await window.crypto.subtle.deriveBits(\n    getParams(PASSWORD_TOKEN_NAME, salt),\n    hkdfKey,\n    PASSWORD_TOKEN_NUM_BITS\n  )\n\n  return base64.encode(passwordTokenBits)\n}\n\nexport default {\n  importHkdfKeyFromString,\n  importHkdfKey,\n  generateSalt,\n  getParams,\n  getPasswordToken\n}\n","import base64 from 'base64-arraybuffer'\nimport hkdf from './hkdf'\nimport { arrayBufferToString, stringToArrayBuffer, appendBuffer } from './utils'\n\nconst ENCRYPTION_ALGORITHM_NAME = 'AES-GCM'\nconst BIT_SIZE = 256\nconst KEY_IS_EXTRACTABLE = true\nconst KEY_WILL_BE_USED_TO = ['encrypt', 'decrypt']\nconst RAW_KEY_TYPE = 'raw'\n\nconst ENCRYPTION_KEY_NAME = 'encryption'\n\nconst PASSWORD_BASED_ENCRYPTION_KEY = 'password-based-encryption'\n\n/**\n * NIST recommendation:\n *\n * \"For  IVs,  it  is  recommended  that  implementations  restrict  support  to\n * the  length  of  96  bits,  to  promote interoperability, efficiency, and\n * simplicity of design.\"\n *\n * Pg. 8\n * https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\n *\n **/\nconst RECOMMENDED_IV_BYTE_SIZE = 12 // 96 / 8\n\n/**\n * Source on tag length:\n * https://crypto.stackexchange.com/questions/26783/ciphertext-and-tag-size-and-iv-transmission-with-aes-in-gcm-mode/26787\n */\nconst RECOMMENDED_AUTHENTICATION_TAG_LENGTH = 128\n\nconst windowOrSelfObject = () => {\n  return typeof window !== 'undefined'\n    ? window\n    : self\n}\n\nconst getEncryptionKeyParams = () => ({\n  name: ENCRYPTION_ALGORITHM_NAME,\n  length: BIT_SIZE\n})\n\nconst getCiphertextParams = (iv) => ({\n  name: ENCRYPTION_ALGORITHM_NAME,\n  tagLength: RECOMMENDED_AUTHENTICATION_TAG_LENGTH,\n  iv\n})\n\nconst generateIv = () => window.crypto.getRandomValues(new Uint8Array(RECOMMENDED_IV_BYTE_SIZE))\n\nconst sliceEncryptedArrayBuffer = (encryptedArrayBuffer) => {\n  const ivStartIndex = encryptedArrayBuffer.byteLength - RECOMMENDED_IV_BYTE_SIZE\n  const ciphertextArrayBuffer = encryptedArrayBuffer.slice(0, ivStartIndex)\n  const iv = encryptedArrayBuffer.slice(ivStartIndex)\n\n  return { ciphertextArrayBuffer, iv }\n}\n\nconst importKeyFromMaster = async (masterKey, salt, encryptionKeyName = ENCRYPTION_KEY_NAME) => {\n  const encryptionKey = await window.crypto.subtle.deriveKey(\n    hkdf.getParams(encryptionKeyName, salt),\n    masterKey,\n    getEncryptionKeyParams(),\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return encryptionKey\n}\n\nconst generateKey = async () => {\n  const key = await window.crypto.subtle.generateKey(\n    getEncryptionKeyParams(),\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return key\n}\n\nconst getKeyStringFromKey = async (key) => {\n  const rawKey = await window.crypto.subtle.exportKey(RAW_KEY_TYPE, key)\n  const keyString = base64.encode(rawKey)\n  return keyString\n}\n\nconst getKeyFromKeyString = async (keyString) => {\n  const rawKey = base64.decode(keyString)\n  const key = await getKeyFromRawKey(rawKey)\n  return key\n}\n\nconst getKeyFromRawKey = async (rawKey) => {\n  const key = await windowOrSelfObject().crypto.subtle.importKey(\n    RAW_KEY_TYPE,\n    rawKey,\n    {\n      name: ENCRYPTION_ALGORITHM_NAME\n    },\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return key\n}\n\nconst getRawKeyFromKey = async (key) => {\n  const rawKey = await windowOrSelfObject().crypto.subtle.exportKey(RAW_KEY_TYPE, key)\n  return rawKey\n}\n\n/**\n *\n * @param {CryptoKey} key\n * @param {ArrayBuffer} plaintext\n * @returns {ArrayBuffer} encrypted Array Buffer\n *\n *     encrypted is a concatentation of Array Buffers [ciphertext, auth tag, IV]\n *\n *     The Authentication Tag is a hash of the plaintext to ensure the same data that\n *     is ecncrypted is the resulting data when decrypted. Note that the browser crypto\n *     library's result is the concatenation of Array Buffers [ciphertext, auth tag]\n *\n *     The IV is a random intialization vector that prevents an attacker\n *     from determining a user's key. It can be exposed alongside the ciphertext safely.\n *\n */\nconst encrypt = async (key, plaintext) => {\n  const iv = generateIv()\n\n  // this result is the concatenation of Array Buffers [ciphertext, auth tag]\n  const ciphertextArrayBuffer = await windowOrSelfObject().crypto.subtle.encrypt(\n    getCiphertextParams(iv),\n    key,\n    plaintext\n  )\n\n  return appendBuffer(ciphertextArrayBuffer, iv)\n}\n\nconst encryptJson = async (key, plaintextJson) => {\n  const plaintextString = JSON.stringify(plaintextJson)\n  const encrypted = await encryptString(key, plaintextString)\n  return encrypted\n}\n\nconst encryptString = async (key, plaintextString) => {\n  const plaintextArrayBuffer = stringToArrayBuffer(plaintextString)\n  const encrypted = await encrypt(key, plaintextArrayBuffer)\n  return base64.encode(encrypted)\n}\n\n/**\n *\n * @param {CryptoKey} key\n * @param {ArrayBuffer} encrypted - the encrypted Array Buffer\n * @returns {object} plaintext\n */\nconst decrypt = async (key, encrypted) => {\n  const { ciphertextArrayBuffer, iv } = sliceEncryptedArrayBuffer(encrypted)\n\n  const plaintextArrayBuffer = await windowOrSelfObject().crypto.subtle.decrypt(\n    getCiphertextParams(iv),\n    key,\n    ciphertextArrayBuffer\n  )\n  return plaintextArrayBuffer\n}\n\nconst decryptJson = async (key, encryptedJsonString) => {\n  const plaintextString = await decryptString(key, encryptedJsonString)\n  return JSON.parse(plaintextString)\n}\n\nconst decryptString = async (key, encryptedString) => {\n  const encryptedArrayBuffer = base64.decode(encryptedString)\n  const plaintextArrayBuffer = await decrypt(key, encryptedArrayBuffer)\n  const plaintextString = arrayBufferToString(plaintextArrayBuffer)\n  return plaintextString\n}\n\nconst getPasswordBasedEncryptionKey = async (hkdfKey, salt) => {\n  const encryptionKey = await window.crypto.subtle.deriveKey(\n    hkdf.getParams(PASSWORD_BASED_ENCRYPTION_KEY, salt),\n    hkdfKey,\n    getEncryptionKeyParams(),\n    !KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return encryptionKey\n}\n\nconst generateAndEncryptKeyEncryptionKey = async (key) => {\n  const keyEncryptionKey = await generateKey()\n  const keyEncryptionKeyRaw = await getRawKeyFromKey(keyEncryptionKey)\n  const encryptedKeyEncryptionKey = await encrypt(key, keyEncryptionKeyRaw)\n  return [keyEncryptionKey, encryptedKeyEncryptionKey]\n}\n\nexport default {\n  getEncryptionKeyParams,\n  getCiphertextParams,\n  generateIv,\n  sliceEncryptedArrayBuffer,\n  importKeyFromMaster,\n  generateKey,\n  getKeyStringFromKey,\n  getKeyFromKeyString,\n  getRawKeyFromKey,\n  getKeyFromRawKey,\n  encrypt,\n  encryptJson,\n  encryptString,\n  decrypt,\n  decryptJson,\n  decryptString,\n  getPasswordBasedEncryptionKey,\n  generateAndEncryptKeyEncryptionKey,\n  RAW_KEY_TYPE,\n  KEY_WILL_BE_USED_TO,\n}\n","import DH from 'diffie-hellman'\nimport aesGcm from './aes-gcm'\nimport hkdf from './hkdf'\nimport sha256 from './sha-256'\nimport { hexStringToArrayBuffer } from './utils'\nimport authApi from '../api/auth'\n\nconst KEY_IS_EXTRACTABLE = true\nconst KEY_WILL_BE_USED_TO = ['encrypt'] // unused\nconst DIFFIE_HELLMAN_KEY_NAME = 'diffie-hellman'\n\n// RFC 3526 detailing publicly known 2048 bit safe prime: https://www.ietf.org/rfc/rfc3526.txt\nconst PRIME = hexStringToArrayBuffer('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff')\nconst GENERATOR = [2]\n\n// get public key from the server to allow developers to easily swap out default server with their own\n// server running userbase-server\nlet serverPublicKey = null\nconst getServerPublicKey = async () => {\n  if (serverPublicKey) {\n    return serverPublicKey\n  } else {\n    serverPublicKey = await authApi.getServerPublicKey() // eslint-disable-line require-atomic-updates\n    return serverPublicKey\n  }\n}\n\nconst setPrivateKeyAndGenerateKeys = (diffieHellman, privateKey) => {\n  diffieHellman.setPrivateKey(privateKey)\n  diffieHellman.generateKeys()\n  return diffieHellman\n}\n\nconst createDiffieHellman = (privateKey) => {\n  const diffieHellman = DH.createDiffieHellman(PRIME, GENERATOR)\n  return setPrivateKeyAndGenerateKeys(diffieHellman, privateKey)\n}\n\nconst getSharedKey = async (privateKey, otherPublicKey) => {\n  const diffieHellman = createDiffieHellman(privateKey)\n  const sharedSecret = diffieHellman.computeSecret(otherPublicKey)\n\n  const sharedRawKey = await sha256.hash(sharedSecret)\n  const sharedKey = await aesGcm.getKeyFromRawKey(sharedRawKey)\n  return sharedKey\n}\n\nconst getPublicKey = (privateKey) => {\n  const diffieHellman = createDiffieHellman(privateKey)\n  return diffieHellman.getPublicKey()\n}\n\nconst getSharedKeyWithServer = async (privateKey) => {\n  const sharedKey = await getSharedKey(privateKey, new Uint8Array(await getServerPublicKey()))\n  return sharedKey\n}\n\nconst importKeyFromMaster = async (masterKey, salt) => {\n  const privateKey = await window.crypto.subtle.deriveKey(\n    hkdf.getParams(DIFFIE_HELLMAN_KEY_NAME, salt),\n    masterKey,\n    aesGcm.getEncryptionKeyParams(), // DH not supported, using raw AES key as secret instead\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n\n  const rawPrivateKey = await aesGcm.getRawKeyFromKey(privateKey)\n  return rawPrivateKey\n}\n\nexport default {\n  getPublicKey,\n  getSharedKey,\n  getSharedKeyWithServer,\n  importKeyFromMaster,\n}\n","import base64 from 'base64-arraybuffer'\nimport sha256 from './sha-256'\nimport hkdf from './hkdf'\nimport aesGcm from './aes-gcm'\nimport { stringToArrayBuffer, arrayBufferToString } from './utils'\n\nconst ECDSA_ALGORITHM_NAME = 'ECDSA'\nconst KEY_IS_EXTRACTABLE = true\nconst KEY_PAIR_WILL_BE_USED_TO = ['sign', 'verify']\nconst PRIVATE_KEY_WILL_BE_USED_TO = ['sign']\nconst PRIVATE_KEY_TYPE = 'jwk' // pkcs8 not supported in firefox, must use jwk\nconst PUBLIC_KEY_WILL_BE_USED_TO = ['verify']\nconst PUBLIC_KEY_TYPE = 'spki'\n\nconst ECDSA_KEY_ENCRYPTION_KEY = 'ecdsa-key-encryption-key'\n\n/**\n * NIST recommendation:\n *\n * 128-bit security provided with 256-bit key size\n *\n * Pg. 55\n * https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf\n *\n **/\nconst NAMED_CURVE = 'P-256'\n\nconst ECDSA_PARAMS = {\n  name: ECDSA_ALGORITHM_NAME,\n  namedCurve: NAMED_CURVE\n}\n\nconst ECDSA_SIGNING_PARAMS = {\n  name: ECDSA_ALGORITHM_NAME,\n  hash: { name: sha256.HASH_ALGORITHM_NAME }\n}\n\nconst generateKeyPair = async () => {\n  const keyPair = await window.crypto.subtle.generateKey(\n    ECDSA_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    KEY_PAIR_WILL_BE_USED_TO\n  )\n  return keyPair\n}\n\nconst getRawPrivateKeyFromPrivateKey = async (privateKey) => {\n  const jwkPrivateKey = await window.crypto.subtle.exportKey(PRIVATE_KEY_TYPE, privateKey)\n  const rawPrivateKey = stringToArrayBuffer(JSON.stringify(jwkPrivateKey))\n  return rawPrivateKey\n}\n\nconst getPrivateKeyFromRawPrivateKey = async (rawPrivateKey) => {\n  const jwkPrivateKey = JSON.parse(arrayBufferToString(rawPrivateKey))\n  const privateKey = await window.crypto.subtle.importKey(\n    PRIVATE_KEY_TYPE,\n    jwkPrivateKey,\n    ECDSA_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    PRIVATE_KEY_WILL_BE_USED_TO,\n  )\n\n  return privateKey\n}\n\nconst getPublicKeyFromRawPublicKey = async (rawPublicKey) => {\n  const publicKey = await window.crypto.subtle.importKey(\n    PUBLIC_KEY_TYPE,\n    rawPublicKey,\n    ECDSA_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    PUBLIC_KEY_WILL_BE_USED_TO\n  )\n  return publicKey\n}\n\nconst getRawPublicKeyFromPublicKey = async (publicKey) => {\n  const rawPublicKey = await window.crypto.subtle.exportKey(PUBLIC_KEY_TYPE, publicKey)\n  return rawPublicKey\n}\n\nconst getPublicKeyStringFromPublicKey = async (publicKey) => {\n  const rawPublicKey = await getRawPublicKeyFromPublicKey(publicKey)\n  const publicKeyString = base64.encode(rawPublicKey)\n  return publicKeyString\n}\n\nconst getPublicKeyFromPrivateKey = async (privateKey) => {\n  const jwkPrivateKey = await window.crypto.subtle.exportKey('jwk', privateKey)\n\n  // delete private key data\n  delete jwkPrivateKey.d\n\n  // set public key key_ops to enable import as public key\n  jwkPrivateKey.key_ops = PUBLIC_KEY_WILL_BE_USED_TO\n\n  const publicKey = await window.crypto.subtle.importKey(\n    'jwk',\n    jwkPrivateKey, // technically this now has same values as the public key would\n    ECDSA_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    PUBLIC_KEY_WILL_BE_USED_TO\n  )\n\n  return publicKey\n}\n\nconst importEcdsaKeyEncryptionKeyFromMaster = async (masterKey, salt) => {\n  const keyEncryptionKey = await aesGcm.importKeyFromMaster(masterKey, salt, ECDSA_KEY_ENCRYPTION_KEY)\n  return keyEncryptionKey\n}\n\nconst generateEcdsaKeyData = async (masterKey) => {\n  // need to generate new key pair because cannot derive ECDSA key pair using HKDF in WebCrypto\n  const ecdsaKeyPair = await generateKeyPair()\n\n  // derive a key encryption key using HKDF to encrypt the ECDSA private key and store it on server\n  const ecdsaKeyEncryptionKeySalt = hkdf.generateSalt()\n  const ecdsaKeyEncryptionKey = await importEcdsaKeyEncryptionKeyFromMaster(masterKey, ecdsaKeyEncryptionKeySalt)\n  const ecdsaRawPrivateKey = await getRawPrivateKeyFromPrivateKey(ecdsaKeyPair.privateKey)\n  const encryptedEcdsaPrivateKey = await aesGcm.encrypt(ecdsaKeyEncryptionKey, ecdsaRawPrivateKey)\n\n  return {\n    ecdsaPrivateKey: ecdsaKeyPair.privateKey,\n    ecdsaPublicKey: await getPublicKeyStringFromPublicKey(ecdsaKeyPair.publicKey),\n    encryptedEcdsaPrivateKey: base64.encode(encryptedEcdsaPrivateKey),\n    ecdsaKeyEncryptionKeySalt: base64.encode(ecdsaKeyEncryptionKeySalt),\n  }\n}\n\nconst sign = async (privateKey, data) => {\n  const signature = await window.crypto.subtle.sign(\n    ECDSA_SIGNING_PARAMS,\n    privateKey,\n    data\n  )\n  return signature\n}\n\nconst signString = async (privateKey, dataString) => {\n  const data = stringToArrayBuffer(dataString)\n  const signature = await sign(privateKey, data)\n  const signatureString = base64.encode(signature)\n  return signatureString\n}\n\nconst verify = async (publicKey, signature, data) => {\n  const isVerified = await window.crypto.subtle.verify(\n    ECDSA_SIGNING_PARAMS,\n    publicKey,\n    signature,\n    data\n  )\n  return isVerified\n}\n\nconst verifyString = async (publicKey, signatureString, dataString) => {\n  const data = stringToArrayBuffer(dataString)\n  const signature = base64.decode(signatureString)\n  const isVerified = await verify(publicKey, signature, data)\n  return isVerified\n}\n\nexport default {\n  generateEcdsaKeyData,\n  importEcdsaKeyEncryptionKeyFromMaster,\n  getPrivateKeyFromRawPrivateKey,\n  getPublicKeyFromRawPublicKey,\n  getRawPublicKeyFromPublicKey,\n  getPublicKeyStringFromPublicKey,\n  getPublicKeyFromPrivateKey,\n  sign,\n  signString,\n  verify,\n  verifyString,\n}\n","import base64 from 'base64-arraybuffer'\nimport hkdf from './hkdf'\nimport aesGcm from './aes-gcm'\nimport ecdsa from './ecdsa'\nimport { stringToArrayBuffer, arrayBufferToString } from './utils'\n\nconst ECDH_ALGORITHM_NAME = 'ECDH'\nconst KEY_IS_EXTRACTABLE = true\nconst KEY_WILL_BE_USED_TO = ['deriveKey', 'deriveBits']\nconst PRIVATE_KEY_TYPE = 'jwk' // pkcs8 not supported in firefox, must use jwk\nconst PUBLIC_KEY_TYPE = 'spki'\n\nconst ECDH_KEY_ENCRYPTION_KEY = 'ecdh-key-encryption-key'\n\n/**\n * NIST recommendation:\n *\n * 128-bit security provided with 256-bit key size\n *\n * Pg. 55\n * https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf\n *\n **/\nconst NAMED_CURVE = 'P-256'\n\nconst ECDH_PARAMS = {\n  name: ECDH_ALGORITHM_NAME,\n  namedCurve: NAMED_CURVE\n}\n\nconst generateKeyPair = async () => {\n  const keyPair = await window.crypto.subtle.generateKey(\n    ECDH_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO\n  )\n  return keyPair\n}\n\nconst getRawPrivateKeyFromPrivateKey = async (privateKey) => {\n  const jwkPrivateKey = await window.crypto.subtle.exportKey(PRIVATE_KEY_TYPE, privateKey)\n  const rawPrivateKey = stringToArrayBuffer(JSON.stringify(jwkPrivateKey))\n  return rawPrivateKey\n}\n\nconst getPrivateKeyFromRawPrivateKey = async (rawPrivateKey) => {\n  const jwkPrivateKey = JSON.parse(arrayBufferToString(rawPrivateKey))\n  const privateKey = await window.crypto.subtle.importKey(\n    PRIVATE_KEY_TYPE,\n    jwkPrivateKey,\n    ECDH_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO,\n  )\n\n  return privateKey\n}\n\nconst getRawPublicKeyFromPublicKey = async (publicKey) => {\n  const rawPublicKey = await window.crypto.subtle.exportKey(PUBLIC_KEY_TYPE, publicKey)\n  return rawPublicKey\n}\n\nconst getPublicKeyFromRawPublicKey = async (rawPublicKey) => {\n  const publicKey = await window.crypto.subtle.importKey(\n    PUBLIC_KEY_TYPE,\n    rawPublicKey,\n    ECDH_PARAMS,\n    KEY_IS_EXTRACTABLE,\n    [], // empty list ok\n  )\n\n  return publicKey\n}\n\nconst importEcdhKeyEncryptionKeyFromMaster = async (masterKey, salt) => {\n  const keyEncryptionKey = await aesGcm.importKeyFromMaster(masterKey, salt, ECDH_KEY_ENCRYPTION_KEY)\n  return keyEncryptionKey\n}\n\nconst generateEcdhKeyData = async (masterKey, ecdsaPrivateKey) => {\n  // need to generate new key pair because cannot derive ECDH key pair using HKDF in WebCrypto\n  const ecdhKeyPair = await generateKeyPair()\n\n  // derive a key encryption key using HKDF to encrypt the ECDH private key and store it on server\n  const ecdhKeyEncryptionKeySalt = hkdf.generateSalt()\n  const ecdhKeyEncryptionKey = await importEcdhKeyEncryptionKeyFromMaster(masterKey, ecdhKeyEncryptionKeySalt)\n  const ecdhRawPrivateKey = await getRawPrivateKeyFromPrivateKey(ecdhKeyPair.privateKey)\n  const encryptedEcdhPrivateKey = await aesGcm.encrypt(ecdhKeyEncryptionKey, ecdhRawPrivateKey)\n\n  const ecdhPublicKey = await getRawPublicKeyFromPublicKey(ecdhKeyPair.publicKey)\n  const signedEcdhPublicKey = await ecdsa.sign(ecdsaPrivateKey, ecdhPublicKey)\n\n  return {\n    ecdhPrivateKey: ecdhKeyPair.privateKey,\n    ecdhPublicKey: base64.encode(ecdhPublicKey),\n    encryptedEcdhPrivateKey: base64.encode(encryptedEcdhPrivateKey),\n    signedEcdhPublicKey: base64.encode(signedEcdhPublicKey),\n    ecdhKeyEncryptionKeySalt: base64.encode(ecdhKeyEncryptionKeySalt),\n  }\n}\n\nconst computeSharedKeyEncryptionKey = async (otherEcdhPublicKey, ecdhPrivateKey) => {\n  const sharedKeyEncryptionKey = await window.crypto.subtle.deriveKey(\n    {\n      name: ECDH_ALGORITHM_NAME,\n      namedCurve: NAMED_CURVE,\n      public: otherEcdhPublicKey\n    },\n    ecdhPrivateKey,\n    aesGcm.getEncryptionKeyParams(),\n    !KEY_IS_EXTRACTABLE,\n    aesGcm.KEY_WILL_BE_USED_TO\n  )\n\n  return sharedKeyEncryptionKey\n}\n\nexport default {\n  generateKeyPair,\n  generateEcdhKeyData,\n  importEcdhKeyEncryptionKeyFromMaster,\n  getPrivateKeyFromRawPrivateKey,\n  getRawPublicKeyFromPublicKey,\n  getPublicKeyFromRawPublicKey,\n  computeSharedKeyEncryptionKey,\n}\n","import base64 from 'base64-arraybuffer'\nimport hkdf from './hkdf'\nimport sha256 from './sha-256'\nimport { stringToArrayBuffer } from './utils'\n\nconst HMAC_KEY_NAME = 'authentication'\n\nconst ALGORITHM_NAME = 'HMAC'\nconst KEY_IS_EXTRACTABLE = false\nconst KEY_WILL_BE_USED_TO_SIGN = ['sign']\nconst KEY_WILL_BE_USED_TO_SIGN_AND_VERIFY = ['sign', 'verify']\n\nconst importKeyFromMaster = async (masterKey, salt) => {\n  const hmacKey = await window.crypto.subtle.deriveKey(\n    hkdf.getParams(HMAC_KEY_NAME, salt),\n    masterKey,\n    {\n      name: ALGORITHM_NAME,\n      hash: {\n        name: sha256.HASH_ALGORITHM_NAME\n      },\n      length: 512 // need to explicitly set length for WebCrypto node polyfill (see: https://github.com/PeculiarVentures/webcrypto-core/issues/31)\n    },\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO_SIGN\n  )\n  return hmacKey\n}\n\nconst importKeyFromRawBits = async (rawBits) => {\n  const hmacKey = await window.crypto.subtle.importKey(\n    'raw',\n    rawBits,\n    {\n      name: ALGORITHM_NAME,\n      hash: {\n        name: sha256.HASH_ALGORITHM_NAME\n      },\n      length: 256 // need to explicitly set length for WebCrypto node polyfill (see: https://github.com/PeculiarVentures/webcrypto-core/issues/31)\n    },\n    KEY_IS_EXTRACTABLE,\n    KEY_WILL_BE_USED_TO_SIGN_AND_VERIFY\n  )\n  return hmacKey\n}\n\n/**\n *\n * @param {CryptoKey} key\n * @param {String} data\n */\nconst sign = async (key, data) => {\n  const result = await window.crypto.subtle.sign(\n    {\n      name: ALGORITHM_NAME,\n    },\n    key,\n    data\n  )\n  return result\n}\n\n/**\n *\n * @param {CryptoKey} key\n * @param {String} data\n */\nconst signString = async (key, data) => {\n  const result = await sign(key, stringToArrayBuffer(data))\n  return base64.encode(result)\n}\n\nexport default {\n  importKeyFromMaster,\n  importKeyFromRawBits,\n  sign,\n  signString\n}\n","import scryptJs from 'scrypt-js'\nimport base64 from 'base64-arraybuffer'\nimport { stringToArrayBuffer } from './utils'\n\n/**\n *\n * From the Scrypt paper:\n *\n * \"100ms is a reasonable upper bound on the delay which should be\n * cryptographically imposed on interactive logins\"\n *\n * Pg. 13\n * https://www.tarsnap.com/scrypt/scrypt.pdf\n *\n * With an optimized Scrypt algorithm running on a 3.1 GHz Intel Core i5,\n * N = 32768 is the highest work factor that takes <100ms for the\n * algorithm to run. Thus, it's the latest recommended work factor.\n *\n * Source: https://blog.filippo.io/the-scrypt-parameters/\n *\n * However, we are not running an optimized version of the algorithm on a\n * single machine. Users are running a pure js version written for the browser.\n * Safari, for example, takes >6 seconds to run when N = 32768 on a 2.5 GHz\n * Intel Core i5. A higher end CPU can only shave around 1 second off that time.\n * Further, it takes over 1s to run in Firefox, and over 500ms to run in Chrome.\n * This is an unacceptably slow interactive login delay to impose on users.\n *\n * Thus, we are going with N = 16384 to ensure interactive logins\n * are closer to the reasonable delay the function will impose on users,\n * while still maintaining a high level of security.\n *\n **/\nconst N = 16384 // 16mb\nconst r = 8\nconst p = 1\nconst dkLen = 32\n\n/**\n * NIST recommendation:\n *\n * \"The length of the randomly-generated portion of the salt shall be at least 128 bits.\"\n *\n * Section 5.1\n * https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf\n *\n **/\nconst SALT_LENGTH = 16\nconst generateSalt = () => window.crypto.getRandomValues(new Uint8Array(SALT_LENGTH))\n\nconst hash = async (passwordString, salt, passwordHashAlgo = scryptJs.scrypt) => {\n  const passwordArrayBuffer = new Uint8Array(stringToArrayBuffer(passwordString))\n  const passwordHash = await passwordHashAlgo(passwordArrayBuffer, salt, N, r, p, dkLen)\n  return base64.encode(passwordHash)\n}\n\nexport default {\n  generateSalt,\n  hash,\n}\n","import aesGcm from './aes-gcm'\nimport diffieHellman from './diffie-hellman'\nimport ecdsa from './ecdsa'\nimport ecdh from './ecdh'\nimport sha256 from './sha-256'\nimport hmac from './hmac'\nimport hkdf from './hkdf'\nimport scrypt from './scrypt'\n\nconst SEED_BYTE_SIZE = 32 // 256 / 8\nconst generateSeed = () => window.crypto.getRandomValues(new Uint8Array(SEED_BYTE_SIZE))\n\nexport default {\n  generateSeed,\n  aesGcm,\n  diffieHellman,\n  ecdsa,\n  ecdh,\n  sha256,\n  hmac,\n  hkdf,\n  scrypt\n}\n","export const readArrayBufferAsString = (arrayBuffer) => {\n  return new Promise(resolve => {\n    let reader = new FileReader()\n    reader.onload = () => resolve(reader.result)\n    reader.readAsText(new Blob([arrayBuffer]))\n  })\n}\n\nconst removeProtocolFromEndpoint = (endpoint) => {\n  const http = 'http://'\n  const https = 'https://'\n\n  if (endpoint.substring(0, http.length) === http) {\n    return endpoint.substring(http.length)\n  } else if (endpoint.substring(0, https.length) === https) {\n    return endpoint.substring(https.length)\n  } else {\n    return endpoint\n  }\n}\n\nexport const getProtocolFromEndpoint = (endpoint) => {\n  return endpoint.split(':')[0]\n}\n\nexport const getWsUrl = (endpoint) => {\n  const host = removeProtocolFromEndpoint(endpoint)\n  const protocol = getProtocolFromEndpoint(endpoint)\n\n  return ((protocol === 'https') ?\n    'wss://' : 'ws://') + host\n}\n\nexport const byteSizeOfString = (string) => {\n  return string.length * 2\n}\n\nexport const objectHasOwnProperty = (object, property) => {\n  return Object.prototype.hasOwnProperty.call(object, property)\n}\n\n// source: http://code.iamkate.com/javascript/queues\nexport function Queue() {\n  let queue = []\n  let offset = 0\n\n  this.getLength = () => queue.length - offset\n\n  this.isEmpty = () => queue.length === 0\n\n  this.enqueue = (item) => {\n    queue.push(item)\n    return this.getLength()\n  }\n\n  this.dequeue = () => {\n    // get item from front of the queue\n    const item = queue[offset]\n\n    offset += 1\n\n    // garbage collect unused space in queue when it grows large\n    if (offset * 2 > queue.length) {\n      queue = queue.slice(offset)\n      offset = 0\n    }\n\n    return item\n  }\n\n  this.peek = () => queue[offset]\n}\n","// load the worker using inline JS so clients can avoid needing to load worker from a separate file\n// https://stackoverflow.com/a/19201292\nconst newWorker = () => {\n  const workerFunction = function () {\n    self.onmessage = function (e) {\n      const {\n        compress,\n        decompress,\n        data,\n      } = e.data\n\n      // copied from LZString, since can't load module from inside web worker without loading a separate file\n      // https://github.com/pieroxy/lz-string/blob/b2e0b270a9f3cf330b778b777385fcba384a1a02/libs/lz-string.min.js\n      const LZString = function () { function o(o, r) { if (!t[o]) { t[o] = {}; for (var n = 0; n < o.length; n++)t[o][o.charAt(n)] = n } return t[o][r] } var r = String.fromCharCode, n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\", t = {}, i = { compressToBase64: function (o) { if (null == o) return \"\"; var r = i._compress(o, 6, function (o) { return n.charAt(o) }); switch (r.length % 4) { default: case 0: return r; case 1: return r + \"===\"; case 2: return r + \"==\"; case 3: return r + \"=\" } }, decompressFromBase64: function (r) { return null == r ? \"\" : \"\" == r ? null : i._decompress(r.length, 32, function (e) { return o(n, r.charAt(e)) }) }, compressToUTF16: function (o) { return null == o ? \"\" : i._compress(o, 15, function (o) { return r(o + 32) }) + \" \" }, decompressFromUTF16: function (o) { return null == o ? \"\" : \"\" == o ? null : i._decompress(o.length, 16384, function (r) { return o.charCodeAt(r) - 32 }) }, compressToUint8Array: function (o) { for (var r = i.compress(o), n = new Uint8Array(2 * r.length), e = 0, t = r.length; t > e; e++) { var s = r.charCodeAt(e); n[2 * e] = s >>> 8, n[2 * e + 1] = s % 256 } return n }, decompressFromUint8Array: function (o) { if (null === o || void 0 === o) return i.decompress(o); for (var n = new Array(o.length / 2), e = 0, t = n.length; t > e; e++)n[e] = 256 * o[2 * e] + o[2 * e + 1]; var s = []; return n.forEach(function (o) { s.push(r(o)) }), i.decompress(s.join(\"\")) }, compressToEncodedURIComponent: function (o) { return null == o ? \"\" : i._compress(o, 6, function (o) { return e.charAt(o) }) }, decompressFromEncodedURIComponent: function (r) { return null == r ? \"\" : \"\" == r ? null : (r = r.replace(/ /g, \"+\"), i._decompress(r.length, 32, function (n) { return o(e, r.charAt(n)) })) }, compress: function (o) { return i._compress(o, 16, function (o) { return r(o) }) }, _compress: function (o, r, n) { if (null == o) return \"\"; var e, t, i, s = {}, p = {}, u = \"\", c = \"\", a = \"\", l = 2, f = 3, h = 2, d = [], m = 0, v = 0; for (i = 0; i < o.length; i += 1)if (u = o.charAt(i), Object.prototype.hasOwnProperty.call(s, u) || (s[u] = f++, p[u] = !0), c = a + u, Object.prototype.hasOwnProperty.call(s, c)) a = c; else { if (Object.prototype.hasOwnProperty.call(p, a)) { if (a.charCodeAt(0) < 256) { for (e = 0; h > e; e++)m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++; for (t = a.charCodeAt(0), e = 0; 8 > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1 } else { for (t = 1, e = 0; h > e; e++)m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t = 0; for (t = a.charCodeAt(0), e = 0; 16 > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1 } l--, 0 == l && (l = Math.pow(2, h), h++), delete p[a] } else for (t = s[a], e = 0; h > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1; l--, 0 == l && (l = Math.pow(2, h), h++), s[c] = f++, a = String(u) } if (\"\" !== a) { if (Object.prototype.hasOwnProperty.call(p, a)) { if (a.charCodeAt(0) < 256) { for (e = 0; h > e; e++)m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++; for (t = a.charCodeAt(0), e = 0; 8 > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1 } else { for (t = 1, e = 0; h > e; e++)m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t = 0; for (t = a.charCodeAt(0), e = 0; 16 > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1 } l--, 0 == l && (l = Math.pow(2, h), h++), delete p[a] } else for (t = s[a], e = 0; h > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1; l--, 0 == l && (l = Math.pow(2, h), h++) } for (t = 2, e = 0; h > e; e++)m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++, t >>= 1; for (; ;) { if (m <<= 1, v == r - 1) { d.push(n(m)); break } v++ } return d.join(\"\") }, decompress: function (o) { return null == o ? \"\" : \"\" == o ? null : i._decompress(o.length, 32768, function (r) { return o.charCodeAt(r) }) }, _decompress: function (o, n, e) { var t, i, s, p, u, c, a, l, f = [], h = 4, d = 4, m = 3, v = \"\", w = [], A = { val: e(0), position: n, index: 1 }; for (i = 0; 3 > i; i += 1)f[i] = i; for (p = 0, c = Math.pow(2, 2), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; switch (t = p) { case 0: for (p = 0, c = Math.pow(2, 8), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; l = r(p); break; case 1: for (p = 0, c = Math.pow(2, 16), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; l = r(p); break; case 2: return \"\" }for (f[3] = l, s = l, w.push(l); ;) { if (A.index > o) return \"\"; for (p = 0, c = Math.pow(2, m), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; switch (l = p) { case 0: for (p = 0, c = Math.pow(2, 8), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; f[d++] = r(p), l = d - 1, h--; break; case 1: for (p = 0, c = Math.pow(2, 16), a = 1; a != c;)u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; f[d++] = r(p), l = d - 1, h--; break; case 2: return w.join(\"\") }if (0 == h && (h = Math.pow(2, m), m++), f[l]) v = f[l]; else { if (l !== d) return null; v = s + s.charAt(0) } w.push(v), f[d++] = s + v.charAt(0), h--, s = v, 0 == h && (h = Math.pow(2, m), m++) } } }; return i }()\n\n      if (compress) postMessage(LZString.compress(data))\n      else if (decompress) postMessage(LZString.decompress(data))\n    }\n  }\n\n  const blobURL = URL.createObjectURL(new Blob(\n    ['(', workerFunction.toString(), ')()'],\n    { type: 'application/javascript' }\n  ))\n\n  const worker = new Worker(blobURL)\n\n  URL.revokeObjectURL(blobURL)\n  return worker\n}\n\n// compress and decompress inside a worker because large amounts of data freeze the DOM\nexport const compress = async (data) => {\n  const worker = newWorker()\n  return new Promise((resolve) => {\n    worker.onmessage = (e) => {\n      resolve(e.data)\n      worker.terminate()\n    }\n    worker.postMessage({ compress: true, data })\n  })\n}\n\nexport const decompress = async (data) => {\n  const worker = newWorker()\n  return new Promise((resolve) => {\n    worker.onmessage = (e) => {\n      resolve(e.data)\n      worker.terminate()\n    }\n    worker.postMessage({ decompress: true, data })\n  })\n}\n","import config from '../config'\nimport { processXhr } from './utils'\n\nconst TIMEOUT = 30 * 1000\n\nexport const uploadBundleChunk = async (userId, databaseId, seqNo, bundleId, chunkNo, chunk) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n\n    const method = 'POST'\n    const url = `${config.getEndpoint()}/api/bundle-chunk?userbaseJsVersion=${config.USERBASE_JS_VERSION}&` +\n      `userId=${userId}&` +\n      `databaseId=${databaseId}&` +\n      `seqNo=${seqNo}&` +\n      `bundleId=${bundleId}&` +\n      `chunkNumber=${chunkNo}`\n\n    xhr.open(method, url)\n    xhr.send(new Uint8Array(chunk)) // Uint8Array view prevents deprecation warning in Safari\n\n    processXhr(xhr, resolve, reject, TIMEOUT)\n  })\n}\n","import base64 from 'base64-arraybuffer'\nimport uuidv4 from 'uuid/v4'\nimport localData from './localData'\nimport crypto from './Crypto'\nimport { getWsUrl } from './utils'\nimport statusCodes from './statusCodes'\nimport config from './config'\nimport errors from './errors'\nimport { appendBuffers, arrayBufferToString, stringToArrayBuffer } from './Crypto/utils'\nimport { compress, decompress } from './worker'\nimport { uploadBundleChunk } from './api/db'\n\nconst wsAlreadyConnected = 'Web Socket already connected'\n\nconst BACKOFF_RETRY_DELAY = 1000\nconst MAX_RETRY_DELAY = 1000 * 30\n\nconst BUNDLE_CHUNK_SIZE = 1024 * 512 // 512kb\nconst BUNDLE_CHUNKS_PER_BATCH = 10\n\nconst WS_REQUEST_TIMEOUT = 30 * 1000\n\nconst clientId = uuidv4() // only 1 client ID per browser tab (assumes code does not reload)\n\nclass RequestFailed extends Error {\n  constructor(action, e, ...params) {\n    super(...params)\n\n    this.name = `RequestFailed: ${action}`\n    this.message = e.message\n    this.status = e.status || (e.message === 'timeout' && statusCodes['Gateway Timeout'])\n    this.response = e.status && e\n  }\n}\n\nclass WebSocketError extends Error {\n  constructor(message, username, e, ...params) {\n    super(...params)\n\n    this.name = 'WebSocket error'\n    this.message = message\n    this.username = username\n    this.e = e\n  }\n}\n\nclass Connection {\n  constructor() {\n    this.init()\n  }\n\n  init(resolveConnection, rejectConnection, session, seedString, rememberMe, changePassword, state, encryptionMode) {\n    if (this.pingTimeout) clearTimeout(this.pingTimeout)\n\n    for (const property of Object.keys(this)) {\n      delete this[property]\n    }\n\n    this.ws = null\n    this.connected = false\n\n    this.resolveConnection = resolveConnection\n    this.rejectConnection = rejectConnection\n    this.connectionResolved = false\n\n    this.session = {\n      username: session && session.username,\n      sessionId: session && session.sessionId,\n      creationDate: session && session.creationDate,\n      expirationDate: session && session.expirationDate,\n      userId: session && session.userId,\n      authToken: session && session.authToken,\n    }\n\n    this.seedString = seedString\n    this.changePassword = changePassword\n    this.keys = {\n      init: false,\n      salts: {}\n    }\n\n    this.userData = {\n      stripeData: {}\n    }\n\n    this.rememberMe = rememberMe\n\n    this.requests = {}\n\n    this.state = state || {\n      dbNameToHash: {},\n      databases: {}, // used when openDatabase is called with databaseName\n      databasesByDbId: {}, // used when openDatabase is called with databaseId\n      shareTokenIdToDbId: {}, // used when openDatabase is called with shareToken\n    }\n\n    this.encryptionMode = encryptionMode\n  }\n\n  connect(session, seedString = null, rememberMe, changePassword, reconnectDelay, state) {\n    if (this.connected) throw new WebSocketError(wsAlreadyConnected, this.session.username)\n\n    return new Promise((resolve, reject) => {\n      let timeout = false\n\n      const timeoutToOpenWebSocket = setTimeout(\n        () => {\n          if (!this.connected && !this.reconnecting) {\n            timeout = true\n            reject(new WebSocketError('timeout'))\n          }\n        },\n        10000\n      )\n\n      const url = `${getWsUrl(config.getEndpoint())}/api?appId=${config.getAppId()}&sessionId=${session.sessionId}&clientId=${clientId}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n\n      const ws = new WebSocket(url)\n\n      ws.onopen = async () => {\n        if (timeout) return\n        clearTimeout(timeoutToOpenWebSocket)\n      }\n\n      ws.onmessage = async (e) => {\n        if (timeout) return\n\n        try {\n          const message = JSON.parse(e.data)\n          const route = message.route\n\n          switch (route) {\n            case 'Ping': {\n              this.heartbeat()\n\n              const action = 'Pong'\n              this.ws.send(JSON.stringify({ action }))\n              break\n            }\n\n            case 'Connection': {\n              const { encryptionMode } = message\n              this.init(resolve, reject, session, seedString, rememberMe, changePassword, state, encryptionMode)\n              this.ws = ws\n              this.heartbeat()\n              this.connected = true\n\n              // seedString not present on initial connection when still need to change password\n              if (seedString) {\n                const {\n                  keySalts,\n                  validationMessage,\n                  ecKeyData,\n                  encryptedValidationMessage,\n                } = message\n\n                this.keys.salts = keySalts\n\n                this.validationMessage = validationMessage\n                this.ecKeyData = ecKeyData\n\n                // provided by userbase-server for users who have not yet generated their ECDSA key and\n                // still only have a DH key\n                if (encryptedValidationMessage) this.encryptedValidationMessage = new Uint8Array(encryptedValidationMessage.data)\n\n                try {\n                  await this.setKeys(this.seedString)\n                  const userData = await this.validateKey()\n                  this.userData = userData\n                } catch (e) {\n                  if ((e && e.name === 'OperationError') || e instanceof DOMException) throw new Error('Invalid seed')\n                  else throw e\n                }\n\n                this.keys.init = true\n              }\n\n              this.resolveConnection()\n              this.connectionResolved = true\n              break\n            }\n\n            case 'ApplyTransactions': {\n              const dbId = message.dbId\n              const dbNameHash = message.dbNameHash\n\n              // if owner, must have opened the database via databaseName\n              const database = message.isOwner\n                ? this.state.databases[dbNameHash]\n                : this.state.databasesByDbId[dbId]\n\n              if (!database) throw new Error('Missing database')\n\n              // queue guarantees transactions will be applied in the order they are received from the server\n              if (database.applyTransactionsQueue.isEmpty()) {\n\n                // take a spot in the queue and proceed applying so the next caller knows queue is not empty\n                database.applyTransactionsQueue.enqueue(null)\n              } else {\n\n                // wait until prior batch in queue finishes applying successfully\n                await new Promise(resolve => {\n                  const startApplyingThisBatchOfTransactions = resolve\n                  database.applyTransactionsQueue.enqueue(startApplyingThisBatchOfTransactions)\n                })\n              }\n\n              const openingDatabase = (message.dbNameHash && (message.dbKey || message.plaintextDbKey)) || message.shareTokenEncryptedDbKey\n              if (openingDatabase && (!database.dbKeyString || !database.dbKey)) {\n                const dbKeyString = message.plaintextDbKey || (message.dbKey\n                  ? await crypto.aesGcm.decryptString(this.keys.encryptionKey, message.dbKey)\n                  : await database.decryptShareTokenEncryptedDbKey(message.shareTokenEncryptedDbKey, message.shareTokenEncryptionKeySalt)\n                )\n                database.dbKeyString = dbKeyString\n                database.dbKey = await crypto.aesGcm.getKeyFromKeyString(dbKeyString)\n              }\n\n              if (!database.dbKey) throw new Error('Missing db key')\n\n              if (message.writers) {\n                database.attributionEnabled = true\n                for (const { userId, username } of message.writers) {\n                  database.usernamesByUserId.set(userId, username)\n                }\n              }\n\n              // server is sending bundle in chunks, wait until it sends the entire bundle and client applies it\n              if (message.waitForFullBundle) {\n                if (!database.finishedWaitingForBundle) {\n                  await new Promise(resolve => database.finishedWaitingForBundle = resolve)\n                }\n\n                // rebuild bundle from the chunks\n                try {\n                  const bundle = await this.rebuildBundle(database, message.bundleSeqNo, message.encryptedBundleEncryptionKey)\n                  await database.applyBundle(bundle, message.bundleSeqNo)\n                } catch (e) {\n                  window.alert(`Oops! Something went wrong. Please contact the site administrator with this issue (${dbId}).\\n\\n` + e)\n                  throw e\n                }\n              }\n\n              const newTransactions = message.transactionLog\n              await database.applyTransactions(newTransactions, message.ownerId, dbId, dbNameHash)\n\n              if (message.buildBundle) {\n                this.buildBundle(database)\n              }\n\n              // start applying next batch in queue when this one is finished applying successfully\n              database.applyTransactionsQueue.dequeue()\n              if (!database.applyTransactionsQueue.isEmpty()) {\n                const startApplyingNextBatchInQueue = database.applyTransactionsQueue.peek()\n                startApplyingNextBatchInQueue()\n              }\n\n              break\n            }\n\n            case 'DownloadBundleChunk': {\n              const { dbId, dbNameHash, isOwner, bundleSeqNo, isFirstChunk, isLastChunk, chunk } = message\n\n              // if owner, must have opened the database via databaseName\n              const database = isOwner\n                ? this.state.databases[dbNameHash]\n                : this.state.databasesByDbId[dbId]\n\n              if (!database) throw new Error('Missing database')\n\n              // assumes server will always send first chunk first, and last chunk last\n              if (isFirstChunk) database.bundleChunks[bundleSeqNo] = []\n\n              database.bundleChunks[bundleSeqNo].push(chunk)\n\n              if (isLastChunk) {\n                if (database.finishedWaitingForBundle) database.finishedWaitingForBundle()\n                else database.finishedWaitingForBundle = true\n              }\n\n              break\n            }\n\n            case 'UpdatedUser': {\n              this.handleUpdateUser(message.updatedUser)\n              break\n            }\n\n            case 'SignOut':\n            case 'UpdateUser':\n            case 'DeleteUser':\n            case 'CreateDatabase':\n            case 'OpenDatabase':\n            case 'OpenDatabaseByDatabaseId':\n            case 'GetDatabases':\n            case 'GetDatabaseUsers':\n            case 'Insert':\n            case 'Update':\n            case 'Delete':\n            case 'BatchTransaction':\n            case 'InitBundleUpload':\n            case 'CompleteBundleUpload':\n            case 'GenerateFileId':\n            case 'UploadFileChunk':\n            case 'CompleteFileUpload':\n            case 'GetChunk':\n            case 'ValidateKey':\n            case 'GetPasswordSalts':\n            case 'PurchaseSubscription':\n            case 'CancelSubscription':\n            case 'ResumeSubscription':\n            case 'UpdatePaymentMethod':\n            case 'ShareDatabase':\n            case 'ShareDatabaseToken':\n            case 'AuthenticateShareToken':\n            case 'SaveDatabase':\n            case 'ModifyDatabasePermissions':\n            case 'VerifyUser':\n              {\n                const requestId = message.requestId\n\n                if (!requestId) return console.warn('Missing request id')\n\n                const request = this.requests[requestId]\n                if (!request) return console.warn(`Request ${requestId} no longer exists!`)\n                else if (!request.promiseResolve || !request.promiseReject) return\n\n                const response = message.response\n\n                const successfulResponse = response && response.status === statusCodes['Success']\n\n                if (!successfulResponse) return request.promiseReject(response)\n                else return request.promiseResolve(response)\n              }\n\n            default: {\n              console.log('Received unknown message from backend:' + JSON.stringify(message))\n              break\n            }\n          }\n        } catch (e) {\n          if (!this.connectionResolved) {\n            this.close()\n            reject(new WebSocketError(e.message, session.username, e))\n          } else {\n            console.warn('Error handling message: ', e)\n          }\n        }\n      }\n\n      ws.onclose = async (e) => {\n        if (timeout) return\n\n        const serviceRestart = e.code === statusCodes['Service Restart']\n        const clientDisconnected = e.code === statusCodes['No Pong Received']\n        const attemptToReconnect = serviceRestart || clientDisconnected || !e.wasClean // closed without explicit call to ws.close()\n\n        if (attemptToReconnect) {\n          const delay = (serviceRestart && !reconnectDelay)\n            ? 0\n            : (reconnectDelay ? reconnectDelay + BACKOFF_RETRY_DELAY : 1000)\n\n          this.reconnecting = true\n          await this.reconnect(resolve, reject, session, this.seedString || seedString, rememberMe, changePassword, delay, !this.reconnected && state)\n        } else if (e.code === statusCodes['Client Already Connected']) {\n          reject(new WebSocketError(wsAlreadyConnected, session.username, e))\n        } else {\n          this.init()\n        }\n      }\n\n      ws.onerror = () => { } // no-op so node WS implementation doesn't throw not found\n    })\n  }\n\n  async reconnect(resolveConnection, rejectConnection, session, seedString, rememberMe, changePassword, reconnectDelay, currentState) {\n    try {\n      const retryDelay = Math.min(reconnectDelay, MAX_RETRY_DELAY)\n      console.log(`Connection to server lost. Attempting to reconnect in ${retryDelay / 1000} second${retryDelay !== 1000 ? 's' : ''}...`)\n\n      const dbsToReopen = []\n      const dbsToReopenById = []\n\n      // as soon as one reconnect succeeds, resolves all the way up the stack and all reconnects succeed\n      resolveConnection(await new Promise((resolve, reject) => setTimeout(\n        async () => {\n          try {\n            // get copy of currently opened databases' memory references to reopen WebSocket with same databases\n            const state = currentState || {\n              dbNameToHash: { ...this.state.dbNameToHash },\n              databases: { ...this.state.databases },\n              databasesByDbId: { ...this.state.databasesByDbId },\n              shareTokenIdToDbId: { ...this.state.shareTokenIdToDbId },\n            }\n\n            // mark databases as uninitialized to prevent client from using them until they are reopened\n            for (const dbNameHash in state.databases) {\n              state.databases[dbNameHash].init = false\n              state.databases[dbNameHash].finishedWaitingForBundle = false\n              dbsToReopen.push(dbNameHash)\n            }\n\n            for (const dbId in state.databasesByDbId) {\n              state.databasesByDbId[dbId].init = false\n              state.databasesByDbId[dbId].finishedWaitingForBundle = false\n              dbsToReopenById.push(dbId)\n            }\n\n            this.init()\n            this.reconnecting = true\n\n            const result = await this.connect(session, seedString, rememberMe, changePassword, reconnectDelay, state)\n\n            this.reconnected = true\n\n            // only reopen databases on the first call to reconnect()\n            if (!currentState) {\n              await this.reopenDatabases(dbsToReopen, dbsToReopenById, 1000)\n              console.log('Reconnected!')\n            }\n\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        },\n        retryDelay\n      )))\n    } catch (e) {\n      rejectConnection(e)\n    }\n  }\n\n  async reopenDatabases(dbsToReopen, dbsToReopenById, retryDelay) {\n    try {\n      const openDatabasePromises = []\n\n      // open databases by database name hash\n      for (const dbNameHash of dbsToReopen) {\n        const database = this.state.databases[dbNameHash]\n\n        if (!database.init) {\n          const action = 'OpenDatabase'\n          const params = { dbNameHash, reopenAtSeqNo: database.lastSeqNo }\n          openDatabasePromises.push(this.request(action, params))\n        }\n      }\n\n      // open databases by database ID\n      for (const databaseId of dbsToReopenById) {\n        const database = this.state.databasesByDbId[databaseId]\n\n        if (!database.init) {\n          const shareTokenHkdfKey = database.shareTokenHkdfKey\n\n          // if opened with shareToken, need to reauthenticate it\n          const shareTokenAuthData = shareTokenHkdfKey\n            ? await this.authenticateShareToken(database.shareTokenId, shareTokenHkdfKey)\n            : {}\n\n          const action = 'OpenDatabaseByDatabaseId'\n          const params = { databaseId, reopenAtSeqNo: database.lastSeqNo, ...shareTokenAuthData }\n          openDatabasePromises.push(this.request(action, params))\n        }\n      }\n\n      await Promise.all(openDatabasePromises)\n    } catch (e) {\n\n      // keep attempting to reopen on failure\n      await new Promise(resolve => setTimeout(\n        async () => {\n          await this.reopenDatabases(dbsToReopen, dbsToReopenById, retryDelay + BACKOFF_RETRY_DELAY)\n          resolve()\n        },\n        Math.min(retryDelay, MAX_RETRY_DELAY)\n      ))\n    }\n  }\n\n  heartbeat() {\n    clearTimeout(this.pingTimeout)\n\n    const LATENCY_BUFFER = 3000\n\n    this.pingTimeout = setTimeout(() => {\n      if (this.ws) this.ws.close(statusCodes['No Pong Received'])\n    }, 30000 + LATENCY_BUFFER)\n  }\n\n  close(code) {\n    this.ws\n      ? this.ws.close(code)\n      : this.init()\n  }\n\n  async signOut() {\n    const username = this.session.username\n    const connectionResolved = this.connectionResolved\n    const rejectConnection = this.rejectConnection\n\n    try {\n      localData.signOutSession(this.rememberMe, username)\n\n      const sessionId = this.session.sessionId\n\n      if (this.reconnecting) throw new errors.Reconnecting\n\n      const action = 'SignOut'\n      const params = { sessionId }\n      await this.request(action, params)\n\n      this.close()\n\n      if (!connectionResolved && rejectConnection) {\n        rejectConnection(new WebSocketError('Canceled', username))\n      }\n\n    } catch (e) {\n      if (!connectionResolved && rejectConnection) {\n        rejectConnection(new WebSocketError('Canceled', username))\n      }\n\n      throw e\n    }\n  }\n\n  async setKeys(seedString) {\n    if (this.keys.init) return\n    if (!seedString) throw new WebSocketError('Missing seed', this.session.username)\n    if (!this.keys.salts) throw new WebSocketError('Missing salts', this.session.username)\n    if (!this.seedString) this.seedString = seedString\n\n    const seed = base64.decode(seedString)\n    const masterKey = await crypto.hkdf.importHkdfKey(seed)\n\n    const salts = this.keys.salts\n    this.keys.encryptionKey = await crypto.aesGcm.importKeyFromMaster(masterKey, base64.decode(salts.encryptionKeySalt))\n    this.keys.hmacKey = await crypto.hmac.importKeyFromMaster(masterKey, base64.decode(salts.hmacKeySalt))\n\n    if (salts.ecdsaKeyEncryptionKeySalt) {\n      const ecdsaKeyEncryptionKey = await crypto.ecdsa.importEcdsaKeyEncryptionKeyFromMaster(masterKey, base64.decode(salts.ecdsaKeyEncryptionKeySalt))\n      const encryptedEcdsaPrivateKey = base64.decode(this.ecKeyData.encryptedEcdsaPrivateKey)\n      const rawEcdsaPrivateKey = await crypto.aesGcm.decrypt(ecdsaKeyEncryptionKey, encryptedEcdsaPrivateKey)\n      this.keys.ecdsaPrivateKey = await crypto.ecdsa.getPrivateKeyFromRawPrivateKey(rawEcdsaPrivateKey)\n\n      const ecdhKeyEncryptionKey = await crypto.ecdh.importEcdhKeyEncryptionKeyFromMaster(masterKey, base64.decode(salts.ecdhKeyEncryptionKeySalt))\n      const encryptedEcdhPrivateKey = base64.decode(this.ecKeyData.encryptedEcdhPrivateKey)\n      const rawEcdhPrivateKey = await crypto.aesGcm.decrypt(ecdhKeyEncryptionKey, encryptedEcdhPrivateKey)\n      this.keys.ecdhPrivateKey = await crypto.ecdh.getPrivateKeyFromRawPrivateKey(rawEcdhPrivateKey)\n    } else if (salts.dhKeySalt) {\n\n      // must be an old user created with userbase-js < v2.0.0. Need to prove access to DH key to server\n      this.keys.dhPrivateKey = await crypto.diffieHellman.importKeyFromMaster(masterKey, base64.decode(salts.dhKeySalt))\n    }\n\n    if (salts.dhKeySalt || salts.ecdsaKeyWrapperSalt) {\n\n      // must be an old user created with userbase-js <= v2.0.0. Update EC key data for future logins\n      const ecdsaKeyData = await crypto.ecdsa.generateEcdsaKeyData(masterKey)\n      const ecdhKeyData = await crypto.ecdh.generateEcdhKeyData(masterKey, ecdsaKeyData.ecdsaPrivateKey)\n\n      this.keys.ecdsaPrivateKey = ecdsaKeyData.ecdsaPrivateKey\n      this.keys.ecdhPrivateKey = ecdhKeyData.ecdhPrivateKey\n\n      delete ecdsaKeyData.ecdsaPrivateKey\n      delete ecdhKeyData.ecdhPrivateKey\n\n      this.newEcKeyData = {\n        ecdsaKeyData,\n        ecdhKeyData,\n      }\n    }\n  }\n\n  async validateKey() {\n    let validationMessage\n    if (this.keys.ecdsaPrivateKey && !this.keys.dhPrivateKey) {\n\n      // need to sign the validation message with ECDSA private key\n      validationMessage = await crypto.ecdsa.sign(this.keys.ecdsaPrivateKey, base64.decode(this.validationMessage))\n\n    } else if (this.keys.dhPrivateKey) {\n\n      // need to decrypt the encrypted validation emssage with DH shared key\n      const sharedKey = await crypto.diffieHellman.getSharedKeyWithServer(this.keys.dhPrivateKey)\n      validationMessage = await crypto.aesGcm.decrypt(sharedKey, this.encryptedValidationMessage)\n\n      delete this.keys.dhPrivateKey\n    }\n\n    const action = 'ValidateKey'\n    const params = {\n      validationMessage: base64.encode(validationMessage),\n      ecKeyData: this.newEcKeyData\n    }\n\n    const response = await this.request(action, params)\n    const userData = response.data\n    return userData\n  }\n\n  async request(action, params) {\n    // generate a new requestId\n    const requestId = uuidv4()\n    this.requests[requestId] = {}\n\n    // get a promise that is resolved when the WebSocket\n    // receives a response for this requestId — the promise\n    // would time out of x seconds\n    const responseWatcher = this.watch(requestId)\n\n    // send the request on the WebSocket\n    this.ws.send(JSON.stringify({\n      requestId,\n      action,\n      params\n    }))\n\n    // wait for the response to arrive\n    try {\n      const response = await responseWatcher\n      return response\n    } catch (e) {\n      // process any errors and re-throw them\n      if (e.status === statusCodes['Too Many Requests']) throw new errors.TooManyRequests(e.data.retryDelay)\n      else throw new RequestFailed(action, e)\n    }\n  }\n\n  async watch(requestId) {\n    const response = await new Promise((resolve, reject) => {\n      this.requests[requestId].promiseResolve = resolve\n      this.requests[requestId].promiseReject = reject\n\n      setTimeout(() => { reject(new Error('timeout')) }, WS_REQUEST_TIMEOUT)\n    })\n\n    delete this.requests[requestId]\n    return response\n  }\n\n  async rebuildBundle(database, bundleSeqNo, encryptedBundleEncryptionKey) {\n    const bundleChunks = []\n    for (let i = 0; i < database.bundleChunks[bundleSeqNo].length; i++) {\n      const chunk = database.bundleChunks[bundleSeqNo][i]\n      const chunkArrayBuffer = stringToArrayBuffer(chunk)\n      bundleChunks.push(chunkArrayBuffer)\n    }\n    const bundleArrayBuffer = appendBuffers(bundleChunks).buffer\n\n    const { encrypted, plaintextMetadata } = JSON.parse(arrayBufferToString(bundleArrayBuffer))\n\n    const bundleEncryptionKeyRaw = await crypto.aesGcm.decrypt(database.dbKey, base64.decode(encryptedBundleEncryptionKey))\n    const bundleEncryptionKey = await crypto.aesGcm.getKeyFromRawKey(bundleEncryptionKeyRaw)\n\n    const decrypted = await crypto.aesGcm.decrypt(bundleEncryptionKey, stringToArrayBuffer(encrypted))\n    const decryptedString = arrayBufferToString(decrypted)\n\n    const [decompressedEncrypted, decompressedPlaintextMetdata] = await Promise.all([\n      decompress(decryptedString),\n      decompress(plaintextMetadata),\n    ])\n\n    const bundle = {\n      ...JSON.parse(decompressedEncrypted),\n      ...JSON.parse(decompressedPlaintextMetdata),\n    }\n\n    delete database.bundleChunks[bundleSeqNo]\n\n    return bundle\n  }\n\n  async uploadBundle(userId, dbId, seqNo, bundleId, bundleArrayBuffer) {\n    let position = 0\n    let chunkNumber = 0\n    let batch = [] // will use this to send chunks to server in batches of BUNDLE_CHUNKS_PER_BATCH\n\n    while (position < bundleArrayBuffer.byteLength) {\n      const chunk = bundleArrayBuffer.slice(position, position + BUNDLE_CHUNK_SIZE)\n\n      // using XHR to send binary data because Safari has trouble with string encoding over WebSocket\n      batch.push(uploadBundleChunk(userId, dbId, seqNo, bundleId, chunkNumber, chunk))\n\n      if (batch.length === BUNDLE_CHUNKS_PER_BATCH) {\n        try {\n          await Promise.all(batch)\n        } catch {\n          // ok to fail - bundling is just an optimization\n          return 0\n        }\n        batch = []\n      }\n\n      chunkNumber += 1\n      position += BUNDLE_CHUNK_SIZE\n    }\n\n    try {\n      await Promise.all(batch)\n    } catch {\n      // ok to fail - bundling is just an optimization\n      return 0\n    }\n\n    return chunkNumber\n  }\n\n  async initBundleUpload(dbId, seqNo, dbKey) {\n    const action = 'InitBundleUpload'\n    const params = { dbId, seqNo }\n    let initResponse\n    try {\n      initResponse = await this.request(action, params)\n    } catch {\n      // ok to fail - bundling is just an optimization\n      return {}\n    }\n    const { bundleId } = initResponse.data\n\n    const [bundleEncryptionKey, encryptedBundleEncryptionKey] = await crypto.aesGcm.generateAndEncryptKeyEncryptionKey(dbKey)\n\n    return { bundleId, bundleEncryptionKey, encryptedBundleEncryptionKey: base64.encode(encryptedBundleEncryptionKey) }\n  }\n\n  orderedItems(items, itemsIndex) {\n    const orderedItemsArray = []\n    for (let i = 0; i < itemsIndex.array.length; i++) {\n      const itemId = itemsIndex.array[i].itemId\n      orderedItemsArray.push(items[itemId])\n    }\n    return orderedItemsArray\n  }\n\n  prepareBundle(database) {\n    const {\n      items,\n      itemsIndex,\n      itemsPlaintextMetadata,\n    } = database\n\n    const bundle = {\n      // these values are all provided as input values to SDK, or generated by SDK - will compress, then encrypt\n      encrypted: JSON.stringify({\n        items: this.orderedItems(items, itemsIndex),\n        itemsIndex: itemsIndex.array,\n      }),\n\n      // these are values the server has access to and can modify - will compress, but no need to encrypt and risk CRIME\n      plaintextMetadata: JSON.stringify({\n        itemsPlaintextMetadata: this.orderedItems(itemsPlaintextMetadata, itemsIndex),\n      }),\n    }\n\n    return bundle\n  }\n\n  async buildBundle(database) {\n    const dbId = database.dbId\n    const lastSeqNo = database.lastSeqNo\n    const dbKey = database.dbKey\n    const userId = this.session.userId\n\n    // Client will only attempt to bundle at a particular seqNo a single time. This prevents server from spamming\n    // client with buildBundle to maliciously get the client to re-use an IV in AES-GCM and reveal the dbKey\n    if (database.bundledAtSeqNo && database.bundledAtSeqNo >= lastSeqNo) return\n    else database.bundledAtSeqNo = lastSeqNo\n\n    const bundle = this.prepareBundle(database)\n\n    const writers = database.attributionEnabled\n      ? [...database.usernamesByUserId.keys()].join(',')\n      : undefined\n\n    const { bundleId, bundleEncryptionKey, encryptedBundleEncryptionKey } = await this.initBundleUpload(dbId, lastSeqNo, dbKey)\n    if (!bundleId) return\n\n    const [compressedBeforeEncryption, compressedPlaintextMetadataString] = await Promise.all([\n      compress(bundle.encrypted),\n      compress(bundle.plaintextMetadata),\n    ])\n\n    const compressedArrayBufferBeforeEncryption = stringToArrayBuffer(compressedBeforeEncryption)\n    const encryptedItems = await crypto.aesGcm.encrypt(bundleEncryptionKey, compressedArrayBufferBeforeEncryption)\n\n    bundle.encrypted = arrayBufferToString(encryptedItems)\n    bundle.plaintextMetadata = compressedPlaintextMetadataString\n    const bundleArrayBuffer = stringToArrayBuffer(JSON.stringify(bundle))\n\n    const numChunks = await this.uploadBundle(userId, dbId, lastSeqNo, bundleId, bundleArrayBuffer)\n    if (!numChunks) return\n\n    const action = 'CompleteBundleUpload'\n    const params = { dbId, seqNo: lastSeqNo, bundleId, writers, numChunks, encryptedBundleEncryptionKey }\n    try {\n      await this.request(action, params)\n    } catch {\n      // ok to fail - bundling is just an optimization\n      return\n    }\n  }\n\n  buildUserResult({ username, userId, authToken, email, profile, protectedProfile, usedTempPassword, changePassword, passwordChanged, userData }) {\n    const result = { username, userId, authToken }\n\n    if (email) result.email = email\n    if (profile) result.profile = profile\n    if (protectedProfile) result.protectedProfile = protectedProfile\n    if (usedTempPassword) result.usedTempPassword = usedTempPassword\n    if (changePassword) result.changePassword = changePassword\n    if (passwordChanged) result.passwordChanged = passwordChanged\n\n    if (userData) {\n      const { creationDate, stripeData } = userData\n      if (creationDate) result.creationDate = creationDate\n\n      if (stripeData) {\n        const { paymentsMode, subscriptionStatus, cancelSubscriptionAt, subscriptionPlanId, trialExpirationDate } = stripeData\n\n        if (paymentsMode) result.paymentsMode = paymentsMode\n        if (subscriptionStatus) result.subscriptionStatus = subscriptionStatus\n        if (cancelSubscriptionAt) result.cancelSubscriptionAt = cancelSubscriptionAt\n        if (subscriptionPlanId) result.subscriptionPlanId = subscriptionPlanId\n        if (trialExpirationDate) result.trialExpirationDate = trialExpirationDate\n      }\n    }\n\n    return result\n  }\n\n  handleUpdateUser(updatedUser) {\n    // make sure WebSocket session matches provided user\n    if (this.session && this.session.userId === updatedUser['userId']) {\n      this.session.username = updatedUser['username']\n      this.userData = updatedUser.userData\n\n      const updateUserHandler = config.getUpdateUserHandler()\n      if (updateUserHandler) {\n        updateUserHandler({ user: this.buildUserResult({ authToken: this.session.authToken, ...updatedUser }) })\n      }\n    }\n  }\n\n  async rotateKeys(newSeedString, newKeyData) {\n    // re-arrange object to fit expected structure for setKeys() function\n    const { keySalts, ecKeyData } = newKeyData\n    const { ecdsaKeyData, ecdhKeyData } = ecKeyData\n    keySalts.ecdsaKeyEncryptionKeySalt = ecdsaKeyData.ecdsaKeyEncryptionKeySalt\n    keySalts.ecdhKeyEncryptionKeySalt = ecdhKeyData.ecdhKeyEncryptionKeySalt\n\n    this.keys.salts = keySalts\n    this.ecKeyData = { ...ecdsaKeyData, ...ecdhKeyData }\n\n    await this.setKeys(newSeedString)\n\n    this.keys.init = true\n  }\n\n  async authenticateShareToken(shareTokenId, shareTokenHkdfKey) {\n    // retrieve shareToken auth key data in order to prove access to shareToken to server\n    const action = 'AuthenticateShareToken'\n    const params = { shareTokenId }\n\n    let response\n    try {\n      response = await this.request(action, params)\n    } catch (e) {\n      if (e.response && e.response.data === 'ShareTokenNotFound') throw new errors.ShareTokenNotFound\n      throw e\n    }\n    const { databaseId, shareTokenAuthKeyData, validationMessage } = response.data\n\n    // decrypt ECDSA private key. if it fails, not using the correct shareToken\n    let shareTokenEcdsaPrivateKey\n    try {\n      const shareTokenEcdsaKeyEncryptionKeySalt = base64.decode(shareTokenAuthKeyData.shareTokenEcdsaKeyEncryptionKeySalt)\n      const shareTokenEcdsaKeyEncryptionKey = await crypto.ecdsa.importEcdsaKeyEncryptionKeyFromMaster(shareTokenHkdfKey, shareTokenEcdsaKeyEncryptionKeySalt)\n      const shareTokenEncryptedEcdsaPrivateKey = base64.decode(shareTokenAuthKeyData.shareTokenEncryptedEcdsaPrivateKey)\n      const shareTokenEcdsaPrivateKeyRaw = await crypto.aesGcm.decrypt(shareTokenEcdsaKeyEncryptionKey, shareTokenEncryptedEcdsaPrivateKey)\n      shareTokenEcdsaPrivateKey = await crypto.ecdsa.getPrivateKeyFromRawPrivateKey(shareTokenEcdsaPrivateKeyRaw)\n    } catch {\n      throw new errors.ShareTokenInvalid\n    }\n\n    // sign validation message sent by the server\n    const signedValidationMessage = await crypto.ecdsa.sign(shareTokenEcdsaPrivateKey, base64.decode(validationMessage))\n    return { databaseId, validationMessage, signedValidationMessage: base64.encode(signedValidationMessage) }\n  }\n}\n\nexport default new Connection()\n","import base64 from 'base64-arraybuffer'\nimport authApi from './api/auth'\nimport ws from './ws'\nimport crypto from './Crypto'\nimport localData from './localData'\nimport config from './config'\nimport errors from './errors'\nimport statusCodes from './statusCodes'\nimport { objectHasOwnProperty, getWsUrl } from './utils'\n\nconst MAX_PASSWORD_CHAR_LENGTH = 1000\nconst MIN_PASSWORD_CHAR_LENGTH = 6\n\nconst REMEMBER_ME_OPTIONS = {\n  local: true,\n  session: true,\n  none: true\n}\n\nconst KEY_NOT_FOUND_ON_SIGN_IN = \"Device not recognized. This temporary password can only be used to sign in from a device you've signed in from before.\"\nconst KEY_NOT_FOUND_ON_FORGOT_PASSWORD = \"Device not recognized. Forgot password only works from a device you've signed in from before.\"\n\nconst _checkSignedInState = () => {\n  if (ws.reconnecting) throw new errors.Reconnecting\n  if (!ws.keys.init && ws.changePassword) throw new errors.UserMustChangePassword\n  if (!ws.keys.init) throw new errors.UserNotSignedIn\n}\n\nconst _parseGenericErrors = (e) => {\n  if (e.response) {\n    if (e.response.data === 'Domain not whitelisted') {\n      throw new errors.DomainNotWhitelisted(window.location.origin)\n    } else if (e.response.data === 'App ID not valid') {\n      throw new errors.AppIdNotValid\n    } else if (e.response.data === 'UserNotFound') {\n      throw new errors.UserNotFound\n    } else if (e.response.status === statusCodes['Internal Server Error']) {\n      throw new errors.InternalServerError\n    } else if (e.response.status === statusCodes['Gateway Timeout']) {\n      throw new errors.Timeout\n    }\n  } else if (e.message && e.message.indexOf('timeout') !== -1) {\n    throw new errors.Timeout\n  }\n}\n\nconst _connectWebSocket = async (session, seed, rememberMe, changePassword) => {\n  try {\n    await ws.connect(session, seed, rememberMe, changePassword)\n  } catch (e) {\n    _parseGenericErrors(e)\n\n    if (e.message === 'Web Socket already connected') {\n      throw new errors.UserAlreadySignedIn(e.username)\n    }\n\n    throw e\n  }\n}\n\nconst _parseGenericUsernamePasswordError = (e) => {\n  if (e.response && e.response.data.error === 'UsernameTooLong') {\n    throw new errors.UsernameTooLong(e.response.data.maxLen)\n  } else if (e.response && e.response.data.error === 'PasswordAttemptLimitExceeded') {\n    throw new errors.PasswordAttemptLimitExceeded(e.response.data.delay)\n  }\n}\n\nconst _parseSessionLengthError = (e) => {\n  if (e.response && e.response.data) {\n    const data = e.response.data\n\n    switch (data.error) {\n      case 'SessionLengthTooShort':\n        throw new errors.SessionLengthTooShort(data.minLen)\n\n      case 'SessionLengthTooLong':\n        throw new errors.SessionLengthTooLong(data.maxLen)\n    }\n  }\n}\n\nconst _parseUserResponseError = (e, username) => {\n  _parseGenericErrors(e)\n  _parseGenericUsernamePasswordError(e)\n\n  if (e.response) {\n    const data = e.response.data\n\n    switch (data) {\n      case 'UsernameAlreadyExists':\n        throw new errors.UsernameAlreadyExists(username)\n\n      case 'TrialExceededLimit':\n        throw new errors.TrialExceededLimit\n\n      case 'CurrentPasswordIncorrect':\n        throw new errors.CurrentPasswordIncorrect\n\n      default:\n      // continue\n    }\n\n    switch (data.error) {\n      case 'EmailNotValid':\n        throw new errors.EmailNotValid\n\n      case 'ProfileMustBeObject':\n        throw new errors.ProfileMustBeObject\n\n      case 'ProfileKeyTooLong':\n        throw new errors.ProfileKeyTooLong(data.maxLen, data.key)\n\n      case 'ProfileValueMustBeString':\n        throw new errors.ProfileValueMustBeString(data.key, data.value)\n\n      case 'ProfileValueCannotBeBlank':\n        throw new errors.ProfileValueCannotBeBlank(data.key)\n\n      case 'ProfileValueTooLong':\n        throw new errors.ProfileValueTooLong(data.maxLen, data.key, data.value)\n\n      case 'ProfileHasTooManyKeys':\n        throw new errors.ProfileHasTooManyKeys(data.maxKeys)\n\n      case 'ProfileCannotBeEmpty':\n        throw new errors.ProfileCannotBeEmpty\n    }\n  }\n\n  throw e\n}\n\nconst _calculateSessionLengthMs = sessionLength => sessionLength && sessionLength * 60 * 60 * 1000\n\nconst _validateUsername = (username) => {\n  if (typeof username !== 'string') throw new errors.UsernameMustBeString\n  if (username.length === 0) throw new errors.UsernameCannotBeBlank\n}\n\nconst _validatePassword = (password) => {\n  if (typeof password !== 'string') throw new errors.PasswordMustBeString\n  if (password.length === 0) throw new errors.PasswordCannotBeBlank\n  if (password.length < MIN_PASSWORD_CHAR_LENGTH) throw new errors.PasswordTooShort(MIN_PASSWORD_CHAR_LENGTH)\n  if (password.length > MAX_PASSWORD_CHAR_LENGTH) throw new errors.PasswordTooLong(MAX_PASSWORD_CHAR_LENGTH)\n}\n\nconst _validateSignUpOrSignInInput = (params) => {\n  if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n\n  if (!objectHasOwnProperty(params, 'username')) throw new errors.UsernameMissing\n  if (!objectHasOwnProperty(params, 'password')) throw new errors.PasswordMissing\n\n  _validateUsername(params.username)\n  _validatePassword(params.password)\n\n  if (objectHasOwnProperty(params, 'rememberMe') && !REMEMBER_ME_OPTIONS[params.rememberMe]) {\n    throw new errors.RememberMeValueNotValid(REMEMBER_ME_OPTIONS)\n  }\n\n  if (objectHasOwnProperty(params, 'sessionLength') && typeof params.sessionLength !== 'number') {\n    throw new errors.SessionLengthMustBeNumber\n  }\n}\n\nconst _generatePasswordToken = async (password, seed, passwordHashAlgo) => {\n  const passwordSalt = crypto.scrypt.generateSalt()\n  const passwordHash = await crypto.scrypt.hash(password, passwordSalt, passwordHashAlgo)\n\n  const passwordHkdfKey = await crypto.hkdf.importHkdfKeyFromString(passwordHash)\n\n  const passwordTokenSalt = crypto.hkdf.generateSalt()\n  const passwordToken = await crypto.hkdf.getPasswordToken(passwordHkdfKey, passwordTokenSalt)\n\n  const passwordBasedEncryptionKeySalt = crypto.hkdf.generateSalt()\n  const passwordBasedEncryptionKey = await crypto.aesGcm.getPasswordBasedEncryptionKey(\n    passwordHkdfKey, passwordBasedEncryptionKeySalt)\n\n  const passwordEncryptedSeed = await crypto.aesGcm.encrypt(passwordBasedEncryptionKey, seed)\n\n  const passwordSalts = {\n    passwordSalt: base64.encode(passwordSalt),\n    passwordTokenSalt: base64.encode(passwordTokenSalt)\n  }\n\n  const passwordBasedBackup = {\n    passwordBasedEncryptionKeySalt: base64.encode(passwordBasedEncryptionKeySalt),\n    passwordEncryptedSeed: base64.encode(passwordEncryptedSeed)\n  }\n\n  return {\n    passwordToken,\n    passwordSalts,\n    passwordBasedBackup\n  }\n}\n\nconst _generateKeys = async (seed) => {\n  const masterKey = await crypto.hkdf.importHkdfKey(seed)\n\n  const encryptionKeySalt = crypto.hkdf.generateSalt()\n  const hmacKeySalt = crypto.hkdf.generateSalt()\n  const keySalts = {\n    encryptionKeySalt: base64.encode(encryptionKeySalt),\n    hmacKeySalt: base64.encode(hmacKeySalt),\n  }\n\n  const ecdsaKeyData = await crypto.ecdsa.generateEcdsaKeyData(masterKey)\n  const ecdhKeyData = await crypto.ecdh.generateEcdhKeyData(masterKey, ecdsaKeyData.ecdsaPrivateKey)\n\n  delete ecdsaKeyData.ecdsaPrivateKey\n  delete ecdhKeyData.ecdhPrivateKey\n\n  const ecKeyData = {\n    ecdsaKeyData,\n    ecdhKeyData,\n  }\n\n  return { ecKeyData, keySalts }\n}\n\nconst _generateKeysAndSignUp = async (username, password, seed, passwordHashAlgo, email, profile, sessionLength) => {\n  const {\n    passwordToken,\n    passwordSalts,\n    passwordBasedBackup\n  } = await _generatePasswordToken(password, seed, passwordHashAlgo)\n\n  const { ecKeyData, keySalts } = await _generateKeys(seed)\n\n  try {\n    const session = await authApi.signUp(\n      username,\n      passwordToken,\n      ecKeyData,\n      passwordSalts,\n      keySalts,\n      email,\n      profile,\n      passwordBasedBackup,\n      sessionLength,\n    )\n    return session\n  } catch (e) {\n    _parseSessionLengthError(e)\n    _parseUserResponseError(e, username)\n  }\n}\n\nconst _validateProfile = (profile) => {\n  if (typeof profile !== 'object') throw new errors.ProfileMustBeObject\n\n  let keyExists = false\n  for (const key in profile) {\n    keyExists = true\n\n    const value = profile[key]\n    if (typeof value !== 'string') throw new errors.ProfileValueMustBeString(key, value)\n    if (!value) throw new errors.ProfileValueCannotBeBlank(key)\n  }\n\n  if (!keyExists) throw new errors.ProfileCannotBeEmpty\n}\n\nconst _validateSignUpInput = (params) => {\n  _validateSignUpOrSignInInput(params)\n\n  if (params.profile) _validateProfile(params.profile)\n  if (params.email && typeof params.email !== 'string') throw new errors.EmailNotValid\n}\n\nconst signUp = async (params) => {\n  try {\n    _validateSignUpInput(params)\n\n    const { password, profile, passwordHashAlgo, rememberMe = 'session' } = params\n\n    const username = params.username.toLowerCase()\n    const email = params.email && params.email.toLowerCase()\n\n    const appId = config.getAppId()\n    const seed = await crypto.generateSeed()\n\n    const sessionLength = _calculateSessionLengthMs(params.sessionLength)\n\n    const { sessionId, creationDate, expirationDate, userId, authToken } = await _generateKeysAndSignUp(username, password, seed, passwordHashAlgo, email, profile, sessionLength)\n    const session = { username, userId, sessionId, creationDate, expirationDate, authToken }\n\n    const seedString = base64.encode(seed)\n\n    localData.saveSeedString(rememberMe, appId, username, seedString)\n    localData.signInSession(rememberMe, username, sessionId, creationDate, expirationDate)\n\n    await _connectWebSocket(session, seedString, rememberMe)\n\n    return ws.buildUserResult({ username, userId, authToken, email, profile, userData: ws.userData })\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'UsernameMissing':\n      case 'UsernameAlreadyExists':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameMustBeString':\n      case 'UsernameTooLong':\n      case 'PasswordMissing':\n      case 'PasswordCannotBeBlank':\n      case 'PasswordTooShort':\n      case 'PasswordTooLong':\n      case 'PasswordMustBeString':\n      case 'EmailNotValid':\n      case 'ProfileMustBeObject':\n      case 'ProfileCannotBeEmpty':\n      case 'ProfileHasTooManyKeys':\n      case 'ProfileKeyTooLong':\n      case 'ProfileValueMustBeString':\n      case 'ProfileValueCannotBeBlank':\n      case 'ProfileValueTooLong':\n      case 'RememberMeValueNotValid':\n      case 'SessionLengthMustBeNumber':\n      case 'SessionLengthTooShort':\n      case 'SessionLengthTooLong':\n      case 'TrialExceededLimit':\n      case 'AppIdNotSet':\n      case 'AppIdNotValid':\n      case 'DomainNotWhitelisted':\n      case 'UserAlreadySignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst signOut = async () => {\n  try {\n    if (!ws.session.username) throw new errors.UserNotSignedIn\n\n    try {\n      await ws.signOut()\n    } catch (e) {\n      _parseGenericErrors(e)\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'UserNotSignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst _getSeedStringFromPasswordBasedBackup = async (passwordHkdfKey, passwordBasedBackup) => {\n  const { passwordBasedEncryptionKeySalt, passwordEncryptedSeed } = passwordBasedBackup\n\n  const passwordBasedEncryptionKey = await crypto.aesGcm.getPasswordBasedEncryptionKey(\n    passwordHkdfKey, base64.decode(passwordBasedEncryptionKeySalt))\n\n  const seedFromBackup = await crypto.aesGcm.decrypt(passwordBasedEncryptionKey, base64.decode(passwordEncryptedSeed))\n  const seedStringFromBackup = base64.encode(seedFromBackup)\n\n  return seedStringFromBackup\n}\n\nconst _signInWrapper = async (username, passwordToken, sessionLength) => {\n  try {\n    const apiSignInResult = await authApi.signIn(username, passwordToken, sessionLength)\n    return apiSignInResult\n  } catch (e) {\n    _parseGenericErrors(e)\n    _parseGenericUsernamePasswordError(e)\n    _parseSessionLengthError(e)\n\n    if (e.response && e.response.data === 'Invalid password') {\n      throw new errors.UsernameOrPasswordMismatch\n    } else if (e.response && e.response.data === 'User pending deletion') {\n      throw new errors.UserPendingDeletion\n    }\n\n    throw e\n  }\n}\n\nconst _getPasswordSaltsOverRestEndpoint = async (username) => {\n  try {\n    const passwordSalts = await authApi.getPasswordSalts(username)\n    return passwordSalts\n  } catch (e) {\n    _parseGenericErrors(e)\n    _parseGenericUsernamePasswordError(e)\n\n    if (e.response && e.response.data === 'User not found') {\n      throw new errors.UsernameOrPasswordMismatch\n    }\n\n    throw e\n  }\n}\n\nconst _getPasswordSaltsOverWebSocket = async () => {\n  try {\n    const action = 'GetPasswordSalts'\n    const passwordSaltsResponse = await ws.request(action)\n    return passwordSaltsResponse.data\n  } catch (e) {\n    _parseGenericErrors(e)\n    throw e\n  }\n}\n\nconst _rebuildPasswordToken = async (password, passwordSalts, passwordHashAlgo) => {\n  const { passwordSalt, passwordTokenSalt } = passwordSalts\n\n  const passwordHash = await crypto.scrypt.hash(password, new Uint8Array(base64.decode(passwordSalt)), passwordHashAlgo)\n  const passwordHkdfKey = await crypto.hkdf.importHkdfKeyFromString(passwordHash)\n  const passwordToken = await crypto.hkdf.getPasswordToken(passwordHkdfKey, base64.decode(passwordTokenSalt))\n\n  return { passwordHkdfKey, passwordToken }\n}\n\nconst signIn = async (params) => {\n  try {\n    _validateSignUpOrSignInInput(params)\n\n    const username = params.username.toLowerCase()\n    const { password, passwordHashAlgo, rememberMe = 'session' } = params\n\n    const appId = config.getAppId()\n\n    const passwordSalts = await _getPasswordSaltsOverRestEndpoint(username)\n    const { passwordHkdfKey, passwordToken } = await _rebuildPasswordToken(password, passwordSalts, passwordHashAlgo)\n\n    const sessionLength = _calculateSessionLengthMs(params.sessionLength)\n\n    const apiSignInResult = await _signInWrapper(username, passwordToken, sessionLength)\n    const { userId, email, profile, passwordBasedBackup, protectedProfile, usedTempPassword, changePassword } = apiSignInResult\n    const session = {\n      ...apiSignInResult.session,\n      username,\n      userId,\n    }\n\n    let seedString\n    if (!changePassword) {\n      const savedSeedString = localData.getSeedString(appId, username)\n\n      let seedStringFromBackup\n      if (!savedSeedString && usedTempPassword) {\n        throw new errors.KeyNotFound(KEY_NOT_FOUND_ON_SIGN_IN)\n      } else if (!usedTempPassword) {\n        // always use seed from backup in case it's changed and local copy is out of date\n        seedStringFromBackup = await _getSeedStringFromPasswordBasedBackup(passwordHkdfKey, passwordBasedBackup)\n        localData.saveSeedString(rememberMe, appId, username, seedStringFromBackup)\n      }\n\n      seedString = seedStringFromBackup || savedSeedString\n    }\n\n    localData.signInSession(rememberMe, username, session.sessionId, session.creationDate, session.expirationDate)\n\n    try {\n      await _connectWebSocket(session, seedString, rememberMe, changePassword)\n    } catch (e) {\n      if (usedTempPassword && e.message === 'Invalid seed') throw new errors.KeyNotFound(KEY_NOT_FOUND_ON_SIGN_IN)\n      throw e\n    }\n\n    return ws.buildUserResult({\n      username, userId, authToken: session.authToken, email,\n      profile, protectedProfile, usedTempPassword, changePassword, userData: ws.userData\n    })\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'UsernameMissing':\n      case 'UsernameOrPasswordMismatch':\n      case 'UserPendingDeletion':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameTooLong':\n      case 'UsernameMustBeString':\n      case 'PasswordMissing':\n      case 'PasswordCannotBeBlank':\n      case 'PasswordTooShort':\n      case 'PasswordTooLong':\n      case 'PasswordMustBeString':\n      case 'PasswordAttemptLimitExceeded':\n      case 'RememberMeValueNotValid':\n      case 'SessionLengthMustBeNumber':\n      case 'SessionLengthTooShort':\n      case 'SessionLengthTooLong':\n      case 'KeyNotFound':\n      case 'AppIdNotSet':\n      case 'AppIdNotValid':\n      case 'DomainNotWhitelisted':\n      case 'UserAlreadySignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst init = async (params) => {\n  try {\n    if (!window.crypto.subtle) throw new errors.WebCryptoUnavailable\n\n    if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n\n    if (!objectHasOwnProperty(params, 'appId')) throw new errors.AppIdMissing\n    if (typeof params.appId !== 'string') throw new errors.AppIdMustBeString\n    if (params.appId.length === 0) throw new errors.AppIdCannotBeBlank\n\n    if (objectHasOwnProperty(params, 'updateUserHandler') && typeof params.updateUserHandler !== 'function') {\n      throw new errors.UpdateUserHandlerMustBeFunction\n    }\n\n    if (objectHasOwnProperty(params, 'sessionLength') && typeof params.sessionLength !== 'number') {\n      throw new errors.SessionLengthMustBeNumber\n    }\n\n    if (objectHasOwnProperty(params, 'allowServerSideEncryption') && typeof params.allowServerSideEncryption !== 'boolean') {\n      throw new errors.AllowServerSideEncryptionMustBeBoolean\n    }\n\n    config.configure(params)\n\n    const session = await signInWithSession(params.appId, _calculateSessionLengthMs(params.sessionLength))\n    return session\n  } catch (e) {\n\n    switch (e.name) {\n      case 'WebCryptoUnavailable':\n      case 'ParamsMustBeObject':\n      case 'AppIdMissing':\n      case 'AppIdAlreadySet':\n      case 'AppIdMustBeString':\n      case 'AppIdCannotBeBlank':\n      case 'AppIdNotValid':\n      case 'DomainNotWhitelisted':\n      case 'UpdateUserHandlerMustBeFunction':\n      case 'SessionLengthMustBeNumber':\n      case 'SessionLengthTooShort':\n      case 'SessionLengthTooLong':\n      case 'AllowServerSideEncryptionMustBeBoolean':\n      case 'UserAlreadySignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst signInWithSession = async (appId, sessionLength) => {\n  let lastUsedUsername\n  try {\n    const currentSession = localData.getCurrentSession()\n    if (!currentSession) return {}\n\n    const { signedIn, sessionId, creationDate, expirationDate, rememberMe } = currentSession\n    lastUsedUsername = currentSession.username\n    const savedSeedString = localData.getSeedString(appId, lastUsedUsername)\n\n    if (!signedIn || !savedSeedString || new Date() > new Date(expirationDate)) {\n      return { lastUsedUsername }\n    }\n\n    let apiSignInWithSessionResult\n    try {\n      apiSignInWithSessionResult = await authApi.signInWithSession(sessionId, sessionLength)\n    } catch (e) {\n      _parseGenericErrors(e)\n      _parseSessionLengthError(e)\n\n      if (e.response && e.response.data === 'Session invalid') {\n        return { lastUsedUsername }\n      }\n\n      throw e\n    }\n    const { userId, authToken, username, email, profile, protectedProfile } = apiSignInWithSessionResult\n\n    // overwrite local data if username has been changed on server\n    if (username !== lastUsedUsername) {\n      localData.saveSeedString(rememberMe, appId, username, savedSeedString)\n      localData.removeSeedString(appId, lastUsedUsername)\n    }\n\n    // expirationDate should have been extended\n    localData.signInSession(rememberMe, username, sessionId, creationDate, apiSignInWithSessionResult.expirationDate)\n\n    // enable idempotent calls to init()\n    if (ws.connectionResolved) {\n      if (ws.session.sessionId === sessionId) {\n        return { user: ws.buildUserResult({ username, userId, authToken: ws.session.authToken, email, profile, protectedProfile, userData: ws.userData }) }\n      } else {\n        throw new errors.UserAlreadySignedIn(ws.session.username)\n      }\n    }\n\n    const session = { ...currentSession, username, userId, authToken }\n    await _connectWebSocket(session, savedSeedString, rememberMe)\n\n    return { user: ws.buildUserResult({ username, userId, authToken, email, profile, protectedProfile, userData: ws.userData }) }\n  } catch (e) {\n    if (e.message === 'Invalid seed') return { lastUsedUsername }\n    _parseGenericErrors(e)\n    throw e\n  }\n}\n\nconst _validateUpdatedUserInput = (params) => {\n  if (!objectHasOwnProperty(params, 'username')\n    && !objectHasOwnProperty(params, 'newPassword')\n    && !objectHasOwnProperty(params, 'email')\n    && !objectHasOwnProperty(params, 'profile')\n  ) {\n    throw new errors.ParamsMissing\n  }\n\n  const { username, currentPassword, newPassword, email, profile } = params\n\n  if (objectHasOwnProperty(params, 'username')) _validateUsername(username)\n  if (objectHasOwnProperty(params, 'newPassword')) {\n    if (!objectHasOwnProperty(params, 'currentPassword')) throw new errors.CurrentPasswordMissing\n\n    _validatePassword(currentPassword)\n    _validatePassword(newPassword)\n  }\n\n  // if email or profile are falsey, will be set to false\n  if (email && typeof email !== 'string') throw new errors.EmailNotValid\n  if (profile) _validateProfile(profile)\n}\n\nconst _buildUpdateUserParams = async (params, newSeed) => {\n  if (params.username) params.username = params.username.toLowerCase()\n\n  if (params.newPassword) {\n    const [currentPasswordSalts, newPasswordPromise, newKeyData] = await Promise.all([\n      _getPasswordSaltsOverWebSocket(),\n      _generatePasswordToken(params.newPassword, newSeed || base64.decode(ws.seedString)),\n      newSeed && _generateKeys(newSeed)\n    ])\n\n    // current password\n    const { passwordToken } = await _rebuildPasswordToken(params.currentPassword, currentPasswordSalts, params.passwordHashAlgo)\n    params.currentPasswordToken = passwordToken\n    delete params.currentPassword\n\n    // new password\n    params.passwordToken = newPasswordPromise.passwordToken\n    params.passwordSalts = newPasswordPromise.passwordSalts\n    params.passwordBasedBackup = newPasswordPromise.passwordBasedBackup\n    delete params.newPassword\n\n    if (newKeyData) params.newKeyData = newKeyData\n  }\n\n  if (params.email) params.email = params.email.toLowerCase()\n  else if (objectHasOwnProperty(params, 'email')) params.email = false // marks email for deletion\n\n  if (!params.profile && objectHasOwnProperty(params, 'profile')) params.profile = false // marks profile for deletion\n\n  return params\n}\n\nconst updateUser = async (params) => {\n  try {\n    if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n\n    _validateUpdatedUserInput(params)\n\n    if (ws.reconnecting) throw new errors.Reconnecting\n    if (!ws.connectionResolved) throw new errors.UserNotSignedIn\n    const startingUserId = ws.session.userId\n\n    // need to generate new seed to rotate keys if user signed in with temp password to delete private data\n    const newSeed = params.newPassword && !ws.keys.init && ws.changePassword && await crypto.generateSeed()\n\n    const action = 'UpdateUser'\n    const finalParams = await _buildUpdateUserParams({ ...params }, newSeed)\n\n    if (ws.reconnecting) throw new errors.Reconnecting\n    if (!ws.connectionResolved) throw new errors.UserNotSignedIn\n\n    // ensures same user still attempting to update\n    if (!ws.session || startingUserId !== ws.session.userId) throw new errors.ServiceUnavailable\n\n    try {\n      if (finalParams.username) {\n        localData.saveSeedString(ws.rememberMe, config.getAppId(), finalParams.username, ws.seedString)\n      }\n\n      const response = await ws.request(action, finalParams)\n      const updatedUser = response.data.updatedUser\n      ws.handleUpdateUser(updatedUser)\n\n      // must have rotated keys successfully\n      if (newSeed && ws.session && startingUserId === ws.session.userId) {\n        const newSeedString = base64.encode(newSeed)\n        await ws.rotateKeys(newSeedString, finalParams.newKeyData)\n        localData.saveSeedString(ws.rememberMe, config.getAppId(), updatedUser.username, newSeedString)\n\n        const { sessionId, creationDate, expirationDate } = ws.session\n        localData.signInSession(ws.rememberMe, updatedUser.username, sessionId, creationDate, expirationDate)\n      }\n    } catch (e) {\n      _parseUserResponseError(e, finalParams.username)\n    }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'ParamsMissing':\n      case 'UsernameAlreadyExists':\n      case 'UsernameMustBeString':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameTooLong':\n      case 'CurrentPasswordMissing':\n      case 'CurrentPasswordIncorrect':\n      case 'PasswordAttemptLimitExceeded':\n      case 'PasswordMustBeString':\n      case 'PasswordCannotBeBlank':\n      case 'PasswordTooShort':\n      case 'PasswordTooLong':\n      case 'EmailNotValid':\n      case 'ProfileMustBeObject':\n      case 'ProfileCannotBeEmpty':\n      case 'ProfileHasTooManyKeys':\n      case 'ProfileKeyTooLong':\n      case 'ProfileValueMustBeString':\n      case 'ProfileValueCannotBeBlank':\n      case 'ProfileValueTooLong':\n      case 'AppIdNotSet':\n      case 'AppIdNotValid':\n      case 'UserNotFound':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst deleteUser = async () => {\n  try {\n    _checkSignedInState()\n\n    const username = ws.session.username\n    localData.removeSeedString(config.getAppId(), username)\n    localData.removeCurrentSession()\n\n    try {\n      const action = 'DeleteUser'\n      await ws.request(action)\n    } catch (e) {\n      _parseGenericErrors(e)\n      throw e\n    }\n\n    ws.close()\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _getMasterKeyAndKeyNotFoundMessage = async (appId, username) => {\n  const seedString = localData.getSeedString(appId, username)\n  if (!seedString) throw new errors.KeyNotFound(KEY_NOT_FOUND_ON_FORGOT_PASSWORD)\n  const seed = base64.decode(seedString)\n  const masterKey = await crypto.hkdf.importHkdfKey(seed)\n  return masterKey\n}\n\nconst forgotPassword = async (params) => {\n  try {\n    if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n    if (objectHasOwnProperty(params, 'deleteEndToEndEncryptedData') && typeof params.deleteEndToEndEncryptedData !== 'boolean') {\n      throw new errors.DeleteEndToEndEncryptedDataMustBeBoolean\n    }\n    if (!objectHasOwnProperty(params, 'username')) throw new errors.UsernameMissing\n\n    _validateUsername(params.username)\n    const username = params.username.toLowerCase()\n\n    const appId = config.getAppId()\n\n    const url = `${getWsUrl(config.getEndpoint())}/api/auth/forgot-password?appId=${appId}&username=${encodeURIComponent(username)}&userbaseJsVersion=${config.USERBASE_JS_VERSION}`\n    const forgotPasswordWs = new WebSocket(url + (objectHasOwnProperty(params, 'deleteEndToEndEncryptedData')\n      ? `&deleteEndToEndEncryptedData=${params.deleteEndToEndEncryptedData}` : ''))\n\n    await new Promise((resolve, reject) => {\n      setTimeout(() => reject(new errors.Timeout), 15000)\n\n      forgotPasswordWs.onerror = () => reject(new errors.ServiceUnavailable)\n\n      forgotPasswordWs.onmessage = async (e) => {\n        try {\n          const message = JSON.parse(e.data)\n\n          switch (message.route) {\n\n            // users created with userbase-js < v2.0.0 that have not signed in yet will need to prove access to DH key by decrypting token\n            case 'ReceiveEncryptedToken': {\n              const masterKey = await _getMasterKeyAndKeyNotFoundMessage(appId, username)\n\n              // if client decrypts encrypted token successfully, proves to server it has the user's key\n              const encryptedForgotPasswordToken = new Uint8Array(message.encryptedForgotPasswordToken.data)\n\n              const dhPrivateKey = await crypto.diffieHellman.importKeyFromMaster(masterKey, base64.decode(message.dhKeySalt))\n              const sharedKey = await crypto.diffieHellman.getSharedKeyWithServer(dhPrivateKey)\n\n              let forgotPasswordToken\n              try {\n                // if it fails to decrypt, it's almost certainly because key is incorrect\n                forgotPasswordToken = base64.encode(await crypto.aesGcm.decrypt(sharedKey, encryptedForgotPasswordToken))\n              } catch {\n                throw new errors.KeyNotFound(KEY_NOT_FOUND_ON_FORGOT_PASSWORD)\n              }\n\n              forgotPasswordWs.send(JSON.stringify({\n                action: 'ForgotPassword',\n                params: { forgotPasswordToken }\n              }))\n\n              break\n            }\n\n            // users signed in with userbase-js >= v2.0.1 will need to prove access to ECDSA key by signing token\n            case 'ReceiveToken': {\n              const masterKey = await _getMasterKeyAndKeyNotFoundMessage(appId, username)\n\n              const {\n                ecdsaKeyEncryptionKeySalt,\n                encryptedEcdsaPrivateKey,\n                forgotPasswordToken,\n              } = message\n\n              const ecdsaKeyEncryptionKey = await crypto.ecdsa.importEcdsaKeyEncryptionKeyFromMaster(masterKey, base64.decode(ecdsaKeyEncryptionKeySalt))\n\n              let ecdsaPrivateKey\n              try {\n                // if it fails to decrypt, it's almost certainly because key is incorrect\n                const rawEcdsaPrivateKey = await crypto.aesGcm.decrypt(ecdsaKeyEncryptionKey, base64.decode(encryptedEcdsaPrivateKey))\n                ecdsaPrivateKey = await crypto.ecdsa.getPrivateKeyFromRawPrivateKey(rawEcdsaPrivateKey)\n              } catch {\n                throw new errors.KeyNotFound(KEY_NOT_FOUND_ON_FORGOT_PASSWORD)\n              }\n\n              const signedForgotPasswordToken = base64.encode(await crypto.ecdsa.sign(ecdsaPrivateKey, base64.decode(forgotPasswordToken)))\n\n              forgotPasswordWs.send(JSON.stringify({\n                action: 'ForgotPassword',\n                params: { signedForgotPasswordToken }\n              }))\n\n              break\n            }\n\n            case 'SuccessfullyForgotPassword': {\n              // server has sent the email\n              resolve()\n              break\n            }\n\n            case 'Error': {\n              const data = message.data\n\n              switch (data.name) {\n                case 'UsernameTooLong': throw new errors.UsernameTooLong(data.maxLen)\n                case 'AppIdNotValid': throw new errors.AppIdNotValid\n                case 'UserNotFound': throw new errors.UserNotFound\n                case 'UserEmailNotFound': throw new errors.UserEmailNotFound\n\n                default: {\n                  if (message.status === statusCodes['Internal Server Error']) throw new errors.ServiceUnavailable\n                  else throw new errors.UnknownServiceUnavailable(data)\n                }\n              }\n            }\n\n            case 'Ping': {\n              // ignore -- websocket connection should only exist for the life of the forgot password request\n              break\n            }\n\n            default:\n              reject(new Error(`Received unknown message from userbase-server: ${e.data}`))\n          }\n        } catch (e) {\n          reject(e)\n        }\n      }\n    })\n\n    forgotPasswordWs.close()\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'UsernameMissing':\n      case 'UsernameMustBeString':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameTooLong':\n      case 'AppIdNotSet':\n      case 'AppIdNotValid':\n      case 'KeyNotFound':\n      case 'UserNotFound':\n      case 'UserEmailNotFound':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n\n    }\n  }\n}\n\nexport default {\n  signUp,\n  signOut,\n  signIn,\n  init,\n  updateUser,\n  deleteUser,\n  forgotPassword,\n}\n","import uuidv4 from 'uuid/v4'\nimport SortedArray from 'sorted-array'\nimport base64 from 'base64-arraybuffer'\nimport crypto from './Crypto'\nimport ws from './ws'\nimport errors from './errors'\nimport statusCodes from './statusCodes'\nimport { byteSizeOfString, Queue, objectHasOwnProperty } from './utils'\nimport { appendBuffer, arrayBufferToString, stringToArrayBuffer } from './Crypto/utils'\nimport authApi from './api/auth'\nimport config from './config'\n\nconst success = 'Success'\n\nconst MAX_DB_NAME_CHAR_LENGTH = 100\nconst MAX_ITEM_ID_CHAR_LENGTH = 100\n\nconst MAX_ITEM_KB = 10\nconst TEN_KB = MAX_ITEM_KB * 1024\nconst MAX_ITEM_BYTES = TEN_KB\n\nconst UUID_CHAR_LENGTH = 36\n\nconst FILE_CHUNK_SIZE = 1024 * 512 // 512kb\nconst FILE_CHUNKS_PER_BATCH = 10\n\nconst VERIFIED_USERS_DATABASE_NAME = '__userbase_verified_users'\n\nconst ENCRYPTION_MODE_OPTIONS = {\n  'end-to-end': true,\n  'server-side': true\n}\n\nconst TX_TIMEOUT = 30 * 1000\n\nconst _checkSignedInState = () => {\n  if (ws.reconnecting) throw new errors.Reconnecting\n  if (!ws.keys.init && ws.changePassword) throw new errors.UserMustChangePassword\n  if (!ws.keys.init || !ENCRYPTION_MODE_OPTIONS[ws.encryptionMode]) throw new errors.UserNotSignedIn\n}\n\nconst _parseGenericErrors = (e) => {\n  if (e.response) {\n    if (e.response.data === 'UserNotFound') {\n      throw new errors.UserNotFound\n    } else if (e.response.status === statusCodes['Internal Server Error']) {\n      throw new errors.InternalServerError\n    } else if (e.response.status === statusCodes['Gateway Timeout']) {\n      throw new errors.Timeout\n    }\n  } else if (e.message && e.message.indexOf('timeout') !== -1) {\n    throw new errors.Timeout\n  }\n}\n\nclass UnverifiedTransaction {\n  constructor(startSeqNo) {\n    this.startSeqNo = startSeqNo\n    this.txSeqNo = null\n    this.transactions = {}\n    this.promiseResolve = null\n    this.promiseReject = null\n    this.index = null\n  }\n\n  getStartSeqNo() {\n    return this.startSeqNo\n  }\n\n  getIndex() {\n    return this.index\n  }\n\n  setIndex(index) {\n    this.index = index\n  }\n\n  async getResult(seqNo) {\n    this.txSeqNo = seqNo\n\n    const promise = new Promise((resolve, reject) => {\n      this.promiseResolve = resolve\n      this.promiseReject = reject\n\n      setTimeout(() => { reject(new Error('timeout')) }, TX_TIMEOUT)\n    })\n\n    this.verifyPromise()\n\n    return promise\n  }\n\n  verifyPromise() {\n    if (!this.txSeqNo && this.txSeqNo != 0) {\n      return\n    }\n\n    if (!this.promiseResolve || !this.promiseReject) {\n      return\n    }\n\n    if (this.transactions[this.txSeqNo]) {\n      if (this.transactions[this.txSeqNo] == 'Success') {\n        this.promiseResolve()\n      } else {\n        this.promiseReject(this.transactions[this.txSeqNo])\n      }\n    }\n  }\n\n  addTransaction(transaction, code) {\n    if (this.transactions[transaction.seqNo]) return\n    this.transactions[transaction.seqNo] = code\n    this.verifyPromise()\n  }\n}\n\nclass Database {\n  constructor(changeHandler, receivedMessage, shareTokenId, shareTokenHkdfKey) {\n    this.onChange = _setChangeHandler(changeHandler)\n\n    this.items = {}\n    this.itemsPlaintextMetadata = {}\n    this.fileIds = {}\n\n    const compareItems = (a, b) => {\n      if (a.seqNo < b.seqNo || (a.seqNo === b.seqNo && a.operationIndex < b.operationIndex)) {\n        return -1\n      }\n      if (a.seqNo > b.seqNo || (a.seqNo === b.seqNo && a.operationIndex > b.operationIndex)) {\n        return 1\n      }\n      return 0\n    }\n\n    this.itemsIndex = new SortedArray([], compareItems)\n    this.unverifiedTransactions = []\n    this.lastSeqNo = 0\n    this.init = false\n    this.dbKey = null\n    this.receivedMessage = receivedMessage\n    this.usernamesByUserId = new Map()\n    this.attributionEnabled = false\n\n    this.shareTokenId = shareTokenId\n    this.shareTokenHkdfKey = shareTokenHkdfKey\n\n    // Queue that ensures 'ApplyTransactions' executes one at a time\n    this.applyTransactionsQueue = new Queue()\n\n    this.bundleChunks = {}\n  }\n\n  async applyTransactions(transactions, ownerId, dbId, dbNameHash) {\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i]\n      const seqNo = transaction.seqNo\n\n      // client must only apply transcations in sequence\n      if (seqNo !== this.lastSeqNo + 1) {\n        console.warn(`Client attempted to apply transaction with seq no ${seqNo} when last seq no is ${this.lastSeqNo}`)\n        continue\n      }\n\n      const transactionCode = await this.applyTransaction(this.dbKey, transaction, ownerId)\n      this.lastSeqNo = seqNo\n\n      for (let j = 0; j < this.unverifiedTransactions.length; j++) {\n        if (!this.unverifiedTransactions[j] || seqNo < this.unverifiedTransactions[j].getStartSeqNo()) {\n          continue\n        }\n        this.unverifiedTransactions[j].addTransaction(transactions[i], transactionCode)\n      }\n\n      if (this.init && transactionCode === 'Success') {\n        this.onChange(this.getItems())\n      }\n    }\n\n    if (!this.init) {\n      this.init = true // allows triggers and loaders to be called from within client's changeHandler on database load\n      this.dbId = dbId\n      this.dbNameHash = dbNameHash\n      this.onChange(this.getItems())\n      this.receivedMessage() // wait to resolve openDatabase() until changeHandler has received all data\n    }\n  }\n\n  async applyBundle(bundle, bundleSeqNo) {\n    // client must only apply bundle when opening state\n    if (this.lastSeqNo !== 0) {\n      console.warn(`Client attempted to apply bundle when last seq no is ${this.lastSeqNo}`)\n      return\n    }\n\n    for (let i = 0; i < bundle.itemsIndex.length; i++) {\n      const itemIndex = bundle.itemsIndex[i]\n      const itemId = bundle.itemsIndex[i].itemId\n      const item = bundle.items[i]\n      const itemsPlaintextMetadata = bundle.itemsPlaintextMetadata[i]\n\n      if (item.file && item.file.fileEncryptionKeyString) {\n        item.file.fileEncryptionKey = await crypto.aesGcm.getKeyFromKeyString(item.file.fileEncryptionKeyString)\n        this.fileIds[item.file.fileId] = itemId\n      }\n\n      this.items[itemId] = item\n      this.itemsPlaintextMetadata[itemId] = itemsPlaintextMetadata\n      this.itemsIndex.insert(itemIndex)\n    }\n\n    this.lastSeqNo = bundleSeqNo\n  }\n\n  async applyTransaction(key, transaction, ownerId) {\n    const seqNo = transaction.seqNo\n    const command = transaction.command\n\n    switch (command) {\n      case 'Insert': {\n        try {\n          const record = await crypto.aesGcm.decryptJson(key, transaction.record)\n          const itemId = record.id\n          const item = record.item\n          const createdBy = this.attributionFromTransaction(transaction)\n          const writeAccess = transaction.writeAccess\n\n          this.validateInsert(itemId)\n          return this.applyInsert(itemId, seqNo, item, createdBy, writeAccess)\n        } catch (transactionCode) {\n          return transactionCode\n        }\n      }\n\n      case 'Update': {\n        try {\n          const record = await crypto.aesGcm.decryptJson(key, transaction.record)\n          const itemId = record.id\n          const item = record.item\n          const updatedBy = this.attributionFromTransaction(transaction)\n          const __v = record.__v\n          const writeAccess = transaction.writeAccess\n\n          this.validateUpdate(itemId, __v, updatedBy, ownerId, writeAccess, 'updateItem')\n          return this.applyUpdate(itemId, item, __v, updatedBy, writeAccess)\n        } catch (transactionCode) {\n          return transactionCode\n        }\n      }\n\n      case 'Delete': {\n        try {\n          const record = await crypto.aesGcm.decryptJson(key, transaction.record)\n          const itemId = record.id\n          const deletedBy = this.attributionFromTransaction(transaction)\n          const __v = record.__v\n\n          this.validateUpdateOrDelete(itemId, __v, deletedBy, ownerId, 'deleteItem')\n          return this.applyDelete(itemId)\n        } catch (transactionCode) {\n          return transactionCode\n        }\n      }\n\n      case 'BatchTransaction': {\n        try {\n          const batch = transaction.operations\n          const attribution = this.attributionFromTransaction(transaction)\n          const recordPromises = []\n\n          for (const operation of batch) {\n            recordPromises.push(operation.record && crypto.aesGcm.decryptJson(key, operation.record))\n          }\n          const records = await Promise.all(recordPromises)\n\n          this.validateBatchTransaction(batch, records, attribution, ownerId)\n          return this.applyBatchTransaction(seqNo, batch, records, attribution)\n        } catch (transactionCode) {\n          return transactionCode\n        }\n      }\n\n      case 'UploadFile': {\n        try {\n          const fileEncryptionKeyRaw = await crypto.aesGcm.decrypt(key, base64.decode(transaction.fileEncryptionKey))\n          const fileEncryptionKey = await crypto.aesGcm.getKeyFromRawKey(fileEncryptionKeyRaw)\n          const fileEncryptionKeyString = await crypto.aesGcm.getKeyStringFromKey(fileEncryptionKey)\n          const fileMetadata = await crypto.aesGcm.decryptJson(fileEncryptionKey, transaction.fileMetadata)\n\n          const itemId = fileMetadata.itemId\n          const fileVersion = fileMetadata.__v\n          const { fileName, fileSize, fileType } = fileMetadata\n          const fileId = transaction.fileId\n          const fileUploadedBy = this.attributionFromTransaction(transaction)\n\n          this.validateUploadFile(itemId, fileVersion, fileUploadedBy, ownerId, 'uploadFile')\n          return this.applyUploadFile(itemId, fileUploadedBy, fileVersion, fileEncryptionKey, fileEncryptionKeyString, fileName, fileId, fileSize, fileType)\n        } catch (transactionCode) {\n          return transactionCode\n        }\n      }\n\n      case 'Rollback': {\n        // no-op\n        return\n      }\n\n      default: {\n        console.warn(`Unknown command: ${command}`)\n        return\n      }\n    }\n  }\n\n  attributionFromTransaction(transaction) {\n    if (!this.attributionEnabled) return undefined\n    return {\n      timestamp: transaction.timestamp,\n      userId: transaction.userId,\n    }\n  }\n\n  validateInsert(itemId) {\n    if (this.items[itemId]) {\n      throw new errors.ItemAlreadyExists\n    }\n  }\n\n  validateUpdate(itemId, __v, updatedBy, ownerId, writeAccess, command) {\n    this.validateUpdateOrDelete(itemId, __v, updatedBy, ownerId, command)\n\n    // writeAccess can only be set or removed by either the item creator or database owner\n    const { createdBy } = this.itemsPlaintextMetadata[itemId]\n\n    if (writeAccess || writeAccess === false) {\n      if (!createdBy) return // if no attribution on item set, can't set write access\n      const createdByUserId = createdBy.userId\n      const updatedByUserId = updatedBy.userId\n\n      if (createdByUserId !== updatedByUserId && updatedByUserId !== ownerId) {\n        throw new errors.WriteAccessParamNotAllowed\n      }\n    }\n  }\n\n  validateUpdateOrDelete(itemId, __v, attribution, ownerId, command) {\n    const item = this.items[itemId]\n    if (!item) throw new errors.ItemDoesNotExist\n\n    const currentVersion = this.getItemVersionNumber(itemId)\n    if (__v <= currentVersion) {\n      throw new errors.ItemUpdateConflict\n    }\n\n    this.validateAccessPermissions(itemId, attribution, ownerId, command)\n  }\n\n  validateUploadFile(itemId, __v, fileUploadedBy, ownerId, command) {\n    const item = this.items[itemId]\n    if (!item) throw new errors.ItemDoesNotExist\n\n    const currentVersion = this.getFileVersionNumber(itemId)\n\n    if (__v <= currentVersion) {\n      throw new errors.FileUploadConflict\n    }\n\n    this.validateAccessPermissions(itemId, fileUploadedBy, ownerId, command)\n  }\n\n  validateAccessPermissions(itemId, attribution, ownerId, command) {\n    const { createdBy, writeAccess } = this.itemsPlaintextMetadata[itemId]\n    if (createdBy && attribution && writeAccess) {\n      const createdByUserId = createdBy.userId\n      const modifiedByUserId = attribution.userId\n\n      let userIsAuthorized = false\n      const { onlyCreator, users } = writeAccess\n\n      if (modifiedByUserId === ownerId || modifiedByUserId === createdByUserId) {\n        userIsAuthorized = true\n      } else if (!onlyCreator && users) {\n        for (const { userId } of users) {\n          userIsAuthorized = modifiedByUserId === userId\n          if (userIsAuthorized) break\n        }\n      }\n\n      if (!userIsAuthorized) throw new errors.TransactionUnauthorized(command)\n    }\n  }\n\n  itemExists(itemId) {\n    return objectHasOwnProperty(this.items, itemId)\n  }\n\n  applyInsert(itemId, seqNo, record, createdBy, writeAccess, operationIndex) {\n    const item = { seqNo }\n    if (typeof operationIndex === 'number') item.operationIndex = operationIndex\n\n    this.items[itemId] = {\n      ...item,\n      record,\n      __v: 0\n    }\n    this.itemsPlaintextMetadata[itemId] = {\n      createdBy,\n      writeAccess,\n    }\n    this.itemsIndex.insert({ ...item, itemId })\n\n    if (writeAccess && writeAccess.users) {\n      for (const { userId, username } of writeAccess.users) {\n        this.usernamesByUserId.set(userId, username)\n      }\n    }\n\n    return success\n  }\n\n  applyUpdate(itemId, record, __v, updatedBy, writeAccess) {\n    this.items[itemId].record = record\n    this.items[itemId].__v = __v\n\n    this.itemsPlaintextMetadata[itemId].updatedBy = updatedBy\n\n    if (writeAccess === false) {\n      delete this.itemsPlaintextMetadata[itemId].writeAccess\n    } else if (writeAccess) {\n      this.itemsPlaintextMetadata[itemId].writeAccess = writeAccess\n\n      if (writeAccess.users) {\n        for (const { userId, username } of writeAccess.users) {\n          this.usernamesByUserId.set(userId, username)\n        }\n      }\n    }\n\n    return success\n  }\n\n  applyUploadFile(itemId, fileUploadedBy, __v, fileEncryptionKey, fileEncryptionKeyString, fileName, fileId, fileSize, fileType) {\n    const existingFile = this.items[itemId].file\n    if (existingFile) delete this.fileIds[existingFile.fileId]\n\n    this.items[itemId].file = {\n      fileName,\n      fileId,\n      fileSize,\n      fileType,\n      fileEncryptionKey,\n      fileEncryptionKeyString,\n      __v,\n    }\n    this.itemsPlaintextMetadata[itemId].fileUploadedBy = fileUploadedBy\n    this.fileIds[fileId] = itemId\n    return success\n  }\n\n  applyDelete(itemId) {\n    this.itemsIndex.remove(this.items[itemId])\n    delete this.items[itemId]\n    delete this.itemsPlaintextMetadata[itemId]\n    return success\n  }\n\n  validateBatchTransaction(batch, records, attribution, ownerId) {\n    const uniqueItemIds = {}\n\n    for (let i = 0; i < batch.length; i++) {\n      const operation = batch[i]\n      const { command, writeAccess } = operation\n\n      const itemId = records[i].id\n      const __v = records[i].__v\n\n      if (uniqueItemIds[itemId]) throw new errors.OperationsConflict\n      uniqueItemIds[itemId] = true\n\n      switch (command) {\n        case 'Insert':\n          this.validateInsert(itemId)\n          break\n\n        case 'Update':\n          this.validateUpdate(itemId, __v, attribution, ownerId, writeAccess, command)\n          break\n\n        case 'Delete':\n          this.validateUpdateOrDelete(itemId, __v, attribution, ownerId, command)\n          break\n      }\n    }\n  }\n\n  applyBatchTransaction(seqNo, batch, records, attribution) {\n    for (let i = 0; i < batch.length; i++) {\n      const operation = batch[i]\n\n      const itemId = records[i].id\n      const item = records[i].item\n      const __v = records[i].__v\n      const writeAccess = operation.writeAccess\n\n      switch (operation.command) {\n        case 'Insert':\n          this.applyInsert(itemId, seqNo, item, attribution, writeAccess, i)\n          break\n\n        case 'Update':\n          this.applyUpdate(itemId, item, __v, attribution, writeAccess)\n          break\n\n        case 'Delete':\n          this.applyDelete(itemId, __v)\n          break\n      }\n    }\n\n    return success\n  }\n\n  registerUnverifiedTransaction() {\n    const unverifiedTransaction = new UnverifiedTransaction(this.lastSeqNo)\n    const i = this.unverifiedTransactions.push(unverifiedTransaction)\n    unverifiedTransaction.setIndex(i - 1)\n    return unverifiedTransaction\n  }\n\n  unregisterUnverifiedTransaction(pendingTransaction) {\n    delete this.unverifiedTransactions[pendingTransaction.getIndex()]\n  }\n\n  getItems() {\n    const result = []\n    for (let i = 0; i < this.itemsIndex.array.length; i++) {\n      const itemId = this.itemsIndex.array[i].itemId\n      const record = this.items[itemId].record\n      const item = { itemId, item: record }\n\n      // set file metadata\n      if (this.items[itemId].file) {\n        const { fileId, fileName, fileSize } = this.items[itemId].file\n        item.fileId = fileId\n        item.fileName = fileName\n        item.fileSize = fileSize\n      }\n\n      // set attribution metadata\n      for (const prop of ['createdBy', 'updatedBy', 'fileUploadedBy']) {\n        if (this.itemsPlaintextMetadata[itemId][prop]) {\n          const { timestamp, userId } = this.itemsPlaintextMetadata[itemId][prop]\n          const attribution = { timestamp }\n          const username = this.usernamesByUserId.get(userId)\n          if (username == null) {\n            attribution.userDeleted = true\n          } else {\n            attribution.username = username\n          }\n          item[prop] = attribution\n        }\n      }\n\n      // set write access permissions\n      if (this.itemsPlaintextMetadata[itemId].writeAccess) {\n        const { onlyCreator, users } = this.itemsPlaintextMetadata[itemId].writeAccess\n        const writeAccess = {}\n        if (onlyCreator) writeAccess.onlyCreator = onlyCreator\n\n        if (users) {\n          writeAccess.users = []\n          for (const { userId } of users) {\n            const username = this.usernamesByUserId.get(userId)\n            if (username) writeAccess.users.push({ username })\n          }\n        }\n\n        item.writeAccess = writeAccess\n      }\n\n      result.push(item)\n    }\n    return result\n  }\n\n  getItemVersionNumber(itemId) {\n    return this.items[itemId].__v\n  }\n\n  getFileVersionNumber(itemId) {\n    return this.items[itemId].file && this.items[itemId].file.__v\n  }\n\n  async decryptShareTokenEncryptedDbKey(shareTokenEncryptedDbKey, shareTokenEncryptionKeySalt) {\n    const shareTokenEncryptionKey = await crypto.aesGcm.importKeyFromMaster(this.shareTokenHkdfKey, base64.decode(shareTokenEncryptionKeySalt))\n    const dbKeyString = await crypto.aesGcm.decryptString(shareTokenEncryptionKey, shareTokenEncryptedDbKey)\n    return dbKeyString\n  }\n}\n\nconst _setChangeHandler = (changeHandler) => {\n  return (items) => {\n    try {\n      changeHandler(items)\n    } catch (e) {\n      console.error('There was an error in your changeHandler.\\n\\n', e)\n    }\n  }\n}\n\nconst _idempotentOpenDatabase = (database, changeHandler, receivedMessage) => {\n  // safe to replace -- enables idempotent calls to openDatabase\n  database.onChange = _setChangeHandler(changeHandler)\n\n  // if 1 call succeeds, all idempotent calls succeed\n  const currentReceivedMessage = database.receivedMessage\n  database.receivedMessage = () => {\n    currentReceivedMessage()\n    receivedMessage()\n  }\n\n  // database is already open, can return successfully\n  if (database.init) {\n    database.onChange(database.getItems())\n    database.receivedMessage()\n    return true\n  }\n\n  return false\n}\n\nconst _getShareTokenIdFromShareToken = (shareTokenArrayBuffer) => {\n  const shareTokenIdArrayBuffer = shareTokenArrayBuffer.slice(0, UUID_CHAR_LENGTH)\n  const shareTokenId = arrayBufferToString(shareTokenIdArrayBuffer, true)\n  if (!shareTokenId || shareTokenId.length !== UUID_CHAR_LENGTH) throw new errors.ShareTokenInvalid\n  return shareTokenId\n}\n\nconst _getShareTokenIdAndShareTokenSeed = (shareTokenResult) => {\n  const shareTokenArrayBuffer = base64.decode(shareTokenResult)\n  const shareTokenId = _getShareTokenIdFromShareToken(shareTokenArrayBuffer)\n  const shareTokenSeed = shareTokenArrayBuffer.slice(UUID_CHAR_LENGTH)\n  return { shareTokenId, shareTokenSeed }\n}\n\nconst _openDatabaseByShareToken = async (shareToken, changeHandler, receivedMessage) => {\n  let shareTokenIdAndShareTokenSeed, shareTokenHkdfKey\n  try {\n    shareTokenIdAndShareTokenSeed = _getShareTokenIdAndShareTokenSeed(shareToken)\n    shareTokenHkdfKey = await crypto.hkdf.importHkdfKey(shareTokenIdAndShareTokenSeed.shareTokenSeed)\n  } catch {\n    throw new errors.ShareTokenInvalid\n  }\n  const { shareTokenId } = shareTokenIdAndShareTokenSeed\n\n  const { databaseId, validationMessage, signedValidationMessage } = await ws.authenticateShareToken(shareTokenId, shareTokenHkdfKey)\n  ws.state.shareTokenIdToDbId[shareTokenId] = databaseId\n\n  await _openDatabaseByDatabaseId(databaseId, changeHandler, receivedMessage, shareTokenId, shareTokenHkdfKey, validationMessage, signedValidationMessage)\n}\n\nconst _openDatabaseByDatabaseId = async (databaseId, changeHandler, receivedMessage, shareTokenId, shareTokenHkdfKey, validationMessage, signedValidationMessage) => {\n  const database = ws.state.databasesByDbId[databaseId]\n\n  if (!database) {\n    ws.state.databasesByDbId[databaseId] = new Database(changeHandler, receivedMessage, shareTokenId, shareTokenHkdfKey)\n  } else {\n    if (_idempotentOpenDatabase(database, changeHandler, receivedMessage)) return\n  }\n\n  const action = 'OpenDatabaseByDatabaseId'\n  const params = { databaseId, validationMessage, signedValidationMessage }\n  await ws.request(action, params)\n}\n\nconst _openDatabaseByNameHash = async (dbNameHash, newDatabaseParams, changeHandler, receivedMessage) => {\n  const database = ws.state.databases[dbNameHash]\n\n  if (!database) {\n    ws.state.databases[dbNameHash] = new Database(changeHandler, receivedMessage)\n  } else {\n    if (_idempotentOpenDatabase(database, changeHandler, receivedMessage)) return\n  }\n\n  const action = 'OpenDatabase'\n  const params = { dbNameHash, newDatabaseParams }\n  await ws.request(action, params)\n}\n\nconst _openDatabase = async (changeHandler, params) => {\n  try {\n    let receivedMessage\n    let timeout\n    const firstMessageFromWebSocket = new Promise((resolve, reject) => {\n      receivedMessage = resolve\n      timeout = setTimeout(() => reject(new Error('timeout')), TX_TIMEOUT)\n    })\n\n    const { dbNameHash, newDatabaseParams, databaseId, shareToken } = params\n    try {\n\n      if (dbNameHash) await _openDatabaseByNameHash(dbNameHash, newDatabaseParams, changeHandler, receivedMessage)\n      else if (databaseId) await _openDatabaseByDatabaseId(databaseId, changeHandler, receivedMessage)\n      else if (shareToken) await _openDatabaseByShareToken(shareToken, changeHandler, receivedMessage)\n\n      await firstMessageFromWebSocket\n    } catch (e) {\n      clearTimeout(timeout)\n\n      if (e.response && e.response.data) {\n        const data = e.response.data\n\n        if (data === 'Database already creating') {\n          throw new errors.DatabaseAlreadyOpening\n        } else if (data === 'Database is owned by user') {\n          if (databaseId) throw new errors.DatabaseIdNotAllowedForOwnDatabase\n          else if (shareToken) throw new errors.ShareTokenNotAllowedForOwnDatabase\n        } else if (data === 'Database key not found' || data === 'Database not found') {\n          throw new errors.DatabaseNotFound\n        }\n\n        switch (data.name) {\n          case 'SubscriptionNotFound':\n            throw new errors.SubscriptionNotFound\n          case 'SubscriptionInactive':\n            throw new errors.SubscriptionInactive(data.subscriptionStatus)\n          case 'TrialExpired':\n            throw new errors.TrialExpired\n        }\n\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n    _parseGenericErrors(e)\n    throw e\n  }\n}\n\nconst _createDatabase = async (dbName, encryptionMode) => {\n  const dbId = uuidv4()\n\n  const dbKey = await crypto.aesGcm.generateKey()\n  const dbKeyString = await crypto.aesGcm.getKeyStringFromKey(dbKey)\n\n  const [encryptedDbKey, encryptedDbName] = await Promise.all([\n    crypto.aesGcm.encryptString(ws.keys.encryptionKey, dbKeyString),\n    crypto.aesGcm.encryptString(dbKey, dbName)\n  ])\n\n  const newDatabaseParams = {\n    dbId,\n    encryptedDbKey,\n    encryptedDbName,\n    attribution: true,\n  }\n\n  if (encryptionMode === 'server-side') newDatabaseParams.plaintextDbKey = dbKeyString\n\n  // tie database to user's fingerprint at time of creation\n  newDatabaseParams.fingerprint = await _getMyFingerprint()\n\n  return newDatabaseParams\n}\n\nconst _validateEncryptionMode = (encryptionMode) => {\n  if (encryptionMode === 'server-side' && !config.isServerSideEncryptionModeAllowed()) {\n    throw new errors.ServerSideEncryptionNotEnabledInClient\n  }\n}\n\nconst _validateDbName = (dbName) => {\n  if (typeof dbName !== 'string') throw new errors.DatabaseNameMustBeString\n  if (dbName.length === 0) throw new errors.DatabaseNameCannotBeBlank\n  if (dbName.length > MAX_DB_NAME_CHAR_LENGTH) throw new errors.DatabaseNameTooLong(MAX_DB_NAME_CHAR_LENGTH)\n}\n\nconst _validateDbId = (dbId) => {\n  if (typeof dbId !== 'string') throw new errors.DatabaseIdMustBeString\n  if (dbId.length === 0) throw new errors.DatabaseIdCannotBeBlank\n  if (dbId.length !== UUID_CHAR_LENGTH) throw new errors.DatabaseIdInvalidLength(UUID_CHAR_LENGTH)\n}\n\nconst _validateDbInput = (params) => {\n  if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n\n  if (objectHasOwnProperty(params, 'databaseName')) {\n\n    _validateDbName(params.databaseName)\n    if (objectHasOwnProperty(params, 'databaseId')) throw new errors.DatabaseIdNotAllowed\n    if (objectHasOwnProperty(params, 'shareToken')) throw new errors.ShareTokenNotAllowed\n\n    // try to block usage of verified users database. If user works around this and modifies this database,\n    // they could mess up the database for themself.\n    if (!params.allowVerifiedUsersDatabase && params.databaseName === VERIFIED_USERS_DATABASE_NAME) {\n      throw new errors.DatabaseNameRestricted(VERIFIED_USERS_DATABASE_NAME)\n    }\n\n  } else if (objectHasOwnProperty(params, 'databaseId')) {\n\n    _validateDbId(params.databaseId)\n    if (objectHasOwnProperty(params, 'shareToken')) throw new errors.ShareTokenNotAllowed\n\n  } else if (objectHasOwnProperty(params, 'shareToken')) {\n    if (typeof params.shareToken !== 'string') throw new errors.ShareTokenInvalid\n  } else {\n    throw new errors.DatabaseNameMissing\n  }\n\n  if (objectHasOwnProperty(params, 'encryptionMode') && !ENCRYPTION_MODE_OPTIONS[params.encryptionMode]) {\n    throw new errors.EncryptionModeNotValid(ENCRYPTION_MODE_OPTIONS)\n  }\n\n  _checkSignedInState()\n}\n\nconst openDatabase = async (params) => {\n  try {\n    _validateDbInput(params)\n    if (!objectHasOwnProperty(params, 'changeHandler')) throw new errors.ChangeHandlerMissing\n\n    const { databaseName, databaseId, shareToken, changeHandler, encryptionMode = ws.encryptionMode } = params\n\n    if (typeof changeHandler !== 'function') throw new errors.ChangeHandlerMustBeFunction\n    _validateEncryptionMode(encryptionMode)\n\n    if (databaseName) {\n      const dbNameHash = encryptionMode === 'server-side'\n        ? databaseName // Hashing is meant to keep it secret, no need to hash if encryption mode is server-side\n        : (ws.state.dbNameToHash[databaseName] || await crypto.hmac.signString(ws.keys.hmacKey, databaseName))\n\n      if (encryptionMode === 'end-to-end') ws.state.dbNameToHash[databaseName] = dbNameHash // eslint-disable-line require-atomic-updates\n\n      const newDatabaseParams = await _createDatabase(databaseName, encryptionMode)\n\n      const openByDbNameHashParams = { dbNameHash, newDatabaseParams }\n      await _openDatabase(changeHandler, openByDbNameHashParams)\n    } else if (databaseId) {\n      const openByDbIdParams = { databaseId }\n      await _openDatabase(changeHandler, openByDbIdParams)\n    } else {\n      const openByShareToken = { shareToken }\n      await _openDatabase(changeHandler, openByShareToken)\n    }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseAlreadyOpening':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'DatabaseIdNotAllowedForOwnDatabase':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'ShareTokenNotFound':\n      case 'ShareTokenNotAllowedForOwnDatabase':\n      case 'DatabaseNotFound':\n      case 'ChangeHandlerMissing':\n      case 'ChangeHandlerMustBeFunction':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'SubscriptionNotFound':\n      case 'SubscriptionInactive':\n      case 'TrialExpired':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst getOpenDb = (dbName, databaseId, shareToken, encryptionMode = 'end-to-end') => {\n  _validateEncryptionMode(encryptionMode)\n\n  const shareTokenId = shareToken && _getShareTokenIdFromShareToken(base64.decode(shareToken))\n\n  const dbNameHash = encryptionMode === 'server-side' ? dbName : ws.state.dbNameToHash[dbName]\n  const database = dbName\n    ? ws.state.databases[dbNameHash]\n    : ws.state.databasesByDbId[databaseId || ws.state.shareTokenIdToDbId[shareTokenId]]\n\n  if (!database || !database.init) throw new errors.DatabaseNotOpen\n  return database\n}\n\nconst insertItem = async (params) => {\n  try {\n    _validateDbInput(params)\n\n    const database = getOpenDb(params.databaseName, params.databaseId, params.shareToken, params.encryptionMode || ws.encryptionMode)\n\n    const action = 'Insert'\n    const insertParams = await _buildInsertParams(database, params)\n\n    await postTransaction(database, action, insertParams)\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'ItemIdMustBeString':\n      case 'ItemIdCannotBeBlank':\n      case 'ItemIdTooLong':\n      case 'ItemMissing':\n      case 'ItemInvalid':\n      case 'ItemTooLarge':\n      case 'ItemAlreadyExists':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _buildInsertParams = async (database, params) => {\n  if (!objectHasOwnProperty(params, 'item')) throw new errors.ItemMissing\n\n  const { item, itemId, writeAccess } = params\n\n  if (objectHasOwnProperty(params, 'itemId')) {\n    if (typeof itemId !== 'string') throw new errors.ItemIdMustBeString\n    if (itemId.length === 0) throw new errors.ItemIdCannotBeBlank\n    if (itemId.length > MAX_ITEM_ID_CHAR_LENGTH) throw new errors.ItemIdTooLong(MAX_ITEM_ID_CHAR_LENGTH)\n  }\n\n  const itemString = JSON.stringify(item)\n  if (!itemString) throw new errors.ItemInvalid\n  if (byteSizeOfString(itemString) > MAX_ITEM_BYTES) throw new errors.ItemTooLarge(MAX_ITEM_KB)\n\n  const id = itemId || uuidv4()\n\n  const itemKey = await crypto.hmac.signString(ws.keys.hmacKey, id)\n  const itemRecord = { id, item }\n  const encryptedItem = await crypto.aesGcm.encryptJson(database.dbKey, itemRecord)\n\n  return { itemKey, encryptedItem, writeAccess }\n}\n\nconst updateItem = async (params) => {\n  try {\n    _validateDbInput(params)\n\n    const database = getOpenDb(params.databaseName, params.databaseId, params.shareToken, params.encryptionMode || ws.encryptionMode)\n\n    const action = 'Update'\n    const updateParams = await _buildUpdateParams(database, params)\n\n    await postTransaction(database, action, updateParams)\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'ItemIdMissing':\n      case 'ItemIdMustBeString':\n      case 'ItemIdCannotBeBlank':\n      case 'ItemIdTooLong':\n      case 'ItemMissing':\n      case 'ItemInvalid':\n      case 'ItemTooLarge':\n      case 'ItemDoesNotExist':\n      case 'ItemUpdateConflict':\n      case 'WriteAccessParamNotAllowed':\n      case 'TransactionUnauthorized':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _buildUpdateParams = async (database, params) => {\n  if (!objectHasOwnProperty(params, 'item')) throw new errors.ItemMissing\n  if (!objectHasOwnProperty(params, 'itemId')) throw new errors.ItemIdMissing\n\n  if (!params.writeAccess && objectHasOwnProperty(params, 'writeAccess')) params.writeAccess = false // marks writeAccess for deletion\n\n  const { item, itemId, writeAccess } = params\n\n  if (typeof itemId !== 'string') throw new errors.ItemIdMustBeString\n  if (itemId.length === 0) throw new errors.ItemIdCannotBeBlank\n  if (itemId.length > MAX_ITEM_ID_CHAR_LENGTH) throw new errors.ItemIdTooLong(MAX_ITEM_ID_CHAR_LENGTH)\n\n  if (!database.itemExists(itemId)) throw new errors.ItemDoesNotExist\n\n  const itemString = JSON.stringify(item)\n  if (!itemString) throw new errors.ItemInvalid\n  if (byteSizeOfString(itemString) > MAX_ITEM_BYTES) throw new errors.ItemTooLarge(MAX_ITEM_KB)\n\n  const currentVersion = database.getItemVersionNumber(itemId)\n  const itemKey = await crypto.hmac.signString(ws.keys.hmacKey, itemId)\n  const itemRecord = { id: itemId, item, __v: currentVersion + 1 }\n  const encryptedItem = await crypto.aesGcm.encryptJson(database.dbKey, itemRecord)\n\n  return { itemKey, encryptedItem, writeAccess }\n}\n\nconst deleteItem = async (params) => {\n  try {\n    _validateDbInput(params)\n\n    const database = getOpenDb(params.databaseName, params.databaseId, params.shareToken, params.encryptionMode || ws.encryptionMode)\n\n    const action = 'Delete'\n    const deleteParams = await _buildDeleteParams(database, params)\n\n    await postTransaction(database, action, deleteParams)\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'ItemIdMissing':\n      case 'ItemIdMustBeString':\n      case 'ItemIdCannotBeBlank':\n      case 'ItemIdTooLong':\n      case 'ItemDoesNotExist':\n      case 'ItemUpdateConflict':\n      case 'TransactionUnauthorized':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _buildDeleteParams = async (database, params) => {\n  if (!objectHasOwnProperty(params, 'itemId')) throw new errors.ItemIdMissing\n\n  const { itemId } = params\n\n  if (typeof itemId !== 'string') throw new errors.ItemIdMustBeString\n  if (itemId.length === 0) throw new errors.ItemIdCannotBeBlank\n  if (itemId.length > MAX_ITEM_ID_CHAR_LENGTH) throw new errors.ItemIdTooLong(MAX_ITEM_ID_CHAR_LENGTH)\n\n  if (!database.itemExists(itemId)) throw new errors.ItemDoesNotExist\n\n  const currentVersion = database.getItemVersionNumber(itemId)\n  const itemKey = await crypto.hmac.signString(ws.keys.hmacKey, itemId)\n  const itemRecord = { id: itemId, __v: currentVersion + 1 }\n  const encryptedItem = await crypto.aesGcm.encryptJson(database.dbKey, itemRecord)\n\n  return { itemKey, encryptedItem }\n}\n\nconst putTransaction = async (params) => {\n  try {\n    _validateDbInput(params)\n    if (!objectHasOwnProperty(params, 'operations')) throw new errors.OperationsMissing\n\n    const { databaseName, databaseId, shareToken, operations, encryptionMode = ws.encryptionMode } = params\n\n    if (!Array.isArray(operations)) throw new errors.OperationsMustBeArray\n\n    const database = getOpenDb(databaseName, databaseId, shareToken, encryptionMode)\n\n    const action = 'BatchTransaction'\n\n    const operationParamsPromises = await Promise.all(operations.map(operation => {\n      const command = operation.command\n\n      switch (command) {\n        case 'Insert': {\n          return _buildInsertParams(database, operation)\n        }\n\n        case 'Update': {\n          return _buildUpdateParams(database, operation)\n        }\n\n        case 'Delete': {\n          return _buildDeleteParams(database, operation)\n        }\n\n        default: throw new errors.CommandNotRecognized(command)\n      }\n    }))\n    const operationParamsPromiseResults = await Promise.all(operationParamsPromises)\n\n    const operationParams = {\n      operations: operations.map((operation, i) => ({\n        command: operation.command,\n        ...operationParamsPromiseResults[i]\n      }))\n    }\n\n    try {\n      await postTransaction(database, action, operationParams)\n    } catch (e) {\n      if (e.response && e.response.data.error === 'OperationsExceedLimit') {\n        throw new errors.OperationsExceedLimit(e.response.data.limit)\n      }\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'OperationsMissing':\n      case 'OperationsMustBeArray':\n      case 'OperationsConflict':\n      case 'OperationsExceedLimit':\n      case 'CommandNotRecognized':\n      case 'ItemIdMissing':\n      case 'ItemIdMustBeString':\n      case 'ItemIdCannotBeBlank':\n      case 'ItemIdTooLong':\n      case 'ItemMissing':\n      case 'ItemInvalid':\n      case 'ItemTooLarge':\n      case 'ItemAlreadyExists':\n      case 'ItemDoesNotExist':\n      case 'ItemUpdateConflict':\n      case 'WriteAccessParamNotAllowed':\n      case 'TransactionUnauthorized':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst postTransaction = async (database, action, params) => {\n  try {\n    const pendingTx = database.registerUnverifiedTransaction()\n\n    const paramsWithDbData = {\n      ...params,\n      dbId: database.dbId,\n      dbNameHash: database.dbNameHash\n    }\n\n    const response = await ws.request(action, paramsWithDbData)\n    const seqNo = response.data.sequenceNo\n\n    await pendingTx.getResult(seqNo)\n\n    database.unregisterUnverifiedTransaction(pendingTx)\n\n    return seqNo\n  } catch (e) {\n    _parseGenericErrors(e)\n\n    if (e.response) {\n      if (e.response.data.name === 'DatabaseIsReadOnly') {\n        throw new errors.DatabaseIsReadOnly\n      } else if (e.response.data.message === 'UserNotFound') {\n        throw new errors.UserNotFound(e.response.data.username)\n      }\n    }\n\n    throw e\n  }\n}\n\nconst _completeFileUpload = async (database, fileId, itemKey, encryptedFileMetadata, encryptedFileEncryptionKey) => {\n  const params = {\n    dbId: database.dbId,\n    fileId,\n    itemKey,\n    fileMetadata: encryptedFileMetadata,\n    fileEncryptionKey: base64.encode(encryptedFileEncryptionKey)\n  }\n\n  const action = 'CompleteFileUpload'\n  await postTransaction(database, action, params)\n}\n\nconst _readBlob = async (blob) => {\n  const reader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    reader.onload = (e) => {\n      if (!e.target.error) {\n        resolve(e.target.result)\n      } else {\n        reject(e.target.error)\n      }\n    }\n\n    reader.readAsArrayBuffer(blob)\n  })\n}\n\nconst _uploadChunkRequest = async (request, bytesTransferredObject, progressHandler, chunkSize) => {\n  await request\n  bytesTransferredObject.bytesTransferred += chunkSize\n  if (progressHandler) progressHandler({ ...bytesTransferredObject })\n}\n\nconst _uploadChunk = async (batch, chunk, dbId, fileId, fileEncryptionKey, chunkNumber, bytesTransferredObject, progressHandler) => {\n  const plaintextChunk = await _readBlob(chunk)\n\n  // encrypt each chunk with new encryption key to maintain lower usage of file encryption key\n  const [chunkEncryptionKey, encryptedChunkEncryptionKey] = await crypto.aesGcm.generateAndEncryptKeyEncryptionKey(fileEncryptionKey)\n  const encryptedChunk = await crypto.aesGcm.encrypt(chunkEncryptionKey, plaintextChunk)\n\n  const uploadChunkParams = {\n    dbId,\n    chunkNumber,\n    fileId,\n\n    // arrayBufferToString takes up less space than base64 encoding. Uint8Array format required so that encrypted\n    // chunks that are odd number sized get converted to string properly\n    chunk: arrayBufferToString(new Uint8Array(encryptedChunk)),\n    chunkEncryptionKey: arrayBufferToString(new Uint8Array(encryptedChunkEncryptionKey)),\n  }\n\n  // queue UploadFileChunk request into batch of requests\n  const action = 'UploadFileChunk'\n\n  const uploadChunkRequest = _uploadChunkRequest(ws.request(action, uploadChunkParams), bytesTransferredObject, progressHandler, chunk.size)\n\n  batch.push(uploadChunkRequest)\n\n  // wait for batch of UploadFileChunk requests to finish before moving on to upload the next batch of chunks\n  if (batch.length === FILE_CHUNKS_PER_BATCH) {\n    await Promise.all(batch)\n    batch.length = 0\n  }\n}\n\nconst _buildFileMetadata = async (params, database) => {\n  if (!objectHasOwnProperty(params, 'itemId')) throw new errors.ItemIdMissing\n  if (!objectHasOwnProperty(params, 'file')) throw new errors.FileMissing\n\n  const { itemId, file } = params\n\n  if (typeof itemId !== 'string') throw new errors.ItemIdMustBeString\n  if (itemId.length === 0) throw new errors.ItemIdCannotBeBlank\n  if (itemId.length > MAX_ITEM_ID_CHAR_LENGTH) throw new errors.ItemIdTooLong(MAX_ITEM_ID_CHAR_LENGTH)\n\n  if (!database.itemExists(itemId)) throw new errors.ItemDoesNotExist\n\n  if (!(file instanceof File)) throw new errors.FileMustBeFile\n  if (file.size === 0) throw new errors.FileCannotBeEmpty\n\n  const itemKey = await crypto.hmac.signString(ws.keys.hmacKey, itemId)\n  const currentVersion = database.getFileVersionNumber(itemId)\n  const fileMetadata = {\n    itemId,\n    __v: currentVersion === undefined ? 0 : currentVersion + 1,\n    fileName: file.name,\n    fileSize: file.size,\n    fileType: file.type,\n  }\n  return { itemKey, fileMetadata }\n}\n\nconst _validateUploadFile = (params) => {\n  _validateDbInput(params)\n  if (objectHasOwnProperty(params, 'progressHandler') && typeof params.progressHandler !== 'function') {\n    throw new errors.ProgressHandlerMustBeFunction\n  }\n}\n\nconst uploadFile = async (params) => {\n  try {\n    _validateUploadFile(params)\n\n    const database = getOpenDb(params.databaseName, params.databaseId, params.shareToken, params.encryptionMode || ws.encryptionMode)\n    const { dbId } = database\n\n    try {\n      const { itemKey, fileMetadata } = await _buildFileMetadata(params, database)\n\n      // generate a new key particular to this file to maintain lower usage of dbKey\n      const [fileEncryptionKey, encryptedFileEncryptionKey] = await crypto.aesGcm.generateAndEncryptKeyEncryptionKey(database.dbKey)\n      const encryptedFileMetadata = await crypto.aesGcm.encryptJson(fileEncryptionKey, fileMetadata)\n\n      // server generates unique file identifier\n      const { data: { fileId } } = await ws.request('GenerateFileId', { dbId: database.dbId })\n\n      // upload file in chunks of size FILE_CHUNK_SIZE\n      const file = params.file\n      let position = 0\n      let chunkNumber = 0\n      let batch = [] // will use this to send chunks to server in batches of FILE_CHUNKS_PER_BATCH\n      const bytesTransferredObject = {\n        bytesTransferred: 0\n      }\n\n      while (position < file.size) {\n        // read a chunk at a time to keep memory overhead low\n        const chunk = file.slice(position, position + FILE_CHUNK_SIZE)\n        await _uploadChunk(batch, chunk, dbId, fileId, fileEncryptionKey, chunkNumber, bytesTransferredObject, params.progressHandler)\n\n        chunkNumber += 1\n        position += FILE_CHUNK_SIZE\n      }\n\n      await Promise.all(batch)\n      await _completeFileUpload(database, fileId, itemKey, encryptedFileMetadata, encryptedFileEncryptionKey)\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response && e.response.data === 'DatabaseIsReadOnly') {\n        throw new errors.DatabaseIsReadOnly\n      }\n\n      throw e\n    }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'ItemIdMissing':\n      case 'ItemIdMustBeString':\n      case 'ItemIdCannotBeBlank':\n      case 'ItemIdTooLong':\n      case 'ItemDoesNotExist':\n      case 'TransactionUnauthorized':\n      case 'FileMustBeFile':\n      case 'FileCannotBeEmpty':\n      case 'FileMissing':\n      case 'FileUploadConflict':\n      case 'ProgressHandlerMustBeFunction':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _getChunk = async (dbId, fileId, chunkNumber, fileEncryptionKey) => {\n  try {\n    const action = 'GetChunk'\n    const params = {\n      dbId,\n      fileId,\n      chunkNumber,\n    }\n    const response = await ws.request(action, params)\n    const data = response.data\n\n    const chunkRawBuffer = new Uint8Array(new Uint16Array(stringToArrayBuffer(data.chunk))).buffer\n    const chunkEncryptionKeyRawBuffer = new Uint8Array(new Uint16Array(stringToArrayBuffer(data.chunkEncryptionKey))).buffer\n\n    const chunkEncryptionKeyRaw = await crypto.aesGcm.decrypt(fileEncryptionKey, chunkEncryptionKeyRawBuffer)\n    const chunkEncryptionKey = await crypto.aesGcm.getKeyFromRawKey(chunkEncryptionKeyRaw)\n\n    const chunk = await crypto.aesGcm.decrypt(chunkEncryptionKey, chunkRawBuffer)\n    return chunk\n  } catch (e) {\n    _parseGenericErrors(e)\n    throw e\n  }\n}\n\nconst _getByteRange = async (dbId, fileId, fileEncryptionKey, range) => {\n  const { start, end } = range\n\n  const chunks = []\n  const startChunkNumber = Math.floor(start / FILE_CHUNK_SIZE)\n  const endChunkNumber = Math.floor(end / FILE_CHUNK_SIZE) - (end % FILE_CHUNK_SIZE === 0 ? 1 : 0)\n\n  let chunkNumber = startChunkNumber\n  while (chunkNumber <= endChunkNumber) {\n    let chunk = await _getChunk(dbId, fileId, chunkNumber, fileEncryptionKey)\n\n    if (chunkNumber === startChunkNumber && chunkNumber === endChunkNumber && end % FILE_CHUNK_SIZE) {\n      chunk = chunk.slice(start % FILE_CHUNK_SIZE, end % FILE_CHUNK_SIZE)\n    } else if (chunkNumber === startChunkNumber) {\n      chunk = chunk.slice(start % FILE_CHUNK_SIZE)\n    } else if (chunkNumber === endChunkNumber && end % FILE_CHUNK_SIZE) {\n      chunk = chunk.slice(0, end % FILE_CHUNK_SIZE)\n    }\n\n    chunks.push(chunk)\n    chunkNumber += 1\n  }\n\n  return chunks\n}\n\nconst _getFile = async (dbId, fileId, fileEncryptionKey, fileSize) => {\n  const chunks = []\n  let chunkNumber = 0\n\n  const finalChunkNumber = fileSize < FILE_CHUNK_SIZE\n    ? 0\n    : Math.floor(fileSize / FILE_CHUNK_SIZE) - (fileSize % FILE_CHUNK_SIZE === 0 ? 1 : 0)\n\n  while (chunkNumber <= finalChunkNumber) {\n    const chunk = await _getChunk(dbId, fileId, chunkNumber, fileEncryptionKey)\n    chunks.push(chunk)\n    chunkNumber += 1\n  }\n\n  return chunks\n}\n\nconst _validateGetFileParams = (params) => {\n  _validateDbInput(params)\n\n  if (!objectHasOwnProperty(params, 'fileId')) throw new errors.FileIdMissing\n\n  const { fileId, range } = params\n\n  if (typeof fileId !== 'string') throw new errors.FileIdMustBeString\n  if (fileId.length === 0) throw new errors.FileIdCannotBeBlank\n  if (fileId.length > MAX_ITEM_ID_CHAR_LENGTH) throw new errors.FileIdTooLong(MAX_ITEM_ID_CHAR_LENGTH)\n\n  if (objectHasOwnProperty(params, 'range')) {\n    if (typeof range !== 'object') throw new errors.RangeMustBeObject\n\n    if (!objectHasOwnProperty(range, 'start')) throw new errors.RangeMissingStart\n    if (!objectHasOwnProperty(range, 'end')) throw new errors.RangeMissingEnd\n\n    const { start, end } = range\n\n    if (typeof start !== 'number') throw new errors.RangeStartMustBeNumber\n    if (typeof end !== 'number') throw new errors.RangeEndMustBeNumber\n\n    if (start < 0) throw new errors.RangeStartMustBeGreaterThanZero\n    if (end <= start) throw new errors.RangeEndMustBeGreaterThanRangeStart\n  }\n}\n\nconst getFile = async (params) => {\n  try {\n    _validateGetFileParams(params)\n\n    const database = getOpenDb(params.databaseName, params.databaseId, params.shareToken, params.encryptionMode || ws.encryptionMode)\n    const { dbId } = database\n    const { fileId, range } = params\n\n    const itemId = database.fileIds[fileId]\n    const item = database.items[itemId]\n\n    if (!item || !item.file) throw new errors.FileNotFound\n\n    const { file: { fileName, fileSize, fileType, fileEncryptionKey } } = item\n\n    if (range && range.end > fileSize) throw new errors.RangeEndMustBeLessThanFileSize\n\n    const chunks = range\n      ? await _getByteRange(dbId, fileId, fileEncryptionKey, range)\n      : await _getFile(dbId, fileId, fileEncryptionKey, fileSize)\n\n    return {\n      file: new File(chunks, fileName, { type: fileType })\n    }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNotOpen':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'ShareTokenInvalid':\n      case 'DatabaseIsReadOnly':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'FileIdMissing':\n      case 'FileIdMustBeString':\n      case 'FileIdCannotBeBlank':\n      case 'FileIdTooLong':\n      case 'FileNotFound':\n      case 'RangeMustBeObject':\n      case 'RangeMissingStart':\n      case 'RangeMissingEnd':\n      case 'RangeStartMustBeNumber':\n      case 'RangeEndMustBeNumber':\n      case 'RangeStartMustBeGreaterThanZero':\n      case 'RangeEndMustBeGreaterThanRangeStart':\n      case 'RangeEndMustBeLessThanFileSize':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n\n  }\n}\n\nconst _verifyUsersParent = async (dbKey, verifiedUsers, databaseUser) => {\n  const { username, senderUsername, verificationValues } = databaseUser\n  const { sentSignature, receivedSignature, senderEcdsaPublicKey } = verificationValues\n\n  const verifiedFingerprint = verifiedUsers[username] && verifiedUsers[username].record.fingerprint\n\n  const parentRawEcdsaPublicKey = base64.decode(senderEcdsaPublicKey)\n  const parentFingerprint = (verifiedUsers[senderUsername] && verifiedUsers[senderUsername].record.fingerprint)\n    || await _getFingerprint(parentRawEcdsaPublicKey)\n  const parentEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(parentRawEcdsaPublicKey)\n\n  // verify parent's claim that sent the dbKey to user\n  const expectedSentSignature = await _signFingerprintWithDbKey(dbKey, verifiedFingerprint)\n  const verifiedParentSent = await crypto.ecdsa.verifyString(parentEcdsaPublicKey, sentSignature, expectedSentSignature)\n\n  // verify user's claim that received the dbKey from parent\n  const recipientEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(base64.decode(verificationValues.recipientEcdsaPublicKey))\n  const expectedReceivedSignature = await _signFingerprintWithDbKey(dbKey, parentFingerprint)\n  const verifiedReceivedFromParent = await crypto.ecdsa.verifyString(recipientEcdsaPublicKey, receivedSignature, expectedReceivedSignature)\n\n  return verifiedParentSent && verifiedReceivedFromParent\n}\n\nconst _verifyReceivedDatabaseFromUser = async (dbKey, verifiedFingerprint, myFingerprint, myEcdsaPublicKey, verificationValues) => {\n  const { mySentSignature, myReceivedSignature } = verificationValues\n\n  // verify my claim that I received dbKey from this user\n  const expectedReceivedSignature = await _signFingerprintWithDbKey(dbKey, verifiedFingerprint)\n  const verifiedReceived = await crypto.ecdsa.verifyString(myEcdsaPublicKey, myReceivedSignature, expectedReceivedSignature)\n\n  if (!verifiedReceived) return verifiedReceived\n\n  // verify user's claim that sent dbKey to me\n  const expectedSentSignature = await _signFingerprintWithDbKey(dbKey, myFingerprint)\n  const senderEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(base64.decode(verificationValues.mySenderEcdsaPublicKey))\n  const verifiedSent = await crypto.ecdsa.verifyString(senderEcdsaPublicKey, mySentSignature, expectedSentSignature)\n\n  return verifiedSent && verifiedReceived\n}\n\nconst _verifySentDatabaseToUser = async (dbKey, verifiedFingerprint, myFingerprint, myEcdsaPublicKey, verificationValues) => {\n  const { sentSignature, receivedSignature } = verificationValues\n\n  // verify my claim that I sent dbKey to this user\n  const expectedSentSignature = await _signFingerprintWithDbKey(dbKey, verifiedFingerprint)\n  const verifiedSent = await crypto.ecdsa.verifyString(myEcdsaPublicKey, sentSignature, expectedSentSignature)\n\n  if (!verifiedSent) return verifiedSent\n\n  // verify user's claim that received dbKey from me\n  const expectedReceivedSignature = await _signFingerprintWithDbKey(dbKey, myFingerprint)\n  const recipientEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(base64.decode(verificationValues.recipientEcdsaPublicKey))\n  const verifiedReceived = await crypto.ecdsa.verifyString(recipientEcdsaPublicKey, receivedSignature, expectedReceivedSignature)\n\n  return verifiedSent && verifiedReceived\n}\n\nconst _buildDatabaseUserResult = async (dbKey, databaseUsers, verifiedUsers, myUsername, mySenderUsername) => {\n  const myEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromPrivateKey(ws.keys.ecdsaPrivateKey)\n  const myFingerprint = await _getMyFingerprint()\n\n  // iterate over all database users to verify each user individually\n  for (let i = 0; i < databaseUsers.length; i++) {\n    const databaseUser = databaseUsers[i]\n    const { username, isOwner, senderUsername, verificationValues } = databaseUser\n\n    try {\n      const verifiedFingerprint = verifiedUsers[username] && verifiedUsers[username].record.fingerprint\n\n      const sentDatabaseToUser = verificationValues.isChild\n      const receivedDatabaseFromUser = mySenderUsername === username\n\n      if (verifiedFingerprint) {\n        if (sentDatabaseToUser) {\n          databaseUsers[i].verified = await _verifySentDatabaseToUser(dbKey, verifiedFingerprint, myFingerprint, myEcdsaPublicKey, verificationValues)\n        } else if (receivedDatabaseFromUser) {\n          const verifiedReceivedDatabaseFromUser = await _verifyReceivedDatabaseFromUser(dbKey, verifiedFingerprint, myFingerprint, myEcdsaPublicKey, verificationValues)\n\n          // verify user's relationship to parent if has a parent\n          if (verifiedReceivedDatabaseFromUser && senderUsername) {\n            const verifiedGrandparent = await _verifyUsersParent(dbKey, verifiedUsers, databaseUser)\n            databaseUsers[i].verified = verifiedGrandparent\n          } else {\n            databaseUsers[i].verified = verifiedReceivedDatabaseFromUser\n          }\n\n        } else if (!isOwner) {\n          // verify unrelated user's parent sent dbKey to user and user received dbKey from their parent\n          const verifiedUsersParent = await _verifyUsersParent(dbKey, verifiedUsers, databaseUser)\n          databaseUsers[i].verified = verifiedUsersParent\n        } else {\n          // must be an owner that is not my child or parent, and owner is automatically verified\n          databaseUsers[i].verified = isOwner\n        }\n      }\n    } catch {\n      // continue without setting verified boolean\n    }\n\n    // \"receivedFromUsername\" is easier to understand to end developer\n    delete databaseUsers[i].senderUsername\n    if (!isOwner) {\n      if (verificationValues && verificationValues.isChild) databaseUsers[i].receivedFromUsername = myUsername\n      else if (senderUsername) databaseUsers[i].receivedFromUsername = senderUsername\n    }\n\n    // these values are not useful to user\n    delete databaseUsers[i].verificationValues\n  }\n\n  return databaseUsers\n}\n\nconst _databaseHasOwner = (databaseUsers) => {\n  for (let i = 0; i < databaseUsers.length; i++) {\n    const user = databaseUsers[i]\n    if (user.isOwner) return true\n  }\n\n  return false\n}\n\nconst _getDatabaseUsers = async (databaseId, databaseNameHash, dbKey, verifiedUsers, username, senderUsername) => {\n  const users = []\n  const action = 'GetDatabaseUsers'\n  const params = { databaseId, databaseNameHash }\n  let databaseUsersResponse = await ws.request(action, params)\n\n  users.push(...await _buildDatabaseUserResult(dbKey, databaseUsersResponse.data.users, verifiedUsers, username, senderUsername))\n\n  while (databaseUsersResponse.data.nextPageTokenLessThanUserId || databaseUsersResponse.data.nextPageTokenMoreThanUserId) {\n    params.nextPageTokenLessThanUserId = databaseUsersResponse.data.nextPageTokenLessThanUserId\n    params.nextPageTokenMoreThanUserId = databaseUsersResponse.data.nextPageTokenMoreThanUserId\n    databaseUsersResponse = await ws.request(action, params)\n    users.push(...await _buildDatabaseUserResult(dbKey, databaseUsersResponse.data.users, verifiedUsers, username, senderUsername))\n  }\n\n  return users\n}\n\nconst _buildDatabaseResult = async (db, encryptionKey, ecdhPrivateKey, verifiedUsers, username) => {\n  const { databaseId, databaseNameHash, isOwner, readOnly, resharingAllowed, senderUsername } = db\n\n  let dbKey, databaseName\n  if (db.encryptedDbKey || db.plaintextDbKey) {\n    // user must already have access to database\n    const dbKeyString = db.plaintextDbKey || await crypto.aesGcm.decryptString(encryptionKey, db.encryptedDbKey)\n    dbKey = await crypto.aesGcm.getKeyFromKeyString(dbKeyString)\n    databaseName = await crypto.aesGcm.decryptString(dbKey, db.databaseName)\n\n    // don't expose the user's own verified users database to user -- it's used internally\n    if (isOwner && databaseName === VERIFIED_USERS_DATABASE_NAME) return null\n  } else if (db.wrappedDbKey) {\n    // user using userbase-js v2.0.0 shared with user using userbase-js >= v2.0.1. Updated client\n    // cannot receive access to databases shared via userbase-js v2.0.0\n    return null\n  } else {\n    // user is seeing the database for the first time\n    let senderRawEcdsaPublicKey\n    try {\n      const { ephemeralPublicKey, signedEphemeralPublicKey, sharedEncryptedDbKey } = db\n\n      // verify sender signed the ephemeral public key\n      senderRawEcdsaPublicKey = base64.decode(db.senderEcdsaPublicKey)\n      const senderEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(senderRawEcdsaPublicKey)\n      const senderSignedEphemeralPublicKey = await crypto.ecdsa.verify(senderEcdsaPublicKey, base64.decode(signedEphemeralPublicKey), base64.decode(ephemeralPublicKey))\n      if (!senderSignedEphemeralPublicKey) throw new errors.ServiceUnavailable\n\n      // compute shared key encryption key with other user and decrypt database encryption key\n      const senderEphemeralEcdhPublicKey = await crypto.ecdh.getPublicKeyFromRawPublicKey(base64.decode(ephemeralPublicKey))\n      const sharedKeyEncryptionKey = await crypto.ecdh.computeSharedKeyEncryptionKey(senderEphemeralEcdhPublicKey, ecdhPrivateKey)\n      const dbKeyString = await crypto.aesGcm.decryptString(sharedKeyEncryptionKey, sharedEncryptedDbKey)\n      dbKey = await crypto.aesGcm.getKeyFromKeyString(dbKeyString)\n\n      // make sure dbKey the sender sent works\n      databaseName = await crypto.aesGcm.decryptString(dbKey, db.databaseName)\n    } catch (e) {\n      // if for whatever reason the above process fails (e.g. malicious sender or version upgrade breaks the above implementation),\n      // simply return a null spot for database\n      return null\n    }\n\n    // compute receivedSignature to maintain record of who received dbKey from\n    const senderFingerprint = await _getFingerprint(senderRawEcdsaPublicKey)\n    const receivedSignature = await _signDbKeyAndFingerprint(dbKey, senderFingerprint)\n\n    // tell server to store encrypted db key & delete ephemeral key data\n    const dbKeyString = await crypto.aesGcm.getKeyStringFromKey(dbKey)\n    const encryptedDbKey = await crypto.aesGcm.encryptString(encryptionKey, dbKeyString)\n\n    const action = 'SaveDatabase'\n    const params = { databaseNameHash, encryptedDbKey, receivedSignature }\n    ws.request(action, params)\n  }\n\n  const result = {\n    databaseName,\n    databaseId,\n    isOwner,\n    readOnly,\n    resharingAllowed,\n    encryptionMode: db.plaintextDbKey ? 'server-side' : 'end-to-end',\n  }\n\n  const users = await _getDatabaseUsers(databaseId, databaseNameHash, dbKey, verifiedUsers, username, senderUsername)\n\n  // if database has no owner, owner must have been deleted and database should not be accessible to user\n  if (isOwner || _databaseHasOwner(users)) result.users = users\n  else return null\n\n  if (!isOwner && senderUsername) result.receivedFromUsername = senderUsername\n\n  return result\n}\n\nconst getDatabases = async (params) => {\n  try {\n    if (params !== undefined) _validateDbInput(params)\n    _checkSignedInState()\n\n    const { encryptionKey, ecdhPrivateKey } = ws.keys\n    const username = ws.session.username\n\n    if (params && objectHasOwnProperty(params, 'shareToken')) throw new errors.ShareTokenNotAllowed\n\n    const encryptionMode = (params && params.encryptionMode) || ws.encryptionMode\n    _validateEncryptionMode(encryptionMode)\n\n    try {\n      const databases = []\n      const action = 'GetDatabases'\n      const requestParams = params && {\n        databaseId: params.databaseId,\n        dbNameHash: encryptionMode === 'server-side'\n          ? params.databaseName\n          : params.databaseName && await crypto.hmac.signString(ws.keys.hmacKey, params.databaseName)\n      }\n\n      let [databasesResponse, verifiedUsers] = await Promise.all([ws.request(action, requestParams), _openVerifiedUsersDatabase()])\n      let databaseResults = await Promise.all(databasesResponse.data.databases.map(db => _buildDatabaseResult(db, encryptionKey, ecdhPrivateKey, verifiedUsers, username)))\n      databases.push(...databaseResults)\n\n      while (databasesResponse.data.nextPageToken) {\n        const params = { nextPageToken: databasesResponse.data.nextPageToken }\n        databasesResponse = await ws.request(action, params)\n        databaseResults = await Promise.all(databasesResponse.data.databases.map(db => _buildDatabaseResult(db, encryptionKey, ecdhPrivateKey, verifiedUsers, username)))\n        databases.push(...databaseResults)\n      }\n\n      return { databases: databases.filter(database => database !== null) }\n    } catch (e) {\n      _parseGenericErrors(e)\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst _getDatabase = async (databaseName, databaseId, encryptionMode = 'end-to-end') => {\n  _validateEncryptionMode(encryptionMode)\n\n  let database\n  try {\n    // check if database is already open in memory. shareToken = null because not possible to pass shareToken here\n    database = getOpenDb(databaseName, databaseId, null, encryptionMode)\n  } catch {\n    // if not already open in memory, it's ok. Just get the values we need from backend\n    const action = 'GetDatabases'\n    const requestParams = databaseName\n      ? { dbNameHash: encryptionMode === 'server-side' ? databaseName : await crypto.hmac.signString(ws.keys.hmacKey, databaseName) }\n      : { databaseId }\n\n    const databaseResponse = await ws.request(action, requestParams)\n\n    const databases = databaseResponse.data.databases\n    if (!databases || !databases.length) throw new errors.DatabaseNotFound\n    database = databases[0]\n\n    // type conversion :/\n    database.dbNameHash = database.databaseNameHash\n    database.dbId = database.databaseId\n  }\n  return database\n}\n\nconst _signFingerprintWithDbKey = async (dbKey, fingerprint) => {\n  // convert dbKey into hmacKey\n  const rawDbKey = await crypto.aesGcm.getRawKeyFromKey(dbKey)\n  const dbKeyHash = await crypto.sha256.hash(rawDbKey)\n  const hmacKey = await crypto.hmac.importKeyFromRawBits(dbKeyHash)\n\n  // sign fingerprint with hmacKey\n  const signedFingerprint = await crypto.hmac.signString(hmacKey, fingerprint)\n  return signedFingerprint\n}\n\nconst _signDbKeyAndFingerprint = async (dbKey, fingerprint) => {\n  const signedFingerprint = await _signFingerprintWithDbKey(dbKey, fingerprint)\n\n  // digitally sign the signedFingerprint to enable a user to verify that\n  // this user has sent/received dbKey to/from intended recipient/sender\n  const signedDbKeyAndFingerprint = await crypto.ecdsa.signString(ws.keys.ecdsaPrivateKey, signedFingerprint)\n  return signedDbKeyAndFingerprint\n}\n\nconst _verifyDatabaseRecipientFingerprint = async (username, recipientFingerprint, verifiedUsers) => {\n  // find recipient's fingerprint in verified users database\n  let verifiedRecipientFingerprint, foundOldFingerprint\n  const verifiedUsersArray = Object.keys(verifiedUsers)\n  for (let i = 0; i < verifiedUsersArray.length; i++) {\n    const verifiedUsername = verifiedUsersArray[i]\n    const verifiedFingerprint = verifiedUsers[verifiedUsername].record.fingerprint\n    if (username === verifiedUsername && recipientFingerprint === verifiedFingerprint) {\n      verifiedRecipientFingerprint = verifiedFingerprint\n      break\n    } else if (verifiedFingerprint === recipientFingerprint) {\n      foundOldFingerprint = true\n    }\n  }\n\n  // must have an outdated username stored in verified users database and therefore must reverify recipient\n  if (!verifiedRecipientFingerprint && foundOldFingerprint) throw new errors.UserMustBeReverified\n  if (!verifiedRecipientFingerprint) throw new errors.UserNotVerified\n}\n\nconst _getDatabaseEncryptionKey = async (database) => {\n  let dbKeyString\n  if (!database.dbKey) {\n    dbKeyString = database.plaintextDbKey || await crypto.aesGcm.decryptString(ws.keys.encryptionKey, database.encryptedDbKey)\n    database.dbKey = await crypto.aesGcm.getKeyFromKeyString(dbKeyString)\n  } else {\n    dbKeyString = await crypto.aesGcm.getKeyStringFromKey(database.dbKey)\n  }\n  return dbKeyString\n}\n\nconst _getShareToken = async (params, readOnly, encryptionMode) => {\n  try {\n    const { databaseName, databaseId } = params\n\n    if (objectHasOwnProperty(params, 'requireVerified')) throw new errors.RequireVerifiedParamNotNecessary\n    if (objectHasOwnProperty(params, 'resharingAllowed')) throw new errors.ResharingAllowedParamNotAllowed('when retrieving a share token')\n\n    // generate share token seed and associated keys\n    const shareTokenSeed = crypto.generateSeed()\n    const shareTokenHkdfKey = await crypto.hkdf.importHkdfKey(shareTokenSeed)\n\n    // generate share token encryption key\n    const shareTokenEncryptionKeySalt = crypto.hkdf.generateSalt()\n    const shareTokenEncryptionKey = await crypto.aesGcm.importKeyFromMaster(shareTokenHkdfKey, shareTokenEncryptionKeySalt)\n\n    // encrypt the database key using shareTokenEncryptionKey\n    const database = await _getDatabase(databaseName, databaseId, encryptionMode)\n    const dbKeyString = await _getDatabaseEncryptionKey(database)\n    const shareTokenEncryptedDbKeyString = await crypto.aesGcm.encryptString(shareTokenEncryptionKey, dbKeyString)\n\n    // generate share token ECDSA key data\n    const { ecdsaPublicKey, encryptedEcdsaPrivateKey, ecdsaKeyEncryptionKeySalt } = await crypto.ecdsa.generateEcdsaKeyData(shareTokenHkdfKey)\n\n    const action = 'ShareDatabaseToken'\n    const requestParams = {\n      databaseId: database.dbId,\n      databaseNameHash: database.dbNameHash,\n      readOnly,\n      keyData: {\n        shareTokenEncryptedDbKey: shareTokenEncryptedDbKeyString,\n        shareTokenEncryptionKeySalt: base64.encode(shareTokenEncryptionKeySalt),\n        shareTokenPublicKey: ecdsaPublicKey,\n        shareTokenEncryptedEcdsaPrivateKey: encryptedEcdsaPrivateKey,\n        shareTokenEcdsaKeyEncryptionKeySalt: ecdsaKeyEncryptionKeySalt,\n      }\n    }\n    const shareTokenResponse = await ws.request(action, requestParams)\n\n    // server generates unique ID\n    const { shareTokenId } = shareTokenResponse.data\n\n    // prepend shareTokenId to shareTokenSeed to get final shareToken to return to user, all in base64\n    const shareTokenIdArrayBuffer = stringToArrayBuffer(shareTokenId, true)\n    const shareToken = base64.encode(appendBuffer(shareTokenIdArrayBuffer, shareTokenSeed))\n    return shareToken\n  } catch (e) {\n    _parseGenericErrors(e)\n\n    if (e.response && e.response.data) {\n      switch (e.response.data.message) {\n        case 'DatabaseNotFound': throw new errors.DatabaseNotFound\n        case 'ResharingNotAllowed': throw new errors.ResharingNotAllowed('Only the owner can generate a share token')\n      }\n    }\n\n    throw e\n  }\n}\n\nconst _shareDatabaseWithUsername = async (params, readOnly, resharingAllowed, requireVerified, encryptionMode) => {\n  const { databaseName, databaseId } = params\n  const username = params.username.toLowerCase()\n\n  try {\n    // get recipient's public key to use to generate a shared key, and retrieve verified users list if requireVerified set to true\n    const [recipientPublicKey, verifiedUsers, database] = await Promise.all([\n      authApi.getPublicKey(username),\n      requireVerified && _openVerifiedUsersDatabase(),\n      _getDatabase(databaseName, databaseId, encryptionMode),\n    ])\n\n    // recipient must have required keys so client can share database key\n    if (!recipientPublicKey.ecdhPublicKey || !recipientPublicKey.ecdsaPublicKey) throw new errors.UserUnableToReceiveDatabase\n\n    // compute recipient's fingerprint of ECDSA public key stored on server\n    const recipientRawEcdsaPublicKey = base64.decode(recipientPublicKey.ecdsaPublicKey)\n    const recipientFingerprint = await _getFingerprint(recipientRawEcdsaPublicKey)\n\n    // verify that the recipient is in the user's list of verified users\n    if (requireVerified) await _verifyDatabaseRecipientFingerprint(username, recipientFingerprint, verifiedUsers)\n\n    // verify recipient signed the ECDH public key that sender will be using to share database\n    const recipientEcdsaPublicKey = await crypto.ecdsa.getPublicKeyFromRawPublicKey(recipientRawEcdsaPublicKey)\n    const { signedEcdhPublicKey, ecdhPublicKey } = recipientPublicKey\n    const isVerified = await crypto.ecdsa.verify(recipientEcdsaPublicKey, base64.decode(signedEcdhPublicKey), base64.decode(ecdhPublicKey))\n\n    // this should never happen. If this happens, the server is serving conflicting keys and client should not sign anything\n    if (!isVerified) throw new errors.ServiceUnavailable\n\n    const recipientEcdhPublicKey = await crypto.ecdh.getPublicKeyFromRawPublicKey(base64.decode(recipientPublicKey.ecdhPublicKey))\n\n    // generate ephemeral ECDH key pair to ensure forward secrecy for future shares between users if shared key is leaked\n    const ephemeralEcdhKeyPair = await crypto.ecdh.generateKeyPair()\n    const rawEphemeralEcdhPublicKey = await crypto.ecdh.getRawPublicKeyFromPublicKey(ephemeralEcdhKeyPair.publicKey)\n    const signedEphemeralEcdhPublicKey = await crypto.ecdsa.sign(ws.keys.ecdsaPrivateKey, rawEphemeralEcdhPublicKey)\n\n    // compute shared key encryption key with recipient so can use it to encrypt database encryption key\n    const sharedKeyEncryptionKey = await crypto.ecdh.computeSharedKeyEncryptionKey(recipientEcdhPublicKey, ephemeralEcdhKeyPair.privateKey)\n\n    // encrypt the database encryption key using shared ephemeral ECDH key\n    const dbKeyString = await _getDatabaseEncryptionKey(database)\n    const sharedEncryptedDbKeyString = await crypto.aesGcm.encryptString(sharedKeyEncryptionKey, dbKeyString)\n\n    const action = 'ShareDatabase'\n    const requestParams = {\n      databaseId: database.dbId,\n      databaseNameHash: database.dbNameHash,\n      username,\n      readOnly,\n      resharingAllowed,\n      sharedEncryptedDbKey: sharedEncryptedDbKeyString,\n      ephemeralPublicKey: base64.encode(rawEphemeralEcdhPublicKey),\n      signedEphemeralPublicKey: base64.encode(signedEphemeralEcdhPublicKey),\n      sentSignature: await _signDbKeyAndFingerprint(database.dbKey, recipientFingerprint),\n      recipientEcdsaPublicKey: recipientPublicKey.ecdsaPublicKey\n    }\n    await ws.request(action, requestParams)\n  } catch (e) {\n    _parseGenericErrors(e)\n\n    if (e.response && e.response.data) {\n      switch (e.response.data.message) {\n        case 'SharingWithSelfNotAllowed':\n          throw new errors.SharingWithSelfNotAllowed\n        case 'DatabaseNotFound':\n          throw new errors.DatabaseNotFound\n        case 'ResharingNotAllowed':\n          throw new errors.ResharingNotAllowed('Must have permission to reshare the database with another user')\n        case 'ResharingWithWriteAccessNotAllowed':\n          throw new errors.ResharingWithWriteAccessNotAllowed\n        case 'UserNotFound':\n          throw new errors.UserNotFound\n        case 'DatabaseAlreadyShared':\n          // safe to return\n          return\n      }\n    }\n\n    throw e\n  }\n}\n\nconst _validateUsername = (username) => {\n  if (typeof username !== 'string') throw new errors.UsernameMustBeString\n  if (username.length === 0) throw new errors.UsernameCannotBeBlank\n}\n\nconst _validateDbSharingInput = (params) => {\n  if (objectHasOwnProperty(params, 'shareToken')) throw new errors.ShareTokenNotAllowed\n\n  if (objectHasOwnProperty(params, 'username')) _validateUsername(params.username)\n\n  if (objectHasOwnProperty(params, 'readOnly') && typeof params.readOnly !== 'boolean') {\n    throw new errors.ReadOnlyMustBeBoolean\n  }\n\n  if (objectHasOwnProperty(params, 'resharingAllowed') && typeof params.resharingAllowed !== 'boolean') {\n    throw new errors.ResharingAllowedMustBeBoolean\n  }\n\n  if (objectHasOwnProperty(params, 'requireVerified') && typeof params.requireVerified !== 'boolean') {\n    throw new errors.RequireVerifiedMustBeBoolean\n  }\n}\n\nconst shareDatabase = async (params) => {\n  try {\n    _validateDbInput(params)\n    _validateDbSharingInput(params)\n\n    const readOnly = objectHasOwnProperty(params, 'readOnly') ? params.readOnly : true\n    const resharingAllowed = objectHasOwnProperty(params, 'resharingAllowed') ? params.resharingAllowed : false\n    const requireVerified = objectHasOwnProperty(params, 'requireVerified') ? params.requireVerified : true\n\n    const encryptionMode = params.encryptionMode || ws.encryptionMode\n    _validateEncryptionMode(encryptionMode)\n\n    let result = {}\n    if (objectHasOwnProperty(params, 'username')) await _shareDatabaseWithUsername(params, readOnly, resharingAllowed, requireVerified, encryptionMode)\n    else result.shareToken = await _getShareToken(params, readOnly, encryptionMode)\n\n    return result\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'DatabaseNotFound':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameMustBeString':\n      case 'ReadOnlyMustBeBoolean':\n      case 'ResharingAllowedMustBeBoolean':\n      case 'ResharingNotAllowed':\n      case 'ResharingWithWriteAccessNotAllowed':\n      case 'ResharingAllowedParamNotAllowed':\n      case 'RequireVerifiedMustBeBoolean':\n      case 'RequireVerifiedParamNotNecessary':\n      case 'SharingWithSelfNotAllowed':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserUnableToReceiveDatabase':\n      case 'UserNotFound':\n      case 'UserNotVerified':\n      case 'UserMustBeReverified':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst modifyDatabasePermissions = async (params) => {\n  try {\n    _validateDbInput(params)\n    _validateDbSharingInput(params)\n\n    if (!objectHasOwnProperty(params, 'username')) throw new errors.UsernameMissing\n\n    if (objectHasOwnProperty(params, 'revoke')) {\n      if (typeof params.revoke !== 'boolean') throw new errors.RevokeMustBeBoolean\n\n      // readOnly and resharingAllowed booleans have no use if revoking database from user\n      if (params.revoke) {\n        if (objectHasOwnProperty(params, 'readOnly')) throw new errors.ReadOnlyParamNotAllowed\n        if (objectHasOwnProperty(params, 'resharingAllowed')) throw new errors.ResharingAllowedParamNotAllowed('when revoking access to a database')\n      }\n    } else if (!objectHasOwnProperty(params, 'readOnly') && !objectHasOwnProperty(params, 'resharingAllowed')) {\n      throw new errors.ParamsMissing\n    }\n\n    const { databaseName, databaseId, readOnly, resharingAllowed, revoke, encryptionMode = ws.encryptionMode } = params\n    const username = params.username.toLowerCase()\n\n    try {\n      const database = await _getDatabase(databaseName, databaseId, encryptionMode)\n\n      const action = 'ModifyDatabasePermissions'\n      const requestParams = {\n        databaseId: database.dbId,\n        databaseNameHash: database.dbNameHash,\n        username,\n        readOnly,\n        resharingAllowed,\n        revoke,\n      }\n      await ws.request(action, requestParams)\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response && e.response.data) {\n        switch (e.response.data.message) {\n          case 'SharingWithSelfNotAllowed':\n            throw new errors.ModifyingOwnPermissionsNotAllowed\n          case 'ModifyingOwnerPermissionsNotAllowed':\n            throw new errors.ModifyingOwnerPermissionsNotAllowed\n          case 'ResharingNotAllowed':\n            throw new errors.ModifyingPermissionsNotAllowed\n          case 'ResharingWithWriteAccessNotAllowed':\n            throw new errors.GrantingWriteAccessNotAllowed\n          case 'DatabaseNotFound':\n            throw new errors.DatabaseNotFound\n          case 'UserNotFound':\n            throw new errors.UserNotFound\n        }\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'ParamsMissing':\n      case 'DatabaseNameMissing':\n      case 'DatabaseNameMustBeString':\n      case 'DatabaseNameCannotBeBlank':\n      case 'DatabaseNameTooLong':\n      case 'DatabaseNameRestricted':\n      case 'DatabaseIdMustBeString':\n      case 'DatabaseIdCannotBeBlank':\n      case 'DatabaseIdInvalidLength':\n      case 'DatabaseIdNotAllowed':\n      case 'ShareTokenNotAllowed':\n      case 'DatabaseNotFound':\n      case 'EncryptionModeNotValid':\n      case 'ServerSideEncryptionNotEnabledInClient':\n      case 'UsernameMissing':\n      case 'UsernameCannotBeBlank':\n      case 'UsernameMustBeString':\n      case 'ReadOnlyMustBeBoolean':\n      case 'ReadOnlyParamNotAllowed':\n      case 'ResharingAllowedMustBeBoolean':\n      case 'ResharingAllowedParamNotAllowed':\n      case 'RevokeMustBeBoolean':\n      case 'ModifyingOwnPermissionsNotAllowed':\n      case 'ModifyingOwnerPermissionsNotAllowed':\n      case 'ModifyingPermissionsNotAllowed':\n      case 'GrantingWriteAccessNotAllowed':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'UserNotFound':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst _packVerificationMessage = (username, fingerprint) => {\n  return btoa(JSON.stringify({ username, fingerprint }))\n}\n\nconst _unpackVerificationMessage = (verificationMessage) => {\n  try {\n    const { username, fingerprint } = JSON.parse(atob(verificationMessage))\n\n    _validateUsername(username)\n    if (!fingerprint) throw new errors.VerificationMessageInvalid\n\n    return { username, fingerprint }\n  } catch {\n    throw new errors.VerificationMessageInvalid\n  }\n}\n\nconst _getFingerprint = async (ecdsaRawPublicKey) => {\n  const ecdsaPublicKeyHash = await crypto.sha256.hash(ecdsaRawPublicKey)\n  const fingerprint = base64.encode(ecdsaPublicKeyHash)\n  return fingerprint\n}\n\nconst _getMyFingerprint = async () => {\n  const ecdsaPublicKey = await crypto.ecdsa.getPublicKeyFromPrivateKey(ws.keys.ecdsaPrivateKey)\n  const ecdsaRawPublicKey = await crypto.ecdsa.getRawPublicKeyFromPublicKey(ecdsaPublicKey)\n  const fingerprint = await _getFingerprint(ecdsaRawPublicKey)\n  return fingerprint\n}\n\nconst getVerificationMessage = async () => {\n  try {\n    _checkSignedInState()\n\n    const username = ws.session.username\n    const fingerprint = await _getMyFingerprint()\n\n    const verificationMessage = _packVerificationMessage(username, fingerprint)\n    return { verificationMessage }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst _openVerifiedUsersDatabase = async () => {\n  const databaseName = VERIFIED_USERS_DATABASE_NAME\n  const changeHandler = () => { } // not used\n  const allowVerifiedUsersDatabase = true\n  const encryptionMode = 'end-to-end' // if server has access, opens attack vector because can withold and/or replace verified users\n  await openDatabase({ databaseName, changeHandler, allowVerifiedUsersDatabase, encryptionMode })\n  const dbNameHash = ws.state.dbNameToHash[databaseName]\n  const verifiedUsers = ws.state.databases[dbNameHash].items\n  return verifiedUsers\n}\n\nconst verifyUser = async (params) => {\n  try {\n    if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n    _checkSignedInState()\n\n    if (!objectHasOwnProperty(params, 'verificationMessage')) throw new errors.VerificationMessageMissing\n    const { verificationMessage } = params\n    if (typeof verificationMessage !== 'string') throw new errors.VerificationMessageMustBeString\n    if (verificationMessage.length === 0) throw new errors.VerificationMessageCannotBeBlank\n\n    const { username, fingerprint } = _unpackVerificationMessage(verificationMessage)\n\n    if (username === ws.session.username || fingerprint === await _getMyFingerprint()) throw new errors.VerifyingSelfNotAllowed\n\n    // upsert the verification message into the user's encrypted database that stores verified users\n    await _openVerifiedUsersDatabase()\n\n    const databaseName = VERIFIED_USERS_DATABASE_NAME\n    const allowVerifiedUsersDatabase = true\n    const itemId = username\n    const item = { fingerprint }\n    try {\n      await insertItem({ databaseName, itemId, item, allowVerifiedUsersDatabase })\n    } catch (e) {\n      if (e.name === 'ItemAlreadyExists') await updateItem({ databaseName, itemId, item, allowVerifiedUsersDatabase })\n      else throw e\n    }\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'VerificationMessageMissing':\n      case 'VerificationMessageMustBeString':\n      case 'VerificationMessageCannotBeBlank':\n      case 'VerificationMessageInvalid':\n      case 'VerifyingSelfNotAllowed':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nexport default {\n  openDatabase,\n  getDatabases,\n\n  insertItem,\n  updateItem,\n  deleteItem,\n  putTransaction,\n\n  uploadFile,\n  getFile,\n\n  shareDatabase,\n  modifyDatabasePermissions,\n\n  getVerificationMessage,\n  verifyUser,\n}\n","import ws from './ws'\nimport errors from './errors'\nimport statusCodes from './statusCodes'\nimport { objectHasOwnProperty, getProtocolFromEndpoint } from './utils'\nimport config from './config'\n\nconst _checkSignedInState = () => {\n  if (ws.reconnecting) throw new errors.Reconnecting\n  if (!ws.keys.init && ws.changePassword) throw new errors.UserMustChangePassword\n  if (!ws.keys.init) throw new errors.UserNotSignedIn\n}\n\nconst _parseGenericErrors = (e) => {\n  if (e.response) {\n    if (e.response.status === statusCodes['Internal Server Error']) {\n      throw new errors.InternalServerError\n    } else if (e.response.status === statusCodes['Gateway Timeout']) {\n      throw new errors.Timeout\n    }\n  } else if (e.message && e.message.indexOf('timeout') !== -1) {\n    throw new errors.Timeout\n  }\n}\n\nconst _validatePurchaseOrUpdate = (params) => {\n  _checkSignedInState()\n\n  const stripeData = ws.userData.stripeData\n  if (!stripeData.stripeAccountId) throw new errors.StripeAccountNotConnected\n  if (stripeData.paymentsMode === 'disabled') throw new errors.PaymentsDisabled\n\n  if (!objectHasOwnProperty(window, 'Stripe')) throw new errors.StripeJsLibraryMissing\n\n  if (typeof params !== 'object') throw new errors.ParamsMustBeObject\n\n  if (!objectHasOwnProperty(params, 'successUrl')) throw new errors.SuccessUrlMissing\n  if (typeof params.successUrl !== 'string') throw new errors.SuccessUrlMustBeString\n  const successUrlProtocol = getProtocolFromEndpoint(params.successUrl)\n  if (successUrlProtocol !== 'http' && successUrlProtocol !== 'https') {\n    const invalidProtocol = true\n    throw new errors.SuccessUrlInvalid(invalidProtocol)\n  }\n\n  if (!objectHasOwnProperty(params, 'cancelUrl')) throw new errors.CancelUrlMissing\n  if (typeof params.cancelUrl !== 'string') throw new errors.CancelUrlMustBeString\n  const cancelUrlProtocol = getProtocolFromEndpoint(params.cancelUrl)\n  if (cancelUrlProtocol !== 'http' && cancelUrlProtocol !== 'https') {\n    const invalidProtocol = true\n    throw new errors.CancelUrlInvalid(invalidProtocol)\n  }\n}\n\nconst purchaseSubscription = async (params) => {\n  try {\n    const stripeData = ws.userData.stripeData\n    if (!stripeData.cancelSubscriptionAt && stripeData.subscriptionStatus && stripeData.subscriptionStatus !== 'canceled') {\n      throw new errors.SubscriptionPlanAlreadyPurchased\n    }\n    _validatePurchaseOrUpdate(params)\n\n    try {\n      const action = 'PurchaseSubscription'\n      const sessionIdResponse = await ws.request(action, params)\n      const stripeSessionId = sessionIdResponse.data\n\n      const stripePk = config.getStripePublishableKey(stripeData.paymentsMode === 'prod')\n\n      const result = await window\n        .Stripe(stripePk, { stripeAccount: stripeData.stripeAccountId })\n        .redirectToCheckout({ sessionId: stripeSessionId })\n\n      if (result.error) throw result.error\n\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response) {\n        switch (e.response.data) {\n          case 'PriceIdOrPlanIdAllowed': throw new errors.PriceIdOrPlanIdAllowed\n          case 'PriceIdOrPlanIdMissing': throw new errors.PriceIdOrPlanIdMissing\n          case 'SubscriptionPlanAlreadyPurchased': throw new errors.SubscriptionPlanAlreadyPurchased\n          case 'SuccessUrlInvalid': throw new errors.SuccessUrlInvalid\n          case 'CancelUrlInvalid': throw new errors.CancelUrlInvalid\n          default: {\n            if (e.response.data && e.response.data.name === 'StripeError') {\n              throw new errors.StripeError(e.response.data)\n            }\n          }\n        }\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'SuccessUrlMissing':\n      case 'SuccessUrlMustBeString':\n      case 'SuccessUrlInvalid':\n      case 'CancelUrlMissing':\n      case 'CancelUrlMustBeString':\n      case 'CancelUrlInvalid':\n      case 'StripeError':\n      case 'StripeJsLibraryMissing':\n      case 'PriceIdOrPlanIdAllowed':\n      case 'PriceIdOrPlanIdMissing':\n      case 'SubscriptionPlanAlreadyPurchased':\n      case 'StripeAccountNotConnected':\n      case 'PaymentsDisabled':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst _validateModifySubscriptionConditions = () => {\n  _checkSignedInState()\n\n  const stripeData = ws.userData.stripeData\n  if (!stripeData.stripeAccountId) throw new errors.StripeAccountNotConnected\n  if (stripeData.paymentsMode === 'disabled') throw new errors.PaymentsDisabled\n\n  if (stripeData.subscriptionStatus === 'canceled') throw new errors.SubscriptionAlreadyCanceled\n}\n\nconst cancelSubscription = async () => {\n  try {\n    _validateModifySubscriptionConditions()\n\n    try {\n      const action = 'CancelSubscription'\n      const cancelResponse = await ws.request(action)\n      const cancelSubscriptionAt = cancelResponse.data\n\n      ws.userData.stripeData.cancelSubscriptionAt = cancelSubscriptionAt\n      return { cancelSubscriptionAt }\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response && e.response.data === 'SubscriptionNotFound') {\n        throw new errors.SubscriptionNotFound\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'SubscriptionNotFound':\n      case 'StripeAccountNotConnected':\n      case 'PaymentsDisabled':\n      case 'SubscriptionAlreadyCanceled':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst resumeSubscription = async () => {\n  try {\n    _validateModifySubscriptionConditions()\n\n    try {\n      const action = 'ResumeSubscription'\n      await ws.request(action)\n\n      delete ws.userData.stripeData.cancelSubscriptionAt\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response && e.response.data === 'SubscriptionNotFound') {\n        throw new errors.SubscriptionNotFound\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'SubscriptionNotFound':\n      case 'StripeAccountNotConnected':\n      case 'PaymentsDisabled':\n      case 'SubscriptionAlreadyCanceled':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nconst updatePaymentMethod = async (params) => {\n  try {\n    _validatePurchaseOrUpdate(params)\n\n    const stripeData = ws.userData.stripeData\n    if (!stripeData.subscriptionStatus) throw new errors.SubscriptionNotPurchased\n\n    try {\n      const action = 'UpdatePaymentMethod'\n      const sessionIdResponse = await ws.request(action, params)\n      const stripeSessionId = sessionIdResponse.data\n\n      const stripePk = config.getStripePublishableKey(stripeData.paymentsMode === 'prod')\n\n      const result = await window\n        .Stripe(stripePk, { stripeAccount: stripeData.stripeAccountId })\n        .redirectToCheckout({ sessionId: stripeSessionId })\n\n      if (result.error) throw result.error\n\n    } catch (e) {\n      _parseGenericErrors(e)\n\n      if (e.response) {\n        if (e.response.data === 'SuccessUrlInvalid') {\n          throw new errors.SuccessUrlInvalid\n        } else if (e.response.data === 'CancelUrlInvalid') {\n          throw new errors.CancelUrlInvalid\n        }\n      }\n\n      throw e\n    }\n\n  } catch (e) {\n\n    switch (e.name) {\n      case 'ParamsMustBeObject':\n      case 'SuccessUrlMissing':\n      case 'SuccessUrlMustBeString':\n      case 'SuccessUrlInvalid':\n      case 'CancelUrlMissing':\n      case 'CancelUrlMustBeString':\n      case 'CancelUrlInvalid':\n      case 'StripeJsLibraryMissing':\n      case 'SubscriptionNotPurchased':\n      case 'StripeAccountNotConnected':\n      case 'PaymentsDisabled':\n      case 'UserMustChangePassword':\n      case 'UserNotSignedIn':\n      case 'TooManyRequests':\n      case 'ServiceUnavailable':\n        throw e\n\n      default:\n        throw new errors.UnknownServiceUnavailable(e)\n    }\n  }\n}\n\nexport default {\n  purchaseSubscription,\n  cancelSubscription,\n  resumeSubscription,\n  updatePaymentMethod,\n}\n","import auth from './auth'\nimport db from './db'\nimport payments from './payments'\n\nexport default {\n  init: auth.init,\n\n  signUp: auth.signUp,\n  signIn: auth.signIn,\n  signOut: auth.signOut,\n  updateUser: auth.updateUser,\n  deleteUser: auth.deleteUser,\n  forgotPassword: auth.forgotPassword,\n\n  openDatabase: db.openDatabase,\n\n  insertItem: db.insertItem,\n  updateItem: db.updateItem,\n  deleteItem: db.deleteItem,\n  putTransaction: db.putTransaction,\n\n  uploadFile: db.uploadFile,\n  getFile: db.getFile,\n\n  getDatabases: db.getDatabases,\n  shareDatabase: db.shareDatabase,\n  modifyDatabasePermissions: db.modifyDatabasePermissions,\n  getVerificationMessage: db.getVerificationMessage,\n  verifyUser: db.verifyUser,\n\n  purchaseSubscription: payments.purchaseSubscription,\n  cancelSubscription: payments.cancelSubscription,\n  resumeSubscription: payments.resumeSubscription,\n  updatePaymentMethod: payments.updatePaymentMethod,\n}\n"],"sourceRoot":""}